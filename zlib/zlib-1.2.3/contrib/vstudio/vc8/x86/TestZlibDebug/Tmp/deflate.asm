; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
CONST	SEGMENT
_deflate_copyright DB ' deflate 1.2.3 Copyright 1995-2005 Jean-loup Gaill'
	DB	'y ', 00H
	ORG $+3
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.3', 00H	; `deflateInit2_'::`2'::my_version
CONST	ENDS
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
; Function compile flags: /Odtp /ZI
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 210  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
; 211  :                          Z_DEFAULT_STRATEGY, version, stream_size);

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	0
	push	8
	push	15					; 0000000fH
	push	8
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateInit2_@32

; 212  :     /* To do: ignore strm->next_in if we use it as window */
; 213  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
PUBLIC	_deflateReset@4
PUBLIC	_deflateEnd@4
EXTRN	_z_errmsg:BYTE
EXTRN	_zcfree:PROC
EXTRN	_zcalloc:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_wrap$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 227  :     deflate_state *s;
; 228  :     int wrap = 1;

	mov	DWORD PTR _wrap$[ebp], 1

; 229  :     static const char my_version[] = ZLIB_VERSION;
; 230  : 
; 231  :     ushf *overlay;
; 232  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 233  :      * output size for (length,distance) codes is <= 24 bits.
; 234  :      */
; 235  : 
; 236  :     if (version == Z_NULL || version[0] != my_version[0] ||
; 237  :         stream_size != sizeof(z_stream)) {

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN14@deflateIni
	mov	eax, DWORD PTR _version$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9
	cmp	ecx, edx
	jne	SHORT $LN14@deflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN15@deflateIni
$LN14@deflateIni:

; 238  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN16@deflateIni
$LN15@deflateIni:

; 239  :     }
; 240  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN13@deflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN16@deflateIni
$LN13@deflateIni:

; 241  : 
; 242  :     strm->msg = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 243  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN12@deflateIni

; 244  :         strm->zalloc = zcalloc;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _zcalloc

; 245  :         strm->opaque = (voidpf)0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN12@deflateIni:

; 246  :     }
; 247  :     if (strm->zfree == (free_func)0) strm->zfree = zcfree;

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN11@deflateIni
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _zcfree
$LN11@deflateIni:

; 248  : 
; 249  : #ifdef FASTEST
; 250  :     if (level != 0) level = 1;
; 251  : #else
; 252  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN10@deflateIni
	mov	DWORD PTR _level$[ebp], 6
$LN10@deflateIni:

; 253  : #endif
; 254  : 
; 255  :     if (windowBits < 0) { /* suppress zlib wrapper */

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN9@deflateIni

; 256  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 257  :         windowBits = -windowBits;

	mov	eax, DWORD PTR _windowBits$[ebp]
	neg	eax
	mov	DWORD PTR _windowBits$[ebp], eax
	jmp	SHORT $LN8@deflateIni
$LN9@deflateIni:

; 258  :     }
; 259  : #ifdef GZIP
; 260  :     else if (windowBits > 15) {

	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN8@deflateIni

; 261  :         wrap = 2;       /* write gzip wrapper instead */

	mov	DWORD PTR _wrap$[ebp], 2

; 262  :         windowBits -= 16;

	mov	eax, DWORD PTR _windowBits$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _windowBits$[ebp], eax
$LN8@deflateIni:

; 263  :     }
; 264  : #endif
; 265  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 266  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 267  :         strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _memLevel$[ebp], 1
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _memLevel$[ebp], 9
	jg	SHORT $LN5@deflateIni
	cmp	DWORD PTR _method$[ebp], 8
	jne	SHORT $LN5@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jg	SHORT $LN5@deflateIni
	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN5@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN5@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN6@deflateIni
$LN5@deflateIni:

; 268  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN16@deflateIni
$LN6@deflateIni:

; 269  :     }
; 270  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN4@deflateIni
	mov	DWORD PTR _windowBits$[ebp], 9
$LN4@deflateIni:

; 271  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

	push	5824					; 000016c0H
	push	1
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax

; 272  :     if (s == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN3@deflateIni
	mov	eax, -4					; fffffffcH
	jmp	$LN16@deflateIni
$LN3@deflateIni:

; 273  :     strm->state = (struct internal_state FAR *)s;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 274  :     s->strm = strm;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax], ecx

; 275  : 
; 276  :     s->wrap = wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 277  :     s->gzhead = Z_NULL;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+28], 0

; 278  :     s->w_bits = windowBits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 279  :     s->w_size = 1 << s->w_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+48]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+44], edx

; 280  :     s->w_mask = s->w_size - 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 281  : 
; 282  :     s->hash_bits = memLevel + 7;

	mov	eax, DWORD PTR _memLevel$[ebp]
	add	eax, 7
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 283  :     s->hash_size = 1 << s->hash_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+80]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+76], edx

; 284  :     s->hash_mask = s->hash_size - 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+84], ecx

; 285  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+80]
	add	eax, 2
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+88], eax

; 286  : 
; 287  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 288  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 289  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 290  : 
; 291  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 6
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5788], eax

; 292  : 
; 293  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 294  :     s->pending_buf = (uchf *) overlay;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 295  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shl	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 296  : 
; 297  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
; 298  :         s->pending_buf == Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN1@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN1@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@deflateIni
$LN1@deflateIni:

; 299  :         s->status = FINISH_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 666			; 0000029aH

; 300  :         strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _z_errmsg+24
	mov	DWORD PTR [eax+24], ecx

; 301  :         deflateEnd (strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateEnd@4

; 302  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN16@deflateIni
$LN2@deflateIni:

; 303  :     }
; 304  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shr	ecx, 1
	mov	edx, DWORD PTR _overlay$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5796], eax

; 305  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	imul	ecx, 3
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5784], ecx

; 306  : 
; 307  :     s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 308  :     s->strategy = strategy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [eax+136], ecx

; 309  :     s->method = (Byte)method;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR _method$[ebp]
	mov	BYTE PTR [eax+36], cl

; 310  : 
; 311  :     return deflateReset(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateReset@4
$LN16@deflateIni:

; 312  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
PUBLIC	_deflateSetDictionary@12
EXTRN	_memcpy:PROC
EXTRN	_adler32@12:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_hash_head$ = -16					; size = 4
_n$ = -12						; size = 4
_length$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 320  :     deflate_state *s;
; 321  :     uInt length = dictLength;

	mov	eax, DWORD PTR _dictLength$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 322  :     uInt n;
; 323  :     IPos hash_head = 0;

	mov	DWORD PTR _hash_head$[ebp], 0

; 324  : 
; 325  :     if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
; 326  :         strm->state->wrap == 2 ||
; 327  :         (strm->state->wrap == 1 && strm->state->status != INIT_STATE))

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN8@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN8@deflateSet
	cmp	DWORD PTR _dictionary$[ebp], 0
	je	SHORT $LN8@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	je	SHORT $LN8@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 1
	jne	SHORT $LN9@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+4], 42			; 0000002aH
	je	SHORT $LN9@deflateSet
$LN8@deflateSet:

; 328  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN10@deflateSet
$LN9@deflateSet:

; 329  : 
; 330  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 331  :     if (s->wrap)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN7@deflateSet

; 332  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

	mov	eax, DWORD PTR _dictLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_adler32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN7@deflateSet:

; 333  : 
; 334  :     if (length < MIN_MATCH) return Z_OK;

	cmp	DWORD PTR _length$[ebp], 3
	jae	SHORT $LN6@deflateSet
	xor	eax, eax
	jmp	$LN10@deflateSet
$LN6@deflateSet:

; 335  :     if (length > MAX_DIST(s)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	DWORD PTR _length$[ebp], ecx
	jbe	SHORT $LN5@deflateSet

; 336  :         length = MAX_DIST(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	mov	DWORD PTR _length$[ebp], ecx

; 337  :         dictionary += dictLength - length; /* use the tail of the dictionary */

	mov	eax, DWORD PTR _dictLength$[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR _dictionary$[ebp], eax
$LN5@deflateSet:

; 338  :     }
; 339  :     zmemcpy(s->window, dictionary, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 340  :     s->strstart = length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 341  :     s->block_start = (long)length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+92], ecx

; 342  : 
; 343  :     /* Insert all strings in the hash table (except for the last two bytes).
; 344  :      * s->lookahead stays null, so s->ins_h will be recomputed at the next
; 345  :      * call of fill_window.
; 346  :      */
; 347  :     s->ins_h = s->window[0];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], edx

; 348  :     UPDATE_HASH(s, s->ins_h, s->window[1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	eax, BYTE PTR [ecx+1]
	xor	edx, eax
	mov	ecx, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], edx

; 349  :     for (n = 0; n <= length - MIN_MATCH; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@deflateSet
$LN3@deflateSet:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@deflateSet:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 3
	cmp	DWORD PTR _n$[ebp], eax
	ja	SHORT $LN2@deflateSet

; 350  :         INSERT_STRING(s, n, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	and	esi, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx+esi*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	and	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+64]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _hash_head$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	cx, WORD PTR _n$[ebp]
	mov	WORD PTR [edx+eax*2], cx

; 351  :     }

	jmp	$LN3@deflateSet
$LN2@deflateSet:

; 352  :     if (hash_head) hash_head = 0;  /* to make compiler happy */

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN1@deflateSet
	mov	DWORD PTR _hash_head$[ebp], 0
$LN1@deflateSet:

; 353  :     return Z_OK;

	xor	eax, eax
$LN10@deflateSet:

; 354  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
EXTRN	__tr_init:PROC
EXTRN	_crc32@12:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
tv131 = -72						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 360  :     deflate_state *s;
; 361  : 
; 362  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 363  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN3@deflateRes
$LN2@deflateRes:

; 364  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN4@deflateRes
$LN3@deflateRes:

; 365  :     }
; 366  : 
; 367  :     strm->total_in = strm->total_out = 0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 368  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 369  :     strm->data_type = Z_UNKNOWN;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+44], 2

; 370  : 
; 371  :     s = (deflate_state *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 372  :     s->pending = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], 0

; 373  :     s->pending_out = s->pending_buf;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx

; 374  : 
; 375  :     if (s->wrap < 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jge	SHORT $LN1@deflateRes

; 376  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN1@deflateRes:

; 377  :     }
; 378  :     s->status = s->wrap ? INIT_STATE : BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -71				; ffffffb9H
	add	ecx, 113				; 00000071H
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 379  :     strm->adler =
; 380  : #ifdef GZIP
; 381  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 382  : #endif
; 383  :         adler32(0L, Z_NULL, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	SHORT $LN6@deflateRes
	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN7@deflateRes
$LN6@deflateRes:
	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv131[ebp], eax
$LN7@deflateRes:
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR [ecx+48], edx

; 384  :     s->last_flush = Z_NO_FLUSH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], 0

; 385  : 
; 386  :     _tr_init(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_init
	add	esp, 4

; 387  :     lm_init(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_lm_init
	add	esp, 4

; 388  : 
; 389  :     return Z_OK;

	xor	eax, eax
$LN4@deflateRes:

; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_deflateReset@4 ENDP
_TEXT	ENDS
PUBLIC	_deflateSetHeader@8
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 397  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@deflateSet@2
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@deflateSet@2
$LN2@deflateSet@2:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@deflateSet@2
$LN3@deflateSet@2:

; 398  :     if (strm->state->wrap != 2) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	je	SHORT $LN1@deflateSet@2
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@deflateSet@2
$LN1@deflateSet@2:

; 399  :     strm->state->gzhead = head;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 400  :     return Z_OK;

	xor	eax, eax
$LN4@deflateSet@2:

; 401  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
PUBLIC	_deflatePrime@12
; Function compile flags: /Odtp /ZI
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 408  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 409  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@deflatePri
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflatePri
$LN1@deflatePri:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@deflatePri
$LN2@deflatePri:

; 410  :     strm->state->bi_valid = bits;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [ecx+5820], edx

; 411  :     strm->state->bi_buf = (ush)(value & ((1 << bits) - 1));

	mov	eax, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	WORD PTR [edx+5816], ax

; 412  :     return Z_OK;

	xor	eax, eax
$LN3@deflatePri:

; 413  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
PUBLIC	_deflate@8
PUBLIC	_deflateParams@12
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_err$ = -12						; size = 4
_func$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 421  :     deflate_state *s;
; 422  :     compress_func func;
; 423  :     int err = Z_OK;

	mov	DWORD PTR _err$[ebp], 0

; 424  : 
; 425  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN6@deflatePar
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@deflatePar
$LN6@deflatePar:
	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflatePar
$LN7@deflatePar:

; 426  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 427  : 
; 428  : #ifdef FASTEST
; 429  :     if (level != 0) level = 1;
; 430  : #else
; 431  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN5@deflatePar
	mov	DWORD PTR _level$[ebp], 6
$LN5@deflatePar:

; 432  : #endif
; 433  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN3@deflatePar
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN3@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN3@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN4@deflatePar
$LN3@deflatePar:

; 434  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflatePar
$LN4@deflatePar:

; 435  :     }
; 436  :     func = configuration_table[s->level].func;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	mov	DWORD PTR _func$[ebp], edx

; 437  : 
; 438  :     if (func != configuration_table[level].func && strm->total_in != 0) {

	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _func$[ebp]
	cmp	ecx, DWORD PTR _configuration_table[eax+8]
	je	SHORT $LN2@deflatePar
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@deflatePar

; 439  :         /* Flush the last buffer: */
; 440  :         err = deflate(strm, Z_PARTIAL_FLUSH);

	push	1
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflate@8
	mov	DWORD PTR _err$[ebp], eax
$LN2@deflatePar:

; 441  :     }
; 442  :     if (s->level != level) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _level$[ebp]
	je	SHORT $LN1@deflatePar

; 443  :         s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 444  :         s->max_lazy_match   = configuration_table[level].max_lazy;

	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 12					; 0000000cH
	movzx	ecx, WORD PTR _configuration_table[eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+128], ecx

; 445  :         s->good_match       = configuration_table[level].good_length;

	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 12					; 0000000cH
	movzx	ecx, WORD PTR _configuration_table[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+140], ecx

; 446  :         s->nice_match       = configuration_table[level].nice_length;

	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 12					; 0000000cH
	movzx	ecx, WORD PTR _configuration_table[eax+4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+144], ecx

; 447  :         s->max_chain_length = configuration_table[level].max_chain;

	mov	eax, DWORD PTR _level$[ebp]
	imul	eax, 12					; 0000000cH
	movzx	ecx, WORD PTR _configuration_table[eax+6]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+124], ecx
$LN1@deflatePar:

; 448  :     }
; 449  :     s->strategy = strategy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [eax+136], ecx

; 450  :     return err;

	mov	eax, DWORD PTR _err$[ebp]
$LN8@deflatePar:

; 451  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
PUBLIC	_deflateTune@20
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 461  :     deflate_state *s;
; 462  : 
; 463  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@deflateTun
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflateTun
$LN1@deflateTun:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@deflateTun
$LN2@deflateTun:

; 464  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 465  :     s->good_match = good_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _good_length$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 466  :     s->max_lazy_match = max_lazy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_lazy$[ebp]
	mov	DWORD PTR [eax+128], ecx

; 467  :     s->nice_match = nice_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _nice_length$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 468  :     s->max_chain_length = max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_chain$[ebp]
	mov	DWORD PTR [eax+124], ecx

; 469  :     return Z_OK;

	xor	eax, eax
$LN3@deflateTun:

; 470  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
PUBLIC	_deflateBound@8
EXTRN	_compressBound@4:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_destLen$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 493  :     deflate_state *s;
; 494  :     uLong destLen;
; 495  : 
; 496  :     /* conservative upper bound */
; 497  :     destLen = sourceLen +
; 498  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 11;

	mov	eax, DWORD PTR _sourceLen$[ebp]
	add	eax, 7
	shr	eax, 3
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	add	ecx, 63					; 0000003fH
	shr	ecx, 6
	lea	edx, DWORD PTR [eax+ecx+11]
	mov	DWORD PTR _destLen$[ebp], edx

; 499  : 
; 500  :     /* if can't get parameters, return conservative bound */
; 501  :     if (strm == Z_NULL || strm->state == Z_NULL)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateBou
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@deflateBou
$LN3@deflateBou:

; 502  :         return destLen;

	mov	eax, DWORD PTR _destLen$[ebp]
	jmp	SHORT $LN5@deflateBou
$LN4@deflateBou:

; 503  : 
; 504  :     /* if not default parameters, return conservative bound */
; 505  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 506  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+48], 15			; 0000000fH
	jne	SHORT $LN1@deflateBou
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+80], 15			; 0000000fH
	je	SHORT $LN2@deflateBou
$LN1@deflateBou:

; 507  :         return destLen;

	mov	eax, DWORD PTR _destLen$[ebp]
	jmp	SHORT $LN5@deflateBou
$LN2@deflateBou:

; 508  : 
; 509  :     /* default settings: return tight bound for that case */
; 510  :     return compressBound(sourceLen);

	mov	eax, DWORD PTR _sourceLen$[ebp]
	push	eax
	call	_compressBound@4
$LN5@deflateBou:

; 511  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflateBound@8 ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
EXTRN	__tr_stored_block:PROC
EXTRN	__tr_align:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflate@8
_TEXT	SEGMENT
tv285 = -112						; size = 4
tv189 = -112						; size = 4
tv286 = -108						; size = 4
tv190 = -108						; size = 4
_bstate$77847 = -40					; size = 4
_val$77821 = -36					; size = 4
_beg$77820 = -32					; size = 4
_val$77807 = -28					; size = 4
_beg$77806 = -24					; size = 4
_beg$77793 = -20					; size = 4
_level_flags$77778 = -16				; size = 4
_header$77777 = -12					; size = 4
_s$ = -8						; size = 4
_old_flush$ = -4					; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 555  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi

; 556  :     int old_flush; /* value of flush param for previous deflate call */
; 557  :     deflate_state *s;
; 558  : 
; 559  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 560  :         flush > Z_FINISH || flush < 0) {

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN80@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN80@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	jg	SHORT $LN80@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	jge	SHORT $LN81@deflate
$LN80@deflate:

; 561  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN82@deflate
$LN81@deflate:

; 562  :     }
; 563  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 564  : 
; 565  :     if (strm->next_out == Z_NULL ||
; 566  :         (strm->next_in == Z_NULL && strm->avail_in != 0) ||
; 567  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN78@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN77@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN78@deflate
$LN77@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN79@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN79@deflate
$LN78@deflate:

; 568  :         ERR_RETURN(strm, Z_STREAM_ERROR);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _z_errmsg+16
	mov	DWORD PTR [eax+24], ecx
	mov	eax, -2					; fffffffeH
	jmp	$LN82@deflate
$LN79@deflate:

; 569  :     }
; 570  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN76@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _z_errmsg+28
	mov	DWORD PTR [eax+24], ecx
	mov	eax, -5					; fffffffbH
	jmp	$LN82@deflate
$LN76@deflate:

; 571  : 
; 572  :     s->strm = strm; /* just in case */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax], ecx

; 573  :     old_flush = s->last_flush;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _old_flush$[ebp], ecx

; 574  :     s->last_flush = flush;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _flush$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 575  : 
; 576  :     /* Write the header */
; 577  :     if (s->status == INIT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	jne	$LN75@deflate

; 578  : #ifdef GZIP
; 579  :         if (s->wrap == 2) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	$LN74@deflate

; 580  :             strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 581  :             put_byte(s, 31);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 31			; 0000001fH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 582  :             put_byte(s, 139);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 139			; 0000008bH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 583  :             put_byte(s, 8);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 584  :             if (s->gzhead == NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN73@deflate

; 585  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 586  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 587  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 588  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 589  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 590  :                 put_byte(s, s->level == 9 ? 2 :
; 591  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 592  :                              4 : 0));

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN86@deflate
	mov	DWORD PTR tv190[ebp], 2
	jmp	SHORT $LN87@deflate
$LN86@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN84@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN84@deflate
	mov	DWORD PTR tv189[ebp], 0
	jmp	SHORT $LN85@deflate
$LN84@deflate:
	mov	DWORD PTR tv189[ebp], 4
$LN85@deflate:
	mov	eax, DWORD PTR tv189[ebp]
	mov	DWORD PTR tv190[ebp], eax
$LN87@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	al, BYTE PTR tv190[ebp]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 593  :                 put_byte(s, OS_CODE);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	BYTE PTR [ecx+eax], 11			; 0000000bH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 594  :                 s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H

; 595  :             }
; 596  :             else {

	jmp	$LN72@deflate
$LN73@deflate:

; 597  :                 put_byte(s, (s->gzhead->text ? 1 : 0) +
; 598  :                             (s->gzhead->hcrc ? 2 : 0) +
; 599  :                             (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 600  :                             (s->gzhead->name == Z_NULL ? 0 : 8) +
; 601  :                             (s->gzhead->comment == Z_NULL ? 0 : 16)
; 602  :                         );

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	xor	edx, edx
	cmp	DWORD PTR [ecx], 0
	setne	dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+44]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	edx, eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR [eax+16]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 4
	add	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+28]
	neg	eax
	sbb	eax, eax
	and	eax, 8
	add	edx, eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR [eax+36]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 16					; 00000010H
	add	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 603  :                 put_byte(s, (Byte)(s->gzhead->time & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 604  :                 put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 605  :                 put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 606  :                 put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 607  :                 put_byte(s, s->level == 9 ? 2 :
; 608  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 609  :                              4 : 0));

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN90@deflate
	mov	DWORD PTR tv286[ebp], 2
	jmp	SHORT $LN91@deflate
$LN90@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN88@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN88@deflate
	mov	DWORD PTR tv285[ebp], 0
	jmp	SHORT $LN89@deflate
$LN88@deflate:
	mov	DWORD PTR tv285[ebp], 4
$LN89@deflate:
	mov	eax, DWORD PTR tv285[ebp]
	mov	DWORD PTR tv286[ebp], eax
$LN91@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	al, BYTE PTR tv286[ebp]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 610  :                 put_byte(s, s->gzhead->os & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 611  :                 if (s->gzhead->extra != NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN71@deflate

; 612  :                     put_byte(s, s->gzhead->extra_len & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 613  :                     put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN71@deflate:

; 614  :                 }
; 615  :                 if (s->gzhead->hcrc)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN70@deflate

; 616  :                     strm->adler = crc32(strm->adler, s->pending_buf,
; 617  :                                         s->pending);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN70@deflate:

; 618  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 619  :                 s->status = EXTRA_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 69			; 00000045H
$LN72@deflate:

; 620  :             }
; 621  :         }
; 622  :         else

	jmp	$LN75@deflate
$LN74@deflate:

; 623  : #endif
; 624  :         {
; 625  :             uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 8
	shl	ecx, 4
	add	ecx, 8
	shl	ecx, 8
	mov	DWORD PTR _header$77777[ebp], ecx

; 626  :             uInt level_flags;
; 627  : 
; 628  :             if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN67@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 2
	jge	SHORT $LN68@deflate
$LN67@deflate:

; 629  :                 level_flags = 0;

	mov	DWORD PTR _level_flags$77778[ebp], 0
	jmp	SHORT $LN66@deflate
$LN68@deflate:

; 630  :             else if (s->level < 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jge	SHORT $LN65@deflate

; 631  :                 level_flags = 1;

	mov	DWORD PTR _level_flags$77778[ebp], 1
	jmp	SHORT $LN66@deflate
$LN65@deflate:

; 632  :             else if (s->level == 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jne	SHORT $LN63@deflate

; 633  :                 level_flags = 2;

	mov	DWORD PTR _level_flags$77778[ebp], 2

; 634  :             else

	jmp	SHORT $LN66@deflate
$LN63@deflate:

; 635  :                 level_flags = 3;

	mov	DWORD PTR _level_flags$77778[ebp], 3
$LN66@deflate:

; 636  :             header |= (level_flags << 6);

	mov	eax, DWORD PTR _level_flags$77778[ebp]
	shl	eax, 6
	or	eax, DWORD PTR _header$77777[ebp]
	mov	DWORD PTR _header$77777[ebp], eax

; 637  :             if (s->strstart != 0) header |= PRESET_DICT;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN61@deflate
	mov	eax, DWORD PTR _header$77777[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _header$77777[ebp], eax
$LN61@deflate:

; 638  :             header += 31 - (header % 31);

	mov	eax, DWORD PTR _header$77777[ebp]
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	eax, 31					; 0000001fH
	sub	eax, edx
	add	eax, DWORD PTR _header$77777[ebp]
	mov	DWORD PTR _header$77777[ebp], eax

; 639  : 
; 640  :             s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H

; 641  :             putShortMSB(s, header);

	mov	eax, DWORD PTR _header$77777[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_putShortMSB
	add	esp, 8

; 642  : 
; 643  :             /* Save the adler32 of the preset dictionary: */
; 644  :             if (s->strstart != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN60@deflate

; 645  :                 putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 646  :                 putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8
$LN60@deflate:

; 647  :             }
; 648  :             strm->adler = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN75@deflate:

; 649  :         }
; 650  :     }
; 651  : #ifdef GZIP
; 652  :     if (s->status == EXTRA_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 69			; 00000045H
	jne	$LN59@deflate

; 653  :         if (s->gzhead->extra != NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	$LN58@deflate

; 654  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$77793[ebp], ecx
$LN57@deflate:

; 655  : 
; 656  :             while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+32], edx
	jae	$LN56@deflate

; 657  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN55@deflate

; 658  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN54@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$77793[ebp]
	jbe	SHORT $LN54@deflate

; 659  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 660  :                                             s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$77793[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$77793[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN54@deflate:

; 661  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 662  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$77793[ebp], ecx

; 663  :                     if (s->pending == s->pending_buf_size)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN55@deflate

; 664  :                         break;

	jmp	SHORT $LN56@deflate
$LN55@deflate:

; 665  :                 }
; 666  :                 put_byte(s, s->gzhead->extra[s->gzindex]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+20]
	mov	cl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [eax+esi], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 667  :                 s->gzindex++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 668  :             }

	jmp	$LN57@deflate
$LN56@deflate:

; 669  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN52@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$77793[ebp]
	jbe	SHORT $LN52@deflate

; 670  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 671  :                                     s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$77793[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$77793[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN52@deflate:

; 672  :             if (s->gzindex == s->gzhead->extra_len) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR [ecx+20]
	jne	SHORT $LN51@deflate

; 673  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 674  :                 s->status = NAME_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 73			; 00000049H
$LN51@deflate:

; 675  :             }
; 676  :         }
; 677  :         else

	jmp	SHORT $LN59@deflate
$LN58@deflate:

; 678  :             s->status = NAME_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 73			; 00000049H
$LN59@deflate:

; 679  :     }
; 680  :     if (s->status == NAME_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	jne	$LN49@deflate

; 681  :         if (s->gzhead->name != NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+28], 0
	je	$LN48@deflate

; 682  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$77806[ebp], ecx
$LN47@deflate:

; 683  :             int val;
; 684  : 
; 685  :             do {
; 686  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN44@deflate

; 687  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN43@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$77806[ebp]
	jbe	SHORT $LN43@deflate

; 688  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 689  :                                             s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$77806[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$77806[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN43@deflate:

; 690  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 691  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$77806[ebp], ecx

; 692  :                     if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN44@deflate

; 693  :                         val = 1;

	mov	DWORD PTR _val$77807[ebp], 1

; 694  :                         break;

	jmp	SHORT $LN45@deflate
$LN44@deflate:

; 695  :                     }
; 696  :                 }
; 697  :                 val = s->gzhead->name[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movzx	edx, BYTE PTR [edx+ecx]
	mov	DWORD PTR _val$77807[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 698  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	dl, BYTE PTR _val$77807[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 699  :             } while (val != 0);

	cmp	DWORD PTR _val$77807[ebp], 0
	jne	$LN47@deflate
$LN45@deflate:

; 700  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN41@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$77806[ebp]
	jbe	SHORT $LN41@deflate

; 701  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 702  :                                     s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$77806[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$77806[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN41@deflate:

; 703  :             if (val == 0) {

	cmp	DWORD PTR _val$77807[ebp], 0
	jne	SHORT $LN40@deflate

; 704  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 705  :                 s->status = COMMENT_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 91			; 0000005bH
$LN40@deflate:

; 706  :             }
; 707  :         }
; 708  :         else

	jmp	SHORT $LN49@deflate
$LN48@deflate:

; 709  :             s->status = COMMENT_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 91			; 0000005bH
$LN49@deflate:

; 710  :     }
; 711  :     if (s->status == COMMENT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 91			; 0000005bH
	jne	$LN38@deflate

; 712  :         if (s->gzhead->comment != NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN37@deflate

; 713  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$77820[ebp], ecx
$LN36@deflate:

; 714  :             int val;
; 715  : 
; 716  :             do {
; 717  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN33@deflate

; 718  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN32@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$77820[ebp]
	jbe	SHORT $LN32@deflate

; 719  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 720  :                                             s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$77820[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$77820[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN32@deflate:

; 721  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 722  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$77820[ebp], ecx

; 723  :                     if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN33@deflate

; 724  :                         val = 1;

	mov	DWORD PTR _val$77821[ebp], 1

; 725  :                         break;

	jmp	SHORT $LN34@deflate
$LN33@deflate:

; 726  :                     }
; 727  :                 }
; 728  :                 val = s->gzhead->comment[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movzx	edx, BYTE PTR [edx+ecx]
	mov	DWORD PTR _val$77821[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 729  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	dl, BYTE PTR _val$77821[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 730  :             } while (val != 0);

	cmp	DWORD PTR _val$77821[ebp], 0
	jne	$LN36@deflate
$LN34@deflate:

; 731  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN30@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$77820[ebp]
	jbe	SHORT $LN30@deflate

; 732  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 733  :                                     s->pending - beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$77820[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$77820[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN30@deflate:

; 734  :             if (val == 0)

	cmp	DWORD PTR _val$77821[ebp], 0
	jne	SHORT $LN29@deflate

; 735  :                 s->status = HCRC_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 103			; 00000067H
$LN29@deflate:

; 736  :         }
; 737  :         else

	jmp	SHORT $LN38@deflate
$LN37@deflate:

; 738  :             s->status = HCRC_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 103			; 00000067H
$LN38@deflate:

; 739  :     }
; 740  :     if (s->status == HCRC_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 103			; 00000067H
	jne	$LN27@deflate

; 741  :         if (s->gzhead->hcrc) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	$LN26@deflate

; 742  :             if (s->pending + 2 > s->pending_buf_size)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN25@deflate

; 743  :                 flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4
$LN25@deflate:

; 744  :             if (s->pending + 2 <= s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	ja	SHORT $LN24@deflate

; 745  :                 put_byte(s, (Byte)(strm->adler & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 746  :                 put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 747  :                 strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 748  :                 s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H
$LN24@deflate:

; 749  :             }
; 750  :         }
; 751  :         else

	jmp	SHORT $LN27@deflate
$LN26@deflate:

; 752  :             s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H
$LN27@deflate:

; 753  :     }
; 754  : #endif
; 755  : 
; 756  :     /* Flush as much pending output as possible */
; 757  :     if (s->pending != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN22@deflate

; 758  :         flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 759  :         if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN21@deflate

; 760  :             /* Since avail_out is 0, deflate will be called again with
; 761  :              * more output space, but possibly with both pending and
; 762  :              * avail_in equal to zero. There won't be anything to do,
; 763  :              * but this is not an error situation so make sure we
; 764  :              * return OK instead of BUF_ERROR at next call of deflate:
; 765  :              */
; 766  :             s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 767  :             return Z_OK;

	xor	eax, eax
	jmp	$LN82@deflate
$LN21@deflate:

; 768  :         }
; 769  : 
; 770  :     /* Make sure there is something to do and avoid duplicate consecutive
; 771  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 772  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 773  :      */
; 774  :     } else if (strm->avail_in == 0 && flush <= old_flush &&

	jmp	SHORT $LN20@deflate
$LN22@deflate:

; 775  :                flush != Z_FINISH) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN20@deflate
	mov	eax, DWORD PTR _flush$[ebp]
	cmp	eax, DWORD PTR _old_flush$[ebp]
	jg	SHORT $LN20@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN20@deflate

; 776  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _z_errmsg+28
	mov	DWORD PTR [eax+24], ecx
	mov	eax, -5					; fffffffbH
	jmp	$LN82@deflate
$LN20@deflate:

; 777  :     }
; 778  : 
; 779  :     /* User must not provide more input after the first FINISH: */
; 780  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN18@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN18@deflate

; 781  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _z_errmsg+28
	mov	DWORD PTR [eax+24], ecx
	mov	eax, -5					; fffffffbH
	jmp	$LN82@deflate
$LN18@deflate:

; 782  :     }
; 783  : 
; 784  :     /* Start a new block or continue the current one.
; 785  :      */
; 786  :     if (strm->avail_in != 0 || s->lookahead != 0 ||
; 787  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN16@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN16@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN17@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	je	$LN17@deflate
$LN16@deflate:

; 788  :         block_state bstate;
; 789  : 
; 790  :         bstate = (*(configuration_table[s->level].func))(s, flush);

	mov	eax, DWORD PTR _flush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+132]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _configuration_table[eax+8]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _bstate$77847[ebp], eax

; 791  : 
; 792  :         if (bstate == finish_started || bstate == finish_done) {

	cmp	DWORD PTR _bstate$77847[ebp], 2
	je	SHORT $LN14@deflate
	cmp	DWORD PTR _bstate$77847[ebp], 3
	jne	SHORT $LN15@deflate
$LN14@deflate:

; 793  :             s->status = FINISH_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 666			; 0000029aH
$LN15@deflate:

; 794  :         }
; 795  :         if (bstate == need_more || bstate == finish_started) {

	cmp	DWORD PTR _bstate$77847[ebp], 0
	je	SHORT $LN12@deflate
	cmp	DWORD PTR _bstate$77847[ebp], 2
	jne	SHORT $LN13@deflate
$LN12@deflate:

; 796  :             if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN11@deflate

; 797  :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1
$LN11@deflate:

; 798  :             }
; 799  :             return Z_OK;

	xor	eax, eax
	jmp	$LN82@deflate
$LN13@deflate:

; 800  :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 801  :              * of deflate should use the same flush parameter to make sure
; 802  :              * that the flush is complete. So we don't have to output an
; 803  :              * empty block here, this will be done at next call. This also
; 804  :              * ensures that for a very small output buffer, we emit at most
; 805  :              * one empty block.
; 806  :              */
; 807  :         }
; 808  :         if (bstate == block_done) {

	cmp	DWORD PTR _bstate$77847[ebp], 1
	jne	$LN17@deflate

; 809  :             if (flush == Z_PARTIAL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 1
	jne	SHORT $LN9@deflate

; 810  :                 _tr_align(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_align
	add	esp, 4

; 811  :             } else { /* FULL_FLUSH or SYNC_FLUSH */

	jmp	SHORT $LN8@deflate
$LN9@deflate:

; 812  :                 _tr_stored_block(s, (char*)0, 0L, 0);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 813  :                 /* For a full flush, this empty block will be recognized
; 814  :                  * as a special marker by inflate_sync().
; 815  :                  */
; 816  :                 if (flush == Z_FULL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 3
	jne	SHORT $LN8@deflate

; 817  :                     CLEAR_HASH(s);             /* forget history */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN8@deflate:

; 818  :                 }
; 819  :             }
; 820  :             flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 821  :             if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN17@deflate

; 822  :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 823  :               return Z_OK;

	xor	eax, eax
	jmp	$LN82@deflate
$LN17@deflate:

; 824  :             }
; 825  :         }
; 826  :     }
; 827  :     Assert(strm->avail_out > 0, "bug2");
; 828  : 
; 829  :     if (flush != Z_FINISH) return Z_OK;

	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN5@deflate
	xor	eax, eax
	jmp	$LN82@deflate
$LN5@deflate:

; 830  :     if (s->wrap <= 0) return Z_STREAM_END;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jg	SHORT $LN4@deflate
	mov	eax, 1
	jmp	$LN82@deflate
$LN4@deflate:

; 831  : 
; 832  :     /* Write the trailer */
; 833  : #ifdef GZIP
; 834  :     if (s->wrap == 2) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	$LN3@deflate

; 835  :         put_byte(s, (Byte)(strm->adler & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 836  :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 837  :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 838  :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 839  :         put_byte(s, (Byte)(strm->total_in & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 840  :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 841  :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 842  :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [eax+edx], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 843  :     }
; 844  :     else

	jmp	SHORT $LN2@deflate
$LN3@deflate:

; 845  : #endif
; 846  :     {
; 847  :         putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 848  :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8
$LN2@deflate:

; 849  :     }
; 850  :     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 851  :     /* If avail_out is zero, the application will call deflate again
; 852  :      * to flush the rest.
; 853  :      */
; 854  :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $LN1@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN1@deflate:

; 855  :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

	mov	eax, DWORD PTR _s$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+20], 0
	sete	cl
	mov	eax, ecx
$LN82@deflate:

; 856  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflate@8 ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC					; COMDAT

; 521  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 522  :     put_byte(s, (Byte)(b >> 8));

	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	BYTE PTR [edx+ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 523  :     put_byte(s, (Byte)(b & 0xff));

	mov	eax, DWORD PTR _b$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	BYTE PTR [edx+ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 524  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_putShortMSB ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _flush_pending
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC					; COMDAT

; 534  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 535  :     unsigned len = strm->state->pending;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _len$[ebp], edx

; 536  : 
; 537  :     if (len > strm->avail_out) len = strm->avail_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jbe	SHORT $LN3@flush_pend
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _len$[ebp], ecx
$LN3@flush_pend:

; 538  :     if (len == 0) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@flush_pend
	jmp	$LN4@flush_pend
$LN2@flush_pend:

; 539  : 
; 540  :     zmemcpy(strm->next_out, strm->state->pending_out, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 541  :     strm->next_out  += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 542  :     strm->state->pending_out  += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+16], edx

; 543  :     strm->total_out += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 544  :     strm->avail_out  -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 545  :     strm->state->pending -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+20], edx

; 546  :     if (strm->state->pending == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@flush_pend

; 547  :         strm->state->pending_out = strm->state->pending_buf;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], ecx
$LN4@flush_pend:

; 548  :     }
; 549  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_flush_pending ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_status$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 861  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 862  :     int status;
; 863  : 
; 864  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN6@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@deflateEnd
$LN6@deflateEnd:
	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflateEnd
$LN7@deflateEnd:

; 865  : 
; 866  :     status = strm->state->status;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _status$[ebp], edx

; 867  :     if (status != INIT_STATE &&
; 868  :         status != EXTRA_STATE &&
; 869  :         status != NAME_STATE &&
; 870  :         status != COMMENT_STATE &&
; 871  :         status != HCRC_STATE &&
; 872  :         status != BUSY_STATE &&
; 873  :         status != FINISH_STATE) {

	cmp	DWORD PTR _status$[ebp], 42		; 0000002aH
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 69		; 00000045H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 73		; 00000049H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 91		; 0000005bH
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 103		; 00000067H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	je	SHORT $LN5@deflateEnd
	cmp	DWORD PTR _status$[ebp], 666		; 0000029aH
	je	SHORT $LN5@deflateEnd

; 874  :       return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN8@deflateEnd
$LN5@deflateEnd:

; 875  :     }
; 876  : 
; 877  :     /* Deallocate in reverse order of allocations: */
; 878  :     TRY_FREE(strm, strm->state->pending_buf);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN4@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN4@deflateEnd:

; 879  :     TRY_FREE(strm, strm->state->head);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN3@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN3@deflateEnd:

; 880  :     TRY_FREE(strm, strm->state->prev);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN2@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN2@deflateEnd:

; 881  :     TRY_FREE(strm, strm->state->window);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN1@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN1@deflateEnd:

; 882  : 
; 883  :     ZFREE(strm, strm->state);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8

; 884  :     strm->state = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+28], 0

; 885  : 
; 886  :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

	xor	eax, eax
	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	setne	al
	sub	eax, 1
	and	eax, -3					; fffffffdH
$LN8@deflateEnd:

; 887  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_deflateEnd@4 ENDP
_TEXT	ENDS
PUBLIC	_deflateCopy@8
; Function compile flags: /Odtp /ZI
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_ss$ = -8						; size = 4
_ds$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 897  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 898  : #ifdef MAXSEG_64K
; 899  :     return Z_STREAM_ERROR;
; 900  : #else
; 901  :     deflate_state *ds;
; 902  :     deflate_state *ss;
; 903  :     ushf *overlay;
; 904  : 
; 905  : 
; 906  :     if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {

	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN4@deflateCop
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN4@deflateCop
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@deflateCop
$LN4@deflateCop:

; 907  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN6@deflateCop
$LN5@deflateCop:

; 908  :     }
; 909  : 
; 910  :     ss = source->state;

	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _ss$[ebp], ecx

; 911  : 
; 912  :     zmemcpy(dest, source, sizeof(z_stream));

	push	56					; 00000038H
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 913  : 
; 914  :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

	push	5824					; 000016c0H
	push	1
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ds$[ebp], eax

; 915  :     if (ds == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _ds$[ebp], 0
	jne	SHORT $LN3@deflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN6@deflateCop
$LN3@deflateCop:

; 916  :     dest->state = (struct internal_state FAR *) ds;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 917  :     zmemcpy(ds, ss, sizeof(deflate_state));

	push	5824					; 000016c0H
	mov	eax, DWORD PTR _ss$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 918  :     ds->strm = dest;

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax], ecx

; 919  : 
; 920  :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 921  :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 922  :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 923  :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 924  :     ds->pending_buf = (uchf *) overlay;

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 925  : 
; 926  :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
; 927  :         ds->pending_buf == Z_NULL) {

	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN1@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN1@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@deflateCop
$LN1@deflateCop:

; 928  :         deflateEnd (dest);

	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_deflateEnd@4

; 929  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN6@deflateCop
$LN2@deflateCop:

; 930  :     }
; 931  :     /* following zmemcpy do not work for 16-bit MSDOS */
; 932  :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 933  :     zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 934  :     zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 935  :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 936  : 
; 937  :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

	mov	eax, DWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 938  :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shr	ecx, 1
	mov	edx, DWORD PTR _overlay$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+5796], eax

; 939  :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	imul	ecx, 3
	mov	edx, DWORD PTR _ds$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+5784], ecx

; 940  : 
; 941  :     ds->l_desc.dyn_tree = ds->dyn_ltree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 148				; 00000094H
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2840], eax

; 942  :     ds->d_desc.dyn_tree = ds->dyn_dtree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2440				; 00000988H
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2852], eax

; 943  :     ds->bl_desc.dyn_tree = ds->bl_tree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2684				; 00000a7cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2864], eax

; 944  : 
; 945  :     return Z_OK;

	xor	eax, eax
$LN6@deflateCop:

; 946  : #endif /* MAXSEG_64K */
; 947  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflateCopy@8 ENDP
_TEXT	ENDS
EXTRN	_match_init:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _lm_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC						; COMDAT

; 988  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 989  :     s->window_size = (ulg)2L*s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 990  : 
; 991  :     CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 992  : 
; 993  :     /* Set the default configuration parameters:
; 994  :      */
; 995  :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	imul	ecx, 12					; 0000000cH
	movzx	edx, WORD PTR _configuration_table[ecx+2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+128], edx

; 996  :     s->good_match       = configuration_table[s->level].good_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	imul	ecx, 12					; 0000000cH
	movzx	edx, WORD PTR _configuration_table[ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+140], edx

; 997  :     s->nice_match       = configuration_table[s->level].nice_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	imul	ecx, 12					; 0000000cH
	movzx	edx, WORD PTR _configuration_table[ecx+4]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+144], edx

; 998  :     s->max_chain_length = configuration_table[s->level].max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	imul	ecx, 12					; 0000000cH
	movzx	edx, WORD PTR _configuration_table[ecx+6]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+124], edx

; 999  : 
; 1000 :     s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1001 :     s->block_start = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+92], 0

; 1002 :     s->lookahead = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], 0

; 1003 :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+120], 2
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 2

; 1004 :     s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1005 :     s->ins_h = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], 0

; 1006 : #ifndef FASTEST
; 1007 : #ifdef ASMV
; 1008 :     match_init(); /* initialize the asm code */

	call	_match_init

; 1009 : #endif
; 1010 : #endif
; 1011 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_lm_init ENDP
_TEXT	ENDS
EXTRN	__tr_flush_block:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv178 = -76						; size = 4
tv158 = -76						; size = 4
tv134 = -76						; size = 4
_max_start$ = -8					; size = 4
_max_block_size$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1393 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1394 :     /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
; 1395 :      * to pending_buf_size, and each stored block has a 5 byte header:
; 1396 :      */
; 1397 :     ulg max_block_size = 0xffff;

	mov	DWORD PTR _max_block_size$[ebp], 65535	; 0000ffffH

; 1398 :     ulg max_start;
; 1399 : 
; 1400 :     if (max_block_size > s->pending_buf_size - 5) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	cmp	DWORD PTR _max_block_size$[ebp], ecx
	jbe	SHORT $LN11@deflate_st

; 1401 :         max_block_size = s->pending_buf_size - 5;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	mov	DWORD PTR _max_block_size$[ebp], ecx
$LN11@deflate_st:

; 1402 :     }
; 1403 : 
; 1404 :     /* Copy as much as possible from input to output: */
; 1405 :     for (;;) {
; 1406 :         /* Fill the window as much as possible: */
; 1407 :         if (s->lookahead <= 1) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 1
	ja	SHORT $LN9@deflate_st

; 1408 : 
; 1409 :             Assert(s->strstart < s->w_size+MAX_DIST(s) ||
; 1410 :                    s->block_start >= (long)s->w_size, "slide too late");
; 1411 : 
; 1412 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1413 :             if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_st
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN8@deflate_st
	xor	eax, eax
	jmp	$LN13@deflate_st
$LN8@deflate_st:

; 1414 : 
; 1415 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN9@deflate_st
	jmp	$LN10@deflate_st
$LN9@deflate_st:

; 1416 :         }
; 1417 :         Assert(s->block_start >= 0L, "block gone");
; 1418 : 
; 1419 :         s->strstart += s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1420 :         s->lookahead = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], 0

; 1421 : 
; 1422 :         /* Emit a stored block if pending_buf will be full: */
; 1423 :         max_start = s->block_start + max_block_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, DWORD PTR _max_block_size$[ebp]
	mov	DWORD PTR _max_start$[ebp], ecx

; 1424 :         if (s->strstart == 0 || (ulg)s->strstart >= max_start) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN5@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _max_start$[ebp]
	jb	$LN6@deflate_st
$LN5@deflate_st:

; 1425 :             /* strstart == 0 is possible when wraparound on 16-bit machine */
; 1426 :             s->lookahead = (uInt)(s->strstart - max_start);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _max_start$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1427 :             s->strstart = (uInt)max_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_start$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1428 :             FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN15@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN16@deflate_st
$LN15@deflate_st:
	mov	DWORD PTR tv134[ebp], 0
$LN16@deflate_st:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN6@deflate_st
	xor	eax, eax
	jmp	$LN13@deflate_st
$LN6@deflate_st:

; 1429 :         }
; 1430 :         /* Flush if we may have to slide, otherwise block_start may become
; 1431 :          * negative and the data will be gone:
; 1432 :          */
; 1433 :         if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	jb	SHORT $LN3@deflate_st

; 1434 :             FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN17@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv158[ebp], edx
	jmp	SHORT $LN18@deflate_st
$LN17@deflate_st:
	mov	DWORD PTR tv158[ebp], 0
$LN18@deflate_st:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@deflate_st
	xor	eax, eax
	jmp	$LN13@deflate_st
$LN3@deflate_st:

; 1435 :         }
; 1436 :     }

	jmp	$LN11@deflate_st
$LN10@deflate_st:

; 1437 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN19@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv178[ebp], edx
	jmp	SHORT $LN20@deflate_st
$LN19@deflate_st:
	mov	DWORD PTR tv178[ebp], 0
$LN20@deflate_st:
	xor	ecx, ecx
	cmp	DWORD PTR _flush$[ebp], 4
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv178[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN1@deflate_st
	xor	eax, eax
	cmp	DWORD PTR _flush$[ebp], 4
	setne	al
	sub	eax, 1
	and	eax, 2
	jmp	SHORT $LN13@deflate_st
$LN1@deflate_st:

; 1438 :     return flush == Z_FINISH ? finish_done : block_done;

	xor	eax, eax
	cmp	DWORD PTR _flush$[ebp], 4
	sete	al
	lea	eax, DWORD PTR [eax+eax+1]
$LN13@deflate_st:

; 1439 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_stored ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _fill_window
_TEXT	SEGMENT
tv149 = -88						; size = 4
tv138 = -88						; size = 4
_wsize$ = -20						; size = 4
_more$ = -16						; size = 4
_p$ = -12						; size = 4
_m$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC					; COMDAT

; 1268 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1269 :     register unsigned n, m;
; 1270 :     register Posf *p;
; 1271 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1272 :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx
$LN17@fill_windo:

; 1273 : 
; 1274 :     do {
; 1275 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _s$[ebp]
	sub	edx, DWORD PTR [eax+108]
	mov	DWORD PTR _more$[ebp], edx

; 1276 : 
; 1277 :         /* Deal with !@#$% 64K limit: */
; 1278 :         if (sizeof(int) <= 2) {

	xor	eax, eax
	je	SHORT $LN14@fill_windo

; 1279 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

	cmp	DWORD PTR _more$[ebp], 0
	jne	SHORT $LN13@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jne	SHORT $LN13@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN13@fill_windo

; 1280 :                 more = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
	jmp	SHORT $LN14@fill_windo
$LN13@fill_windo:

; 1281 : 
; 1282 :             } else if (more == (unsigned)(-1)) {

	cmp	DWORD PTR _more$[ebp], -1
	jne	SHORT $LN14@fill_windo

; 1283 :                 /* Very unlikely, but possible on 16 bit machine if
; 1284 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1285 :                  */
; 1286 :                 more--;

	mov	eax, DWORD PTR _more$[ebp]
	sub	eax, 1
	mov	DWORD PTR _more$[ebp], eax
$LN14@fill_windo:

; 1287 :             }
; 1288 :         }
; 1289 : 
; 1290 :         /* If the window is almost full and there is insufficient lookahead,
; 1291 :          * move the upper half to the lower one to make room in the upper half.
; 1292 :          */
; 1293 :         if (s->strstart >= wsize+MAX_DIST(s)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _wsize$[ebp]
	lea	eax, DWORD PTR [edx+ecx-262]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], eax
	jb	$LN10@fill_windo

; 1294 : 
; 1295 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize);

	mov	eax, DWORD PTR _wsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _wsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1296 :             s->match_start -= wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 1297 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1298 :             s->block_start -= (long) wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1299 : 
; 1300 :             /* Slide the hash table (could be avoided with 32 bit values
; 1301 :                at the expense of memory usage). We slide even when level == 0
; 1302 :                to keep the hash table consistent if we switch back to level > 0
; 1303 :                later. (Using level 0 permanently is not an optimal usage of
; 1304 :                zlib, so we don't care about this pathological case.)
; 1305 :              */
; 1306 :             /* %%% avoid this when Z_RLE */
; 1307 :             n = s->hash_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _n$[ebp], ecx

; 1308 :             p = &s->head[n];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
$LN9@fill_windo:

; 1309 :             do {
; 1310 :                 m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 1311 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN20@fill_windo
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN21@fill_windo
$LN20@fill_windo:
	mov	DWORD PTR tv138[ebp], 0
$LN21@fill_windo:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv138[ebp]
	mov	WORD PTR [edx], ax

; 1312 :             } while (--n);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN9@fill_windo

; 1313 : 
; 1314 :             n = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 1315 : #ifndef FASTEST
; 1316 :             p = &s->prev[n];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
$LN6@fill_windo:

; 1317 :             do {
; 1318 :                 m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 1319 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN22@fill_windo
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN23@fill_windo
$LN22@fill_windo:
	mov	DWORD PTR tv149[ebp], 0
$LN23@fill_windo:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv149[ebp]
	mov	WORD PTR [edx], ax

; 1320 :                 /* If n is not on any hash chain, prev[n] is garbage but
; 1321 :                  * its value will never be used.
; 1322 :                  */
; 1323 :             } while (--n);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN6@fill_windo

; 1324 : #endif
; 1325 :             more += wsize;

	mov	eax, DWORD PTR _more$[ebp]
	add	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
$LN10@fill_windo:

; 1326 :         }
; 1327 :         if (s->strm->avail_in == 0) return;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@fill_windo
	jmp	$LN18@fill_windo
$LN3@fill_windo:

; 1328 : 
; 1329 :         /* If there was no sliding:
; 1330 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1331 :          *    more == window_size - lookahead - strstart
; 1332 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1333 :          * => more >= window_size - 2*WSIZE + 2
; 1334 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1335 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1336 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1337 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1338 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1339 :          */
; 1340 :         Assert(more >= 2, "more < 2");
; 1341 : 
; 1342 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

	mov	eax, DWORD PTR _more$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx+116]
	push	edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax

; 1343 :         s->lookahead += n;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1344 : 
; 1345 :         /* Initialize the hash value now that we have some input: */
; 1346 :         if (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	SHORT $LN16@fill_windo

; 1347 :             s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1348 :             UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN16@fill_windo:

; 1349 : #if MIN_MATCH != 3
; 1350 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1351 : #endif
; 1352 :         }
; 1353 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1354 :          * but this is not important since only literal bytes will be emitted.
; 1355 :          */
; 1356 : 
; 1357 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN18@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN17@fill_windo
$LN18@fill_windo:

; 1358 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_window ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _read_buf
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC						; COMDAT

; 960  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 961  :     unsigned len = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx

; 962  : 
; 963  :     if (len > size) len = size;

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN5@read_buf
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN5@read_buf:

; 964  :     if (len == 0) return 0;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN4@read_buf
	xor	eax, eax
	jmp	$LN6@read_buf
$LN4@read_buf:

; 965  : 
; 966  :     strm->avail_in  -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 967  : 
; 968  :     if (strm->state->wrap == 1) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 1
	jne	SHORT $LN3@read_buf

; 969  :         strm->adler = adler32(strm->adler, strm->next_in, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
	jmp	SHORT $LN2@read_buf
$LN3@read_buf:

; 970  :     }
; 971  : #ifdef GZIP
; 972  :     else if (strm->state->wrap == 2) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	jne	SHORT $LN2@read_buf

; 973  :         strm->adler = crc32(strm->adler, strm->next_in, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN2@read_buf:

; 974  :     }
; 975  : #endif
; 976  :     zmemcpy(buf, strm->next_in, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 977  :     strm->next_in  += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx], ecx

; 978  :     strm->total_in += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 979  : 
; 980  :     return (int)len;

	mov	eax, DWORD PTR _len$[ebp]
$LN6@read_buf:

; 981  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_read_buf ENDP
_TEXT	ENDS
EXTRN	__dist_code:BYTE
EXTRN	__length_code:BYTE
EXTRN	_longest_match:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv384 = -88						; size = 4
tv364 = -88						; size = 4
tv217 = -88						; size = 4
_cc$78060 = -17						; size = 1
_dist$78052 = -16					; size = 2
_len$78051 = -9						; size = 1
_bflush$ = -8						; size = 4
_hash_head$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1451 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1452 :     IPos hash_head = NIL; /* head of the hash chain */

	mov	DWORD PTR _hash_head$[ebp], 0
$LN20@deflate_fa:

; 1453 :     int bflush;           /* set if current block must be flushed */
; 1454 : 
; 1455 :     for (;;) {
; 1456 :         /* Make sure that we always have enough lookahead, except
; 1457 :          * at the end of the input file. We need MAX_MATCH bytes
; 1458 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1459 :          * string following the next match.
; 1460 :          */
; 1461 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN18@deflate_fa

; 1462 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1463 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN17@deflate_fa
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN17@deflate_fa

; 1464 :                 return need_more;

	xor	eax, eax
	jmp	$LN21@deflate_fa
$LN17@deflate_fa:

; 1465 :             }
; 1466 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN18@deflate_fa
	jmp	$LN19@deflate_fa
$LN18@deflate_fa:

; 1467 :         }
; 1468 : 
; 1469 :         /* Insert the string window[strstart .. strstart+2] in the
; 1470 :          * dictionary, and set hash_head to the head of the hash chain:
; 1471 :          */
; 1472 :         if (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN15@deflate_fa

; 1473 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN15@deflate_fa:

; 1474 :         }
; 1475 : 
; 1476 :         /* Find the longest match, discarding those <= prev_length.
; 1477 :          * At this point we have always match_length < MIN_MATCH
; 1478 :          */
; 1479 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN14@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	SHORT $LN14@deflate_fa

; 1480 :             /* To simplify the code, we prevent matches with the string
; 1481 :              * of window index 0 (in particular we have to avoid a match
; 1482 :              * of the string with itself at the start of the input file).
; 1483 :              */
; 1484 : #ifdef FASTEST
; 1485 :             if ((s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) ||
; 1486 :                 (s->strategy == Z_RLE && s->strstart - hash_head == 1)) {
; 1487 :                 s->match_length = longest_match_fast (s, hash_head);
; 1488 :             }
; 1489 : #else
; 1490 :             if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	je	SHORT $LN13@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 3
	je	SHORT $LN13@deflate_fa

; 1491 :                 s->match_length = longest_match (s, hash_head);

	mov	eax, DWORD PTR _hash_head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_longest_match
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], eax
	jmp	SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1492 :             } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 3
	jne	SHORT $LN14@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN14@deflate_fa

; 1493 :                 s->match_length = longest_match_fast (s, hash_head);

	mov	eax, DWORD PTR _hash_head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_longest_match_fast
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], eax
$LN14@deflate_fa:

; 1494 :             }
; 1495 : #endif
; 1496 :             /* longest_match() or longest_match_fast() sets match_start */
; 1497 :         }
; 1498 :         if (s->match_length >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 3
	jb	$LN10@deflate_fa

; 1499 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1500 : 
; 1501 :             _tr_tally_dist(s, s->strstart - s->match_start,
; 1502 :                            s->match_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$78051[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+112]
	mov	WORD PTR _dist$78052[ebp], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$78052[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	dl, BYTE PTR _len$78051[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$78052[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$78052[ebp], ax
	movzx	eax, BYTE PTR _len$78051[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$78051[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	eax, WORD PTR _dist$78052[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN23@deflate_fa
	movzx	ecx, WORD PTR _dist$78052[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv217[ebp], edx
	jmp	SHORT $LN24@deflate_fa
$LN23@deflate_fa:
	movzx	eax, WORD PTR _dist$78052[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv217[ebp], ecx
$LN24@deflate_fa:
	mov	edx, DWORD PTR tv217[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv217[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+5792], ecx
	sete	al
	mov	DWORD PTR _bflush$[ebp], eax

; 1503 : 
; 1504 :             s->lookahead -= s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+116]
	sub	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1505 : 
; 1506 :             /* Insert new strings in the hash table only if the match length
; 1507 :              * is not too large. This saves time but degrades compression.
; 1508 :              */
; 1509 : #ifndef FASTEST
; 1510 :             if (s->match_length <= s->max_insert_length &&
; 1511 :                 s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+128]
	ja	$LN9@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN9@deflate_fa

; 1512 :                 s->match_length--; /* string at strstart already in table */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN8@deflate_fa:

; 1513 :                 do {
; 1514 :                     s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1515 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx

; 1516 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1517 :                      * always MIN_MATCH bytes ahead.
; 1518 :                      */
; 1519 :                 } while (--s->match_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], ecx
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	$LN8@deflate_fa

; 1520 :                 s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1521 :             } else

	jmp	SHORT $LN5@deflate_fa
$LN9@deflate_fa:

; 1522 : #endif
; 1523 :             {
; 1524 :                 s->strstart += s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1525 :                 s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 1526 :                 s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1527 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN5@deflate_fa:

; 1528 : #if MIN_MATCH != 3
; 1529 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1530 : #endif
; 1531 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1532 :                  * matter since it will be recomputed at next deflate call.
; 1533 :                  */
; 1534 :             }
; 1535 :         } else {

	jmp	$LN4@deflate_fa
$LN10@deflate_fa:

; 1536 :             /* No match, output a literal byte */
; 1537 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1538 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _cc$78060[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	dl, BYTE PTR _cc$78060[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$78060[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$78060[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+5792], ecx
	sete	al
	mov	DWORD PTR _bflush$[ebp], eax

; 1539 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1540 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx
$LN4@deflate_fa:

; 1541 :         }
; 1542 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN3@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN25@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv364[ebp], edx
	jmp	SHORT $LN26@deflate_fa
$LN25@deflate_fa:
	mov	DWORD PTR tv364[ebp], 0
$LN26@deflate_fa:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv364[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@deflate_fa
	xor	eax, eax
	jmp	$LN21@deflate_fa
$LN3@deflate_fa:

; 1543 :     }

	jmp	$LN20@deflate_fa
$LN19@deflate_fa:

; 1544 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN27@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv384[ebp], edx
	jmp	SHORT $LN28@deflate_fa
$LN27@deflate_fa:
	mov	DWORD PTR tv384[ebp], 0
$LN28@deflate_fa:
	xor	ecx, ecx
	cmp	DWORD PTR _flush$[ebp], 4
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv384[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN1@deflate_fa
	xor	eax, eax
	cmp	DWORD PTR _flush$[ebp], 4
	setne	al
	sub	eax, 1
	and	eax, 2
	jmp	SHORT $LN21@deflate_fa
$LN1@deflate_fa:

; 1545 :     return flush == Z_FINISH ? finish_done : block_done;

	xor	eax, eax
	cmp	DWORD PTR _flush$[ebp], 4
	sete	al
	lea	eax, DWORD PTR [eax+eax+1]
$LN21@deflate_fa:

; 1546 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_fast ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _longest_match_fast
_TEXT	SEGMENT
tv163 = -84						; size = 4
_strend$ = -16						; size = 4
_len$ = -12						; size = 4
_match$ = -8						; size = 4
_scan$ = -4						; size = 4
_s$ = 8							; size = 4
_cur_match$ = 12					; size = 4
_longest_match_fast PROC				; COMDAT

; 1178 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1179 :     register Bytef *scan = s->window + s->strstart; /* current string */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+108]
	mov	DWORD PTR _scan$[ebp], ecx

; 1180 :     register Bytef *match;                       /* matched string */
; 1181 :     register int len;                           /* length of current match */
; 1182 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	lea	ecx, DWORD PTR [ecx+eax+258]
	mov	DWORD PTR _strend$[ebp], ecx

; 1183 : 
; 1184 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1185 :      * It is easy to get rid of this optimization if necessary.
; 1186 :      */
; 1187 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1188 : 
; 1189 :     Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
; 1190 : 
; 1191 :     Assert(cur_match < s->strstart, "no future");
; 1192 : 
; 1193 :     match = s->window + cur_match;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, DWORD PTR _cur_match$[ebp]
	mov	DWORD PTR _match$[ebp], ecx

; 1194 : 
; 1195 :     /* Return failure if the match length is less than 2:
; 1196 :      */
; 1197 :     if (match[0] != scan[0] || match[1] != scan[1]) return MIN_MATCH-1;

	mov	eax, DWORD PTR _match$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN6@longest_ma
	mov	eax, DWORD PTR _match$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	je	SHORT $LN7@longest_ma
$LN6@longest_ma:
	mov	eax, 2
	jmp	$LN8@longest_ma
$LN7@longest_ma:

; 1198 : 
; 1199 :     /* The check at best_len-1 can be removed because it will be made
; 1200 :      * again later. (This heuristic is not always a win.)
; 1201 :      * It is not necessary to compare scan[2] and match[2] since they
; 1202 :      * are always equal when the other bytes match, given that
; 1203 :      * the hash keys are equal and that HASH_BITS >= 8.
; 1204 :      */
; 1205 :     scan += 2, match += 2;

	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 2
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 2
	mov	DWORD PTR _match$[ebp], ecx
$LN4@longest_ma:

; 1206 :     Assert(*scan == *match, "match[2]?");
; 1207 : 
; 1208 :     /* We check for insufficient lookahead only every 8th comparison;
; 1209 :      * the 256th check will be made at strstart+258.
; 1210 :      */
; 1211 :     do {
; 1212 :     } while (*++scan == *++match && *++scan == *++match &&
; 1213 :              *++scan == *++match && *++scan == *++match &&
; 1214 :              *++scan == *++match && *++scan == *++match &&
; 1215 :              *++scan == *++match && *++scan == *++match &&
; 1216 :              scan < strend);

	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	$LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	$LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	$LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	$LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
	mov	edx, DWORD PTR _match$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN3@longest_ma
	mov	eax, DWORD PTR _scan$[ebp]
	cmp	eax, DWORD PTR _strend$[ebp]
	jb	$LN4@longest_ma
$LN3@longest_ma:

; 1217 : 
; 1218 :     Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1219 : 
; 1220 :     len = MAX_MATCH - (int)(strend - scan);

	mov	eax, DWORD PTR _strend$[ebp]
	sub	eax, DWORD PTR _scan$[ebp]
	mov	ecx, 258				; 00000102H
	sub	ecx, eax
	mov	DWORD PTR _len$[ebp], ecx

; 1221 : 
; 1222 :     if (len < MIN_MATCH) return MIN_MATCH - 1;

	cmp	DWORD PTR _len$[ebp], 3
	jge	SHORT $LN1@longest_ma
	mov	eax, 2
	jmp	SHORT $LN8@longest_ma
$LN1@longest_ma:

; 1223 : 
; 1224 :     s->match_start = cur_match;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _cur_match$[ebp]
	mov	DWORD PTR [eax+112], ecx

; 1225 :     return (uInt)len <= s->lookahead ? (uInt)len : s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+116]
	ja	SHORT $LN10@longest_ma
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN11@longest_ma
$LN10@longest_ma:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR tv163[ebp], ecx
$LN11@longest_ma:
	mov	eax, DWORD PTR tv163[ebp]
$LN8@longest_ma:

; 1226 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_longest_match_fast ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv453 = -92						; size = 4
tv381 = -92						; size = 4
tv328 = -92						; size = 4
tv244 = -92						; size = 4
_cc$78122 = -22						; size = 1
_cc$78112 = -21						; size = 1
_dist$78097 = -20					; size = 2
_len$78096 = -13					; size = 1
_max_insert$78095 = -12					; size = 4
_bflush$ = -8						; size = 4
_hash_head$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1557 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 1558 :     IPos hash_head = NIL;    /* head of hash chain */

	mov	DWORD PTR _hash_head$[ebp], 0
$LN26@deflate_sl:

; 1559 :     int bflush;              /* set if current block must be flushed */
; 1560 : 
; 1561 :     /* Process the input block. */
; 1562 :     for (;;) {
; 1563 :         /* Make sure that we always have enough lookahead, except
; 1564 :          * at the end of the input file. We need MAX_MATCH bytes
; 1565 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1566 :          * string following the next match.
; 1567 :          */
; 1568 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN24@deflate_sl

; 1569 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1570 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN23@deflate_sl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN23@deflate_sl

; 1571 :                 return need_more;

	xor	eax, eax
	jmp	$LN27@deflate_sl
$LN23@deflate_sl:

; 1572 :             }
; 1573 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN24@deflate_sl
	jmp	$LN25@deflate_sl
$LN24@deflate_sl:

; 1574 :         }
; 1575 : 
; 1576 :         /* Insert the string window[strstart .. strstart+2] in the
; 1577 :          * dictionary, and set hash_head to the head of the hash chain:
; 1578 :          */
; 1579 :         if (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN21@deflate_sl

; 1580 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN21@deflate_sl:

; 1581 :         }
; 1582 : 
; 1583 :         /* Find the longest match, discarding those <= prev_length.
; 1584 :          */
; 1585 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+100], edx

; 1586 :         s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1587 : 
; 1588 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
; 1589 :             s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	$LN20@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+120]
	cmp	edx, DWORD PTR [ecx+128]
	jae	$LN20@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	$LN20@deflate_sl

; 1590 :             /* To simplify the code, we prevent matches with the string
; 1591 :              * of window index 0 (in particular we have to avoid a match
; 1592 :              * of the string with itself at the start of the input file).
; 1593 :              */
; 1594 :             if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	je	SHORT $LN19@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 3
	je	SHORT $LN19@deflate_sl

; 1595 :                 s->match_length = longest_match (s, hash_head);

	mov	eax, DWORD PTR _hash_head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_longest_match
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], eax
	jmp	SHORT $LN18@deflate_sl
$LN19@deflate_sl:

; 1596 :             } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 3
	jne	SHORT $LN18@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN18@deflate_sl

; 1597 :                 s->match_length = longest_match_fast (s, hash_head);

	mov	eax, DWORD PTR _hash_head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_longest_match_fast
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], eax
$LN18@deflate_sl:

; 1598 :             }
; 1599 :             /* longest_match() or longest_match_fast() sets match_start */
; 1600 : 
; 1601 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED
; 1602 : #if TOO_FAR <= 32767
; 1603 :                 || (s->match_length == MIN_MATCH &&
; 1604 :                     s->strstart - s->match_start > TOO_FAR)
; 1605 : #endif
; 1606 :                 )) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 5
	ja	SHORT $LN20@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 1
	je	SHORT $LN15@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 3
	jne	SHORT $LN20@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+112]
	cmp	edx, 4096				; 00001000H
	jbe	SHORT $LN20@deflate_sl
$LN15@deflate_sl:

; 1607 : 
; 1608 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1609 :                  * but we will ignore the current match anyway.
; 1610 :                  */
; 1611 :                 s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2
$LN20@deflate_sl:

; 1612 :             }
; 1613 :         }
; 1614 :         /* If there was a match at the previous step and the current
; 1615 :          * match is not better, output the previous match:
; 1616 :          */
; 1617 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+120], 3
	jb	$LN14@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+120]
	ja	$LN14@deflate_sl

; 1618 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	lea	ecx, DWORD PTR [ecx+eax-3]
	mov	DWORD PTR _max_insert$78095[ebp], ecx

; 1619 :             /* Do not insert strings in hash table beyond this. */
; 1620 : 
; 1621 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1622 : 
; 1623 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
; 1624 :                            s->prev_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 3
	mov	BYTE PTR _len$78096[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+100]
	mov	WORD PTR _dist$78097[ebp], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$78097[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	dl, BYTE PTR _len$78096[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$78097[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$78097[ebp], ax
	movzx	eax, BYTE PTR _len$78096[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$78096[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	eax, WORD PTR _dist$78097[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN29@deflate_sl
	movzx	ecx, WORD PTR _dist$78097[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv244[ebp], edx
	jmp	SHORT $LN30@deflate_sl
$LN29@deflate_sl:
	movzx	eax, WORD PTR _dist$78097[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv244[ebp], ecx
$LN30@deflate_sl:
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+5792], ecx
	sete	al
	mov	DWORD PTR _bflush$[ebp], eax

; 1625 : 
; 1626 :             /* Insert in hash table all strings up to the end of the match.
; 1627 :              * strstart-1 and strstart are already inserted. If there is not
; 1628 :              * enough lookahead, the last two strings are not inserted in
; 1629 :              * the hash table.
; 1630 :              */
; 1631 :             s->lookahead -= s->prev_length-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	sub	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1632 :             s->prev_length -= 2;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], ecx
$LN13@deflate_sl:

; 1633 :             do {
; 1634 :                 if (++s->strstart <= max_insert) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _max_insert$78095[ebp]
	ja	$LN12@deflate_sl

; 1635 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN12@deflate_sl:

; 1636 :                 }
; 1637 :             } while (--s->prev_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], ecx
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+120], 0
	jne	$LN13@deflate_sl

; 1638 :             s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1639 :             s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1640 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1641 : 
; 1642 :             if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN9@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN31@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv328[ebp], edx
	jmp	SHORT $LN32@deflate_sl
$LN31@deflate_sl:
	mov	DWORD PTR tv328[ebp], 0
$LN32@deflate_sl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv328[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN9@deflate_sl
	xor	eax, eax
	jmp	$LN27@deflate_sl
$LN9@deflate_sl:
	jmp	$LN7@deflate_sl
$LN14@deflate_sl:

; 1643 : 
; 1644 :         } else if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN6@deflate_sl

; 1645 :             /* If there was no match at the previous position, output a
; 1646 :              * single literal. If there was a match but the current match
; 1647 :              * is longer, truncate the previous match to a single literal.
; 1648 :              */
; 1649 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1650 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [ecx+eax-1]
	mov	BYTE PTR _cc$78112[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	dl, BYTE PTR _cc$78112[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$78112[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$78112[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+5792], ecx
	sete	al
	mov	DWORD PTR _bflush$[ebp], eax

; 1651 :             if (bflush) {

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN5@deflate_sl

; 1652 :                 FLUSH_BLOCK_ONLY(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN33@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv381[ebp], edx
	jmp	SHORT $LN34@deflate_sl
$LN33@deflate_sl:
	mov	DWORD PTR tv381[ebp], 0
$LN34@deflate_sl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv381[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
$LN5@deflate_sl:

; 1653 :             }
; 1654 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1655 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1656 :             if (s->strm->avail_out == 0) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN4@deflate_sl
	xor	eax, eax
	jmp	$LN27@deflate_sl
$LN4@deflate_sl:

; 1657 :         } else {

	jmp	SHORT $LN7@deflate_sl
$LN6@deflate_sl:

; 1658 :             /* There is no previous match to compare with, wait for
; 1659 :              * the next step to decide.
; 1660 :              */
; 1661 :             s->match_available = 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 1

; 1662 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1663 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN7@deflate_sl:

; 1664 :         }
; 1665 :     }

	jmp	$LN26@deflate_sl
$LN25@deflate_sl:

; 1666 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1667 :     if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN2@deflate_sl

; 1668 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1669 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [ecx+eax-1]
	mov	BYTE PTR _cc$78122[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	dl, BYTE PTR _cc$78122[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$78122[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$78122[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+5792], ecx
	sete	al
	mov	DWORD PTR _bflush$[ebp], eax

; 1670 :         s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN2@deflate_sl:

; 1671 :     }
; 1672 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN35@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv453[ebp], edx
	jmp	SHORT $LN36@deflate_sl
$LN35@deflate_sl:
	mov	DWORD PTR tv453[ebp], 0
$LN36@deflate_sl:
	xor	ecx, ecx
	cmp	DWORD PTR _flush$[ebp], 4
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv453[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN1@deflate_sl
	xor	eax, eax
	cmp	DWORD PTR _flush$[ebp], 4
	setne	al
	sub	eax, 1
	and	eax, 2
	jmp	SHORT $LN27@deflate_sl
$LN1@deflate_sl:

; 1673 :     return flush == Z_FINISH ? finish_done : block_done;

	xor	eax, eax
	cmp	DWORD PTR _flush$[ebp], 4
	sete	al
	lea	eax, DWORD PTR [eax+eax+1]
$LN27@deflate_sl:

; 1674 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_slow ENDP
_TEXT	ENDS
END
