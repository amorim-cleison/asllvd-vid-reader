; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
CONST	ENDS
PUBLIC	??_C@_05GDHACFMB@1?42?43?$AA@			; `string'
PUBLIC	_inflateBackInit_@20
EXTRN	_zcfree:PROC
EXTRN	_zcalloc:PROC
;	COMDAT ??_C@_05GDHACFMB@1?42?43?$AA@
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\infback.c
CONST	SEGMENT
??_C@_05GDHACFMB@1?42?43?$AA@ DB '1.2.3', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
; 38   :         stream_size != (int)(sizeof(z_stream)))

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN6@inflateBac
	mov	eax, DWORD PTR _version$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR ??_C@_05GDHACFMB@1?42?43?$AA@
	cmp	ecx, edx
	jne	SHORT $LN6@inflateBac
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN7@inflateBac
$LN6@inflateBac:

; 39   :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN8@inflateBac
$LN7@inflateBac:

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN4@inflateBac
	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN4@inflateBac
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN4@inflateBac
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN5@inflateBac
$LN4@inflateBac:

; 42   :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN8@inflateBac
$LN5@inflateBac:

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 44   :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN3@inflateBac

; 45   :         strm->zalloc = zcalloc;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _zcalloc

; 46   :         strm->opaque = (voidpf)0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN3@inflateBac:

; 47   :     }
; 48   :     if (strm->zfree == (free_func)0) strm->zfree = zcfree;

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN2@inflateBac
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _zcfree
$LN2@inflateBac:

; 49   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,
; 50   :                                                sizeof(struct inflate_state));

	push	9520					; 00002530H
	push	1
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _state$[ebp], eax

; 51   :     if (state == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@inflateBac
	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN8@inflateBac
$LN1@inflateBac:

; 52   :     Tracev((stderr, "inflate: allocated\n"));
; 53   :     strm->state = (struct internal_state FAR *)state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 54   :     state->dmax = 32768U;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+20], 32768		; 00008000H

; 55   :     state->wbits = windowBits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 56   :     state->wsize = 1U << windowBits;

	mov	eax, 1
	mov	ecx, DWORD PTR _windowBits$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 57   :     state->window = window;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 58   :     state->write = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0

; 59   :     state->whave = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], 0

; 60   :     return Z_OK;

	xor	eax, eax
$LN8@inflateBac:

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ ; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ ; `string'
PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@	; `string'
PUBLIC	_inflateBack@20
EXTRN	_inflate_fast:PROC
EXTRN	_inflate_table:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@ DB 'invalid distances set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ DB 'invalid litera'
	DB	'l/lengths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ DB 'invalid bit leng'
	DB	'th repeat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ DB 'invalid code leng'
	DB	'ths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ DB 'too many le'
	DB	'ngth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ DB 'invalid store'
	DB	'd block lengths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@ DB 'invalid block type', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
tv137 = -120						; size = 4
tv76 = -120						; size = 4
tv73 = -120						; size = 4
_ret$ = -52						; size = 4
_len$ = -48						; size = 4
_last$ = -44						; size = 4
_this$ = -40						; size = 4
_from$ = -36						; size = 4
_copy$ = -32						; size = 4
_bits$ = -28						; size = 4
_hold$ = -24						; size = 4
_left$ = -20						; size = 4
_have$ = -16						; size = 4
_put$ = -12						; size = 4
_next$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi

; 248  :     struct inflate_state FAR *state;
; 249  :     unsigned char FAR *next;    /* next input */
; 250  :     unsigned char FAR *put;     /* next output */
; 251  :     unsigned have, left;        /* available input and output */
; 252  :     unsigned long hold;         /* bit buffer */
; 253  :     unsigned bits;              /* bits in bit buffer */
; 254  :     unsigned copy;              /* number of stored or match bytes to copy */
; 255  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 256  :     code this;                  /* current decoding table entry */
; 257  :     code last;                  /* parent table entry */
; 258  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 259  :     int ret;                    /* return code */
; 260  :     static const unsigned short order[19] = /* permutation of code lengths */
; 261  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 262  : 
; 263  :     /* Check that the strm exists and that the state was initialized */
; 264  :     if (strm == Z_NULL || strm->state == Z_NULL)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN345@inflateBac@2
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN346@inflateBac@2
$LN345@inflateBac@2:

; 265  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN347@inflateBac@2
$LN346@inflateBac@2:

; 266  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 267  : 
; 268  :     /* Reset the state */
; 269  :     strm->msg = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 270  :     state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 271  :     state->last = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 0

; 272  :     state->whave = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], 0

; 273  :     next = strm->next_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx

; 274  :     have = next != Z_NULL ? strm->avail_in : 0;

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN349@inflateBac@2
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN350@inflateBac@2
$LN349@inflateBac@2:
	mov	DWORD PTR tv73[ebp], 0
$LN350@inflateBac@2:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _have$[ebp], edx

; 275  :     hold = 0;

	mov	DWORD PTR _hold$[ebp], 0

; 276  :     bits = 0;

	mov	DWORD PTR _bits$[ebp], 0

; 277  :     put = state->window;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _put$[ebp], ecx

; 278  :     left = state->wsize;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _left$[ebp], ecx
$LN344@inflateBac@2:

; 279  : 
; 280  :     /* Inflate until end of block marked as last */
; 281  :     for (;;)
; 282  :         switch (state->mode) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	sub	edx, 11					; 0000000bH
	mov	DWORD PTR tv76[ebp], edx
	cmp	DWORD PTR tv76[ebp], 16			; 00000010H
	ja	$LN1@inflateBac@2
	mov	eax, DWORD PTR tv76[ebp]
	movzx	ecx, BYTE PTR $LN351@inflateBac@2[eax]
	jmp	DWORD PTR $LN352@inflateBac@2[ecx*4]
$LN340@inflateBac@2:

; 283  :         case TYPE:
; 284  :             /* determine and dispatch block type */
; 285  :             if (state->last) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN332@inflateBac@2
$LN338@inflateBac@2:

; 286  :                 BYTEBITS();

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN338@inflateBac@2

; 287  :                 state->mode = DONE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 26			; 0000001aH

; 288  :                 break;

	jmp	$LN341@inflateBac@2
$LN332@inflateBac@2:

; 289  :             }
; 290  :             NEEDBITS(3);

	cmp	DWORD PTR _bits$[ebp], 3
	jae	SHORT $LN334@inflateBac@2
$LN327@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN326@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN326@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN326@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN327@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN327@inflateBac@2
	jmp	SHORT $LN332@inflateBac@2
$LN334@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN332@inflateBac@2

; 291  :             state->last = BITS(1);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN322@inflateBac@2:

; 292  :             DROPBITS(1);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 1
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN322@inflateBac@2

; 293  :             switch (BITS(2)) {

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 3
	mov	DWORD PTR tv137[ebp], eax
	cmp	DWORD PTR tv137[ebp], 3
	ja	SHORT $LN313@inflateBac@2
	mov	ecx, DWORD PTR tv137[ebp]
	jmp	DWORD PTR $LN353@inflateBac@2[ecx*4]
$LN317@inflateBac@2:

; 294  :             case 0:                             /* stored block */
; 295  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 296  :                         state->last ? " (last)" : ""));
; 297  :                 state->mode = STORED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 13			; 0000000dH

; 298  :                 break;

	jmp	SHORT $LN313@inflateBac@2
$LN316@inflateBac@2:

; 299  :             case 1:                             /* fixed block */
; 300  :                 fixedtables(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_fixedtables
	add	esp, 4

; 301  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 302  :                         state->last ? " (last)" : ""));
; 303  :                 state->mode = LEN;              /* decode codes */

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H

; 304  :                 break;

	jmp	SHORT $LN313@inflateBac@2
$LN315@inflateBac@2:

; 305  :             case 2:                             /* dynamic block */
; 306  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 307  :                         state->last ? " (last)" : ""));
; 308  :                 state->mode = TABLE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH

; 309  :                 break;

	jmp	SHORT $LN313@inflateBac@2
$LN314@inflateBac@2:

; 310  :             case 3:
; 311  :                 strm->msg = (char *)"invalid block type";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 312  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
$LN313@inflateBac@2:

; 313  :             }
; 314  :             DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 2
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN313@inflateBac@2

; 315  :             break;

	jmp	$LN341@inflateBac@2
$LN309@inflateBac@2:

; 316  : 
; 317  :         case STORED:
; 318  :             /* get and verify stored block length */
; 319  :             BYTEBITS();                         /* go to byte boundary */

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN309@inflateBac@2
$LN303@inflateBac@2:

; 320  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN305@inflateBac@2
$LN298@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN297@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN297@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN297@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN298@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN298@inflateBac@2
	jmp	SHORT $LN303@inflateBac@2
$LN305@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN303@inflateBac@2

; 321  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 16					; 00000010H
	xor	ecx, 65535				; 0000ffffH
	cmp	eax, ecx
	je	SHORT $LN293@inflateBac@2

; 322  :                 strm->msg = (char *)"invalid stored block lengths";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 323  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 324  :                 break;

	jmp	$LN341@inflateBac@2
$LN293@inflateBac@2:

; 325  :             }
; 326  :             state->length = (unsigned)hold & 0xffff;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], eax
$LN292@inflateBac@2:

; 327  :             Tracev((stderr, "inflate:       stored length %u\n",
; 328  :                     state->length));
; 329  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN292@inflateBac@2
$LN289@inflateBac@2:

; 330  : 
; 331  :             /* copy stored block from input to output */
; 332  :             while (state->length != 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	$LN288@inflateBac@2

; 333  :                 copy = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _copy$[ebp], ecx
$LN287@inflateBac@2:

; 334  :                 PULL();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN286@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN286@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN286@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN287@inflateBac@2
$LN282@inflateBac@2:

; 335  :                 ROOM();

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN281@inflateBac@2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _put$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _left$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _put$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_desc$[ebp]
	push	edx
	call	DWORD PTR _out$[ebp]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN281@inflateBac@2
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN281@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN282@inflateBac@2

; 336  :                 if (copy > have) copy = have;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	SHORT $LN277@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN277@inflateBac@2:

; 337  :                 if (copy > left) copy = left;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jbe	SHORT $LN276@inflateBac@2
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN276@inflateBac@2:

; 338  :                 zmemcpy(put, next, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _put$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 339  :                 have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 340  :                 next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 341  :                 left -= copy;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 342  :                 put += copy;

	mov	eax, DWORD PTR _put$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _put$[ebp], eax

; 343  :                 state->length -= copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 344  :             }

	jmp	$LN289@inflateBac@2
$LN288@inflateBac@2:

; 345  :             Tracev((stderr, "inflate:       stored end\n"));
; 346  :             state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 347  :             break;

	jmp	$LN341@inflateBac@2
$LN271@inflateBac@2:

; 348  : 
; 349  :         case TABLE:
; 350  :             /* get dynamic table entries descriptor */
; 351  :             NEEDBITS(14);

	cmp	DWORD PTR _bits$[ebp], 14		; 0000000eH
	jae	SHORT $LN273@inflateBac@2
$LN266@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN265@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN265@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN265@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN266@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN266@inflateBac@2
	jmp	SHORT $LN271@inflateBac@2
$LN273@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN271@inflateBac@2

; 352  :             state->nlen = BITS(5) + 257;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, 257				; 00000101H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN261@inflateBac@2:

; 353  :             DROPBITS(5);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 5
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 5
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN261@inflateBac@2

; 354  :             state->ndist = BITS(5) + 1;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+100], eax
$LN258@inflateBac@2:

; 355  :             DROPBITS(5);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 5
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 5
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN258@inflateBac@2

; 356  :             state->ncode = BITS(4) + 4;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 15					; 0000000fH
	add	eax, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+92], eax
$LN255@inflateBac@2:

; 357  :             DROPBITS(4);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 4
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 4
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN255@inflateBac@2

; 358  : #ifndef PKZIP_BUG_WORKAROUND
; 359  :             if (state->nlen > 286 || state->ndist > 30) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+96], 286			; 0000011eH
	ja	SHORT $LN251@inflateBac@2
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+100], 30			; 0000001eH
	jbe	SHORT $LN252@inflateBac@2
$LN251@inflateBac@2:

; 360  :                 strm->msg = (char *)"too many length or distance symbols";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 361  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 362  :                 break;

	jmp	$LN341@inflateBac@2
$LN252@inflateBac@2:

; 363  :             }
; 364  : #endif
; 365  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 366  : 
; 367  :             /* get code length code lengths (not a typo) */
; 368  :             state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN250@inflateBac@2:

; 369  :             while (state->have < state->ncode) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+104]
	cmp	edx, DWORD PTR [ecx+92]
	jae	$LN232@inflateBac@2
$LN245@inflateBac@2:

; 370  :                 NEEDBITS(3);

	cmp	DWORD PTR _bits$[ebp], 3
	jae	SHORT $LN247@inflateBac@2
$LN240@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN239@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN239@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN239@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN240@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN240@inflateBac@2
	jmp	SHORT $LN245@inflateBac@2
$LN247@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN245@inflateBac@2

; 371  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	movzx	ecx, WORD PTR ?order@?1??inflateBack@@9@9[edx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+104], ecx
$LN235@inflateBac@2:

; 372  :                 DROPBITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 3
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 3
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN235@inflateBac@2

; 373  :             }

	jmp	$LN250@inflateBac@2
$LN232@inflateBac@2:

; 374  :             while (state->have < 19)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], 19			; 00000013H
	jae	SHORT $LN231@inflateBac@2

; 375  :                 state->lens[order[state->have++]] = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	movzx	edx, WORD PTR ?order@?1??inflateBack@@9@9[ecx*2]
	xor	eax, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+edx*2+112], ax
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+104]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+104], eax
	jmp	SHORT $LN232@inflateBac@2
$LN231@inflateBac@2:

; 376  :             state->next = state->codes;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 377  :             state->lencode = (code const FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+76], edx

; 378  :             state->lenbits = 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 7

; 379  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),
; 380  :                                 &(state->lenbits), state->work);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 752				; 000002f0H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	push	0
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 381  :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN230@inflateBac@2

; 382  :                 strm->msg = (char *)"invalid code lengths set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 383  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 384  :                 break;

	jmp	$LN341@inflateBac@2
$LN230@inflateBac@2:

; 385  :             }
; 386  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 387  : 
; 388  :             /* get length and distance code code lengths */
; 389  :             state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN229@inflateBac@2:

; 390  :             while (state->have < state->nlen + state->ndist) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], ecx
	jae	$LN228@inflateBac@2
$LN227@inflateBac@2:

; 391  :                 for (;;) {
; 392  :                     this = state->lencode[BITS(state->lenbits)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+84]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _this$[ebp], edx

; 393  :                     if ((unsigned)(this.bits) <= bits) break;

	movzx	eax, BYTE PTR _this$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN221@inflateBac@2
	jmp	SHORT $LN226@inflateBac@2
$LN221@inflateBac@2:

; 394  :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN220@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN220@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN220@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN221@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN221@inflateBac@2

; 395  :                 }

	jmp	$LN227@inflateBac@2
$LN226@inflateBac@2:

; 396  :                 if (this.val < 16) {

	movzx	eax, WORD PTR _this$[ebp+2]
	cmp	eax, 16					; 00000010H
	jge	$LN216@inflateBac@2
$LN212@inflateBac@2:

; 397  :                     NEEDBITS(this.bits);

	movzx	eax, BYTE PTR _this$[ebp+1]
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN214@inflateBac@2
$LN207@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN206@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN206@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN206@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN207@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN207@inflateBac@2
	jmp	SHORT $LN212@inflateBac@2
$LN214@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN212@inflateBac@2
$LN202@inflateBac@2:

; 398  :                     DROPBITS(this.bits);

	movzx	ecx, BYTE PTR _this$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _this$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN202@inflateBac@2

; 399  :                     state->lens[state->have++] = this.val;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _state$[ebp]
	mov	ax, WORD PTR _this$[ebp+2]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], edx

; 400  :                 }
; 401  :                 else {

	jmp	$LN199@inflateBac@2
$LN216@inflateBac@2:

; 402  :                     if (this.val == 16) {

	movzx	eax, WORD PTR _this$[ebp+2]
	cmp	eax, 16					; 00000010H
	jne	$LN198@inflateBac@2
$LN194@inflateBac@2:

; 403  :                         NEEDBITS(this.bits + 2);

	movzx	eax, BYTE PTR _this$[ebp+1]
	add	eax, 2
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN196@inflateBac@2
$LN189@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN188@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN188@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN188@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN189@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN189@inflateBac@2
	jmp	SHORT $LN194@inflateBac@2
$LN196@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN194@inflateBac@2
$LN184@inflateBac@2:

; 404  :                         DROPBITS(this.bits);

	movzx	ecx, BYTE PTR _this$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _this$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN184@inflateBac@2

; 405  :                         if (state->have == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN181@inflateBac@2

; 406  :                             strm->msg = (char *)"invalid bit length repeat";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 407  :                             state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 408  :                             break;

	jmp	$LN228@inflateBac@2
$LN181@inflateBac@2:

; 409  :                         }
; 410  :                         len = (unsigned)(state->lens[state->have - 1]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+110]
	mov	DWORD PTR _len$[ebp], eax

; 411  :                         copy = 3 + BITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 3
	add	eax, 3
	mov	DWORD PTR _copy$[ebp], eax
$LN180@inflateBac@2:

; 412  :                         DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 2
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN180@inflateBac@2

; 413  :                     }
; 414  :                     else if (this.val == 17) {

	jmp	$LN177@inflateBac@2
$LN198@inflateBac@2:
	movzx	eax, WORD PTR _this$[ebp+2]
	cmp	eax, 17					; 00000011H
	jne	$LN152@inflateBac@2
$LN172@inflateBac@2:

; 415  :                         NEEDBITS(this.bits + 3);

	movzx	eax, BYTE PTR _this$[ebp+1]
	add	eax, 3
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN174@inflateBac@2
$LN167@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN166@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN166@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN166@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN167@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN167@inflateBac@2
	jmp	SHORT $LN172@inflateBac@2
$LN174@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN172@inflateBac@2
$LN162@inflateBac@2:

; 416  :                         DROPBITS(this.bits);

	movzx	ecx, BYTE PTR _this$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _this$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN162@inflateBac@2

; 417  :                         len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 418  :                         copy = 3 + BITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 7
	add	eax, 3
	mov	DWORD PTR _copy$[ebp], eax
$LN159@inflateBac@2:

; 419  :                         DROPBITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 3
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 3
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN159@inflateBac@2

; 420  :                     }
; 421  :                     else {

	jmp	$LN177@inflateBac@2
$LN152@inflateBac@2:

; 422  :                         NEEDBITS(this.bits + 7);

	movzx	eax, BYTE PTR _this$[ebp+1]
	add	eax, 7
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN154@inflateBac@2
$LN147@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN146@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN146@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN146@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN147@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN147@inflateBac@2
	jmp	SHORT $LN152@inflateBac@2
$LN154@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN152@inflateBac@2
$LN142@inflateBac@2:

; 423  :                         DROPBITS(this.bits);

	movzx	ecx, BYTE PTR _this$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _this$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN142@inflateBac@2

; 424  :                         len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 425  :                         copy = 11 + BITS(7);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 127				; 0000007fH
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _copy$[ebp], eax
$LN139@inflateBac@2:

; 426  :                         DROPBITS(7);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 7
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 7
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN139@inflateBac@2
$LN177@inflateBac@2:

; 427  :                     }
; 428  :                     if (state->have + copy > state->nlen + state->ndist) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	edx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [edx+100]
	cmp	ecx, eax
	jbe	SHORT $LN135@inflateBac@2

; 429  :                         strm->msg = (char *)"invalid bit length repeat";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 430  :                         state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 431  :                         break;

	jmp	SHORT $LN228@inflateBac@2
$LN135@inflateBac@2:

; 432  :                     }
; 433  :                     while (copy--)

	mov	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _copy$[ebp], ecx
	test	eax, eax
	je	SHORT $LN199@inflateBac@2

; 434  :                         state->lens[state->have++] = (unsigned short)len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _state$[ebp]
	mov	ax, WORD PTR _len$[ebp]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], edx
	jmp	SHORT $LN135@inflateBac@2
$LN199@inflateBac@2:

; 435  :                 }
; 436  :             }

	jmp	$LN229@inflateBac@2
$LN228@inflateBac@2:

; 437  : 
; 438  :             /* handle error breaks in while */
; 439  :             if (state->mode == BAD) break;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 27			; 0000001bH
	jne	SHORT $LN133@inflateBac@2
	jmp	$LN341@inflateBac@2
$LN133@inflateBac@2:

; 440  : 
; 441  :             /* build code tables */
; 442  :             state->next = state->codes;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 443  :             state->lencode = (code const FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+76], edx

; 444  :             state->lenbits = 9;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 9

; 445  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
; 446  :                                 &(state->lenbits), state->work);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 752				; 000002f0H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	push	1
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 447  :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN132@inflateBac@2

; 448  :                 strm->msg = (char *)"invalid literal/lengths set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@

; 449  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 450  :                 break;

	jmp	$LN341@inflateBac@2
$LN132@inflateBac@2:

; 451  :             }
; 452  :             state->distcode = (code const FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+80], edx

; 453  :             state->distbits = 6;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 6

; 454  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
; 455  :                             &(state->next), &(state->distbits), state->work);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 752				; 000002f0H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+112]
	push	edx
	push	2
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 456  :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN131@inflateBac@2

; 457  :                 strm->msg = (char *)"invalid distances set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 458  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 459  :                 break;

	jmp	$LN341@inflateBac@2
$LN131@inflateBac@2:

; 460  :             }
; 461  :             Tracev((stderr, "inflate:       codes ok\n"));
; 462  :             state->mode = LEN;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN130@inflateBac@2:

; 463  : 
; 464  :         case LEN:
; 465  :             /* use inflate_fast() if we have enough input and output */
; 466  :             if (have >= 6 && left >= 258) {

	cmp	DWORD PTR _have$[ebp], 6
	jb	$LN121@inflateBac@2
	cmp	DWORD PTR _left$[ebp], 258		; 00000102H
	jb	$LN121@inflateBac@2
$LN128@inflateBac@2:

; 467  :                 RESTORE();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [eax+60], ecx
	xor	eax, eax
	jne	SHORT $LN128@inflateBac@2

; 468  :                 if (state->whave < state->wsize)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+40]
	jae	SHORT $LN125@inflateBac@2

; 469  :                     state->whave = state->wsize - left;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], ecx
$LN125@inflateBac@2:

; 470  :                 inflate_fast(strm, state->wsize);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_inflate_fast
	add	esp, 8
$LN124@inflateBac@2:

; 471  :                 LOAD();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _put$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _left$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _have$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _hold$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN124@inflateBac@2

; 472  :                 break;

	jmp	$LN341@inflateBac@2
$LN121@inflateBac@2:

; 473  :             }
; 474  : 
; 475  :             /* get a literal, length, or end-of-block code */
; 476  :             for (;;) {
; 477  :                 this = state->lencode[BITS(state->lenbits)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+84]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _this$[ebp], edx

; 478  :                 if ((unsigned)(this.bits) <= bits) break;

	movzx	eax, BYTE PTR _this$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN115@inflateBac@2
	jmp	SHORT $LN120@inflateBac@2
$LN115@inflateBac@2:

; 479  :                 PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN114@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN114@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN114@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN115@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN115@inflateBac@2

; 480  :             }

	jmp	$LN121@inflateBac@2
$LN120@inflateBac@2:

; 481  :             if (this.op && (this.op & 0xf0) == 0) {

	movzx	eax, BYTE PTR _this$[ebp]
	test	eax, eax
	je	$LN95@inflateBac@2
	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 240				; 000000f0H
	jne	$LN95@inflateBac@2

; 482  :                 last = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last$[ebp], eax
$LN109@inflateBac@2:

; 483  :                 for (;;) {
; 484  :                     this = state->lencode[last.val +
; 485  :                             (BITS(last.bits + last.op) >> last.bits)];

	movzx	eax, WORD PTR _last$[ebp+2]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	edx, BYTE PTR _last$[ebp]
	add	ecx, edx
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	shr	edx, cl
	add	eax, edx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _this$[ebp], eax

; 486  :                     if ((unsigned)(last.bits + this.bits) <= bits) break;

	movzx	eax, BYTE PTR _last$[ebp+1]
	movzx	ecx, BYTE PTR _this$[ebp+1]
	add	eax, ecx
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN103@inflateBac@2
	jmp	SHORT $LN98@inflateBac@2
$LN103@inflateBac@2:

; 487  :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN102@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN102@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN102@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN103@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN103@inflateBac@2

; 488  :                 }

	jmp	$LN109@inflateBac@2
$LN98@inflateBac@2:

; 489  :                 DROPBITS(last.bits);

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN98@inflateBac@2
$LN95@inflateBac@2:

; 490  :             }
; 491  :             DROPBITS(this.bits);

	movzx	ecx, BYTE PTR _this$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _this$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN95@inflateBac@2

; 492  :             state->length = (unsigned)this.val;

	movzx	eax, WORD PTR _this$[ebp+2]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 493  : 
; 494  :             /* process literal */
; 495  :             if (this.op == 0) {

	movzx	eax, BYTE PTR _this$[ebp]
	test	eax, eax
	jne	SHORT $LN92@inflateBac@2
$LN91@inflateBac@2:

; 496  :                 Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
; 497  :                         "inflate:         literal '%c'\n" :
; 498  :                         "inflate:         literal 0x%02x\n", this.val));
; 499  :                 ROOM();

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN90@inflateBac@2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _put$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _left$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _put$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_desc$[ebp]
	push	edx
	call	DWORD PTR _out$[ebp]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN90@inflateBac@2
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN90@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN91@inflateBac@2

; 500  :                 *put++ = (unsigned char)(state->length);

	mov	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+64]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _put$[ebp]
	add	eax, 1
	mov	DWORD PTR _put$[ebp], eax

; 501  :                 left--;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, 1
	mov	DWORD PTR _left$[ebp], eax

; 502  :                 state->mode = LEN;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H

; 503  :                 break;

	jmp	$LN341@inflateBac@2
$LN92@inflateBac@2:

; 504  :             }
; 505  : 
; 506  :             /* process end of block */
; 507  :             if (this.op & 32) {

	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN86@inflateBac@2

; 508  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 509  :                 state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 510  :                 break;

	jmp	$LN341@inflateBac@2
$LN86@inflateBac@2:

; 511  :             }
; 512  : 
; 513  :             /* invalid code */
; 514  :             if (this.op & 64) {

	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN85@inflateBac@2

; 515  :                 strm->msg = (char *)"invalid literal/length code";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 516  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 517  :                 break;

	jmp	$LN341@inflateBac@2
$LN85@inflateBac@2:

; 518  :             }
; 519  : 
; 520  :             /* length code -- get extra bits, if any */
; 521  :             state->extra = (unsigned)(this.op) & 15;

	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 522  :             if (state->extra != 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN67@inflateBac@2
$LN80@inflateBac@2:

; 523  :                 NEEDBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jae	SHORT $LN82@inflateBac@2
$LN75@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN74@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN74@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN74@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN75@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN75@inflateBac@2
	jmp	SHORT $LN80@inflateBac@2
$LN82@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN80@inflateBac@2

; 524  :                 state->length += BITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+72]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], edx
$LN70@inflateBac@2:

; 525  :                 DROPBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN70@inflateBac@2
$LN67@inflateBac@2:

; 526  :             }
; 527  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 528  : 
; 529  :             /* get distance code */
; 530  :             for (;;) {
; 531  :                 this = state->distcode[BITS(state->distbits)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _this$[ebp], edx

; 532  :                 if ((unsigned)(this.bits) <= bits) break;

	movzx	eax, BYTE PTR _this$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN61@inflateBac@2
	jmp	SHORT $LN66@inflateBac@2
$LN61@inflateBac@2:

; 533  :                 PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN60@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN60@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN60@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN61@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN61@inflateBac@2

; 534  :             }

	jmp	$LN67@inflateBac@2
$LN66@inflateBac@2:

; 535  :             if ((this.op & 0xf0) == 0) {

	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 240				; 000000f0H
	jne	$LN41@inflateBac@2

; 536  :                 last = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _last$[ebp], eax
$LN55@inflateBac@2:

; 537  :                 for (;;) {
; 538  :                     this = state->distcode[last.val +
; 539  :                             (BITS(last.bits + last.op) >> last.bits)];

	movzx	eax, WORD PTR _last$[ebp+2]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	edx, BYTE PTR _last$[ebp]
	add	ecx, edx
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	shr	edx, cl
	add	eax, edx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _this$[ebp], eax

; 540  :                     if ((unsigned)(last.bits + this.bits) <= bits) break;

	movzx	eax, BYTE PTR _last$[ebp+1]
	movzx	ecx, BYTE PTR _this$[ebp+1]
	add	eax, ecx
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN49@inflateBac@2
	jmp	SHORT $LN44@inflateBac@2
$LN49@inflateBac@2:

; 541  :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN48@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN48@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN48@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN49@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN49@inflateBac@2

; 542  :                 }

	jmp	$LN55@inflateBac@2
$LN44@inflateBac@2:

; 543  :                 DROPBITS(last.bits);

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN44@inflateBac@2
$LN41@inflateBac@2:

; 544  :             }
; 545  :             DROPBITS(this.bits);

	movzx	ecx, BYTE PTR _this$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _this$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN41@inflateBac@2

; 546  :             if (this.op & 64) {

	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN38@inflateBac@2

; 547  :                 strm->msg = (char *)"invalid distance code";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 548  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 549  :                 break;

	jmp	$LN341@inflateBac@2
$LN38@inflateBac@2:

; 550  :             }
; 551  :             state->offset = (unsigned)this.val;

	movzx	eax, WORD PTR _this$[ebp+2]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 552  : 
; 553  :             /* get distance extra bits, if any */
; 554  :             state->extra = (unsigned)(this.op) & 15;

	movzx	eax, BYTE PTR _this$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 555  :             if (state->extra != 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN37@inflateBac@2
$LN33@inflateBac@2:

; 556  :                 NEEDBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jae	SHORT $LN35@inflateBac@2
$LN28@inflateBac@2:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN27@inflateBac@2
	lea	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_desc$[ebp]
	push	ecx
	call	DWORD PTR _in$[ebp]
	add	esp, 8
	mov	DWORD PTR _have$[ebp], eax
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN27@inflateBac@2
	mov	DWORD PTR _next$[ebp], 0
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN27@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN28@inflateBac@2
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN28@inflateBac@2
	jmp	SHORT $LN33@inflateBac@2
$LN35@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN33@inflateBac@2

; 557  :                 state->offset += BITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+72]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], edx
$LN23@inflateBac@2:

; 558  :                 DROPBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN23@inflateBac@2
$LN37@inflateBac@2:

; 559  :             }
; 560  :             if (state->offset > state->wsize - (state->whave < state->wsize ?
; 561  :                                                 left : 0)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+40]
	sbb	eax, eax
	and	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	sub	edx, eax
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+68], edx
	jbe	SHORT $LN16@inflateBac@2

; 562  :                 strm->msg = (char *)"invalid distance too far back";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 563  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH

; 564  :                 break;

	jmp	$LN341@inflateBac@2
$LN16@inflateBac@2:

; 565  :             }
; 566  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 567  : 
; 568  :             /* copy match from window to output */
; 569  :             do {
; 570  :                 ROOM();

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN15@inflateBac@2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _put$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _left$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _put$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_desc$[ebp]
	push	edx
	call	DWORD PTR _out$[ebp]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN15@inflateBac@2
	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
	jmp	$inf_leave$77599
$LN15@inflateBac@2:
	xor	eax, eax
	jne	SHORT $LN16@inflateBac@2

; 571  :                 copy = state->wsize - state->offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+40]
	sub	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _copy$[ebp], edx

; 572  :                 if (copy < left) {

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jae	SHORT $LN11@inflateBac@2

; 573  :                     from = put + copy;

	mov	eax, DWORD PTR _put$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _from$[ebp], eax

; 574  :                     copy = left - copy;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _copy$[ebp], eax

; 575  :                 }
; 576  :                 else {

	jmp	SHORT $LN10@inflateBac@2
$LN11@inflateBac@2:

; 577  :                     from = put - state->offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	sub	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _from$[ebp], ecx

; 578  :                     copy = left;

	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN10@inflateBac@2:

; 579  :                 }
; 580  :                 if (copy > state->length) copy = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jbe	SHORT $LN9@inflateBac@2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _copy$[ebp], ecx
$LN9@inflateBac@2:

; 581  :                 state->length -= copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 582  :                 left -= copy;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _left$[ebp], eax
$LN8@inflateBac@2:

; 583  :                 do {
; 584  :                     *put++ = *from++;

	mov	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _put$[ebp]
	add	eax, 1
	mov	DWORD PTR _put$[ebp], eax
	mov	ecx, DWORD PTR _from$[ebp]
	add	ecx, 1
	mov	DWORD PTR _from$[ebp], ecx

; 585  :                 } while (--copy);

	mov	eax, DWORD PTR _copy$[ebp]
	sub	eax, 1
	mov	DWORD PTR _copy$[ebp], eax
	jne	SHORT $LN8@inflateBac@2

; 586  :             } while (state->length != 0);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	$LN16@inflateBac@2

; 587  :             break;

	jmp	SHORT $LN341@inflateBac@2
$LN5@inflateBac@2:

; 588  : 
; 589  :         case DONE:
; 590  :             /* inflate stream terminated properly -- write leftover output */
; 591  :             ret = Z_STREAM_END;

	mov	DWORD PTR _ret$[ebp], 1

; 592  :             if (left < state->wsize) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN4@inflateBac@2

; 593  :                 if (out(out_desc, state->window, state->wsize - left))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _out_desc$[ebp]
	push	ecx
	call	DWORD PTR _out$[ebp]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@inflateBac@2

; 594  :                     ret = Z_BUF_ERROR;

	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
$LN4@inflateBac@2:

; 595  :             }
; 596  :             goto inf_leave;

	jmp	SHORT $inf_leave$77599
$LN2@inflateBac@2:

; 597  : 
; 598  :         case BAD:
; 599  :             ret = Z_DATA_ERROR;

	mov	DWORD PTR _ret$[ebp], -3		; fffffffdH

; 600  :             goto inf_leave;

	jmp	SHORT $inf_leave$77599
$LN1@inflateBac@2:

; 601  : 
; 602  :         default:                /* can't happen, but makes compilers happy */
; 603  :             ret = Z_STREAM_ERROR;

	mov	DWORD PTR _ret$[ebp], -2		; fffffffeH
	jmp	SHORT $inf_leave$77599
$LN341@inflateBac@2:

; 604  :             goto inf_leave;
; 605  :         }

	jmp	$LN344@inflateBac@2
$inf_leave$77599:

; 606  : 
; 607  :     /* Return unused input */
; 608  :   inf_leave:
; 609  :     strm->next_in = next;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx

; 610  :     strm->avail_in = have;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 611  :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN347@inflateBac@2:

; 612  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN352@inflateBac@2:
	DD	$LN340@inflateBac@2
	DD	$LN309@inflateBac@2
	DD	$LN271@inflateBac@2
	DD	$LN130@inflateBac@2
	DD	$LN5@inflateBac@2
	DD	$LN2@inflateBac@2
	DD	$LN1@inflateBac@2
$LN351@inflateBac@2:
	DB	0
	DB	6
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	5
	npad	3
$LN353@inflateBac@2:
	DD	$LN317@inflateBac@2
	DD	$LN316@inflateBac@2
	DD	$LN315@inflateBac@2
	DD	$LN314@inflateBac@2
_inflateBack@20 ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _fixedtables
_TEXT	SEGMENT
_state$ = 8						; size = 4
_fixedtables PROC					; COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 76   : #ifdef BUILDFIXED
; 77   :     static int virgin = 1;
; 78   :     static code *lenfix, *distfix;
; 79   :     static code fixed[544];
; 80   : 
; 81   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 82   :     if (virgin) {
; 83   :         unsigned sym, bits;
; 84   :         static code *next;
; 85   : 
; 86   :         /* literal/length table */
; 87   :         sym = 0;
; 88   :         while (sym < 144) state->lens[sym++] = 8;
; 89   :         while (sym < 256) state->lens[sym++] = 9;
; 90   :         while (sym < 280) state->lens[sym++] = 7;
; 91   :         while (sym < 288) state->lens[sym++] = 8;
; 92   :         next = fixed;
; 93   :         lenfix = next;
; 94   :         bits = 9;
; 95   :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 96   : 
; 97   :         /* distance table */
; 98   :         sym = 0;
; 99   :         while (sym < 32) state->lens[sym++] = 5;
; 100  :         distfix = next;
; 101  :         bits = 5;
; 102  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 103  : 
; 104  :         /* do this just once */
; 105  :         virgin = 0;
; 106  :     }
; 107  : #else /* !BUILDFIXED */
; 108  : #   include "inffixed.h"
; 109  : #endif /* BUILDFIXED */
; 110  :     state->lencode = lenfix;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+76], OFFSET ?lenfix@?1??fixedtables@@9@9

; 111  :     state->lenbits = 9;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 9

; 112  :     state->distcode = distfix;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+80], OFFSET ?distfix@?1??fixedtables@@9@9

; 113  :     state->distbits = 5;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 5

; 114  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fixedtables ENDP
_TEXT	ENDS
PUBLIC	_inflateBackEnd@4
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 616  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 617  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@inflateBac@3
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@inflateBac@3
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN2@inflateBac@3
$LN1@inflateBac@3:

; 618  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@inflateBac@3
$LN2@inflateBac@3:

; 619  :     ZFREE(strm, strm->state);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8

; 620  :     strm->state = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+28], 0

; 621  :     Tracev((stderr, "inflate: end\n"));
; 622  :     return Z_OK;

	xor	eax, eax
$LN3@inflateBac@3:

; 623  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
