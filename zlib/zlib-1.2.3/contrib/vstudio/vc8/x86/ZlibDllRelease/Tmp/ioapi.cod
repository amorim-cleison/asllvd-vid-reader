; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\ioapi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb?$AA@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb?$AA@ DB 'r+b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
PUBLIC	_ferror_file_func
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\ioapi.c
;	COMDAT _ferror_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ferror_file_func PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 161  :     int ret;
; 162  :     ret = ferror((FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ferror
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 163  :     return ret;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 164  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_ferror_file_func ENDP
_TEXT	ENDS
PUBLIC	_fclose_file_func
; Function compile flags: /Odtp
;	COMDAT _fclose_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_fclose_file_func PROC					; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 152  :     int ret;
; 153  :     ret = fclose((FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 154  :     return ret;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 155  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_fclose_file_func ENDP
_TEXT	ENDS
PUBLIC	_fseek_file_func
; Function compile flags: /Odtp
;	COMDAT _fseek_file_func
_TEXT	SEGMENT
tv64 = -12						; size = 4
_ret$ = -8						; size = 4
_fseek_origin$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_fseek_file_func PROC					; COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 128  :     int fseek_origin=0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 129  :     long ret;
; 130  :     switch (origin)

  0000d	8b 45 14	 mov	 eax, DWORD PTR _origin$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR tv64[ebp], eax
  00013	83 7d f4 00	 cmp	 DWORD PTR tv64[ebp], 0
  00017	74 20		 je	 SHORT $LN2@fseek_file
  00019	83 7d f4 01	 cmp	 DWORD PTR tv64[ebp], 1
  0001d	74 08		 je	 SHORT $LN4@fseek_file
  0001f	83 7d f4 02	 cmp	 DWORD PTR tv64[ebp], 2
  00023	74 0b		 je	 SHORT $LN3@fseek_file
  00025	eb 1b		 jmp	 SHORT $LN1@fseek_file
$LN4@fseek_file:

; 131  :     {
; 132  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 133  :         fseek_origin = SEEK_CUR;

  00027	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 1

; 134  :         break;

  0002e	eb 17		 jmp	 SHORT $LN5@fseek_file
$LN3@fseek_file:

; 135  :     case ZLIB_FILEFUNC_SEEK_END :
; 136  :         fseek_origin = SEEK_END;

  00030	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 2

; 137  :         break;

  00037	eb 0e		 jmp	 SHORT $LN5@fseek_file
$LN2@fseek_file:

; 138  :     case ZLIB_FILEFUNC_SEEK_SET :
; 139  :         fseek_origin = SEEK_SET;

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 140  :         break;

  00040	eb 05		 jmp	 SHORT $LN5@fseek_file
$LN1@fseek_file:

; 141  :     default: return -1;

  00042	83 c8 ff	 or	 eax, -1
  00045	eb 1f		 jmp	 SHORT $LN7@fseek_file
$LN5@fseek_file:

; 142  :     }
; 143  :     ret = 0;

  00047	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 144  :     fseek((FILE *)stream, offset, fseek_origin);

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _fseek_origin$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 10	 mov	 edx, DWORD PTR _offset$[ebp]
  00055	52		 push	 edx
  00056	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00059	50		 push	 eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN7@fseek_file:

; 146  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_fseek_file_func ENDP
_TEXT	ENDS
PUBLIC	_ftell_file_func
; Function compile flags: /Odtp
;	COMDAT _ftell_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell_file_func PROC					; COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 117  :     long ret;
; 118  :     ret = ftell((FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 119  :     return ret;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 120  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_ftell_file_func ENDP
_TEXT	ENDS
PUBLIC	_fwrite_file_func
; Function compile flags: /Odtp
;	COMDAT _fwrite_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fwrite_file_func PROC					; COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 108  :     uLong ret;
; 109  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  0000b	51		 push	 ecx
  0000c	6a 01		 push	 1
  0000e	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00018	83 c4 10	 add	 esp, 16			; 00000010H
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 110  :     return ret;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 111  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_fwrite_file_func ENDP
_TEXT	ENDS
PUBLIC	_fread_file_func
; Function compile flags: /Odtp
;	COMDAT _fread_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fread_file_func PROC					; COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 96   :     uLong ret;
; 97   :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  0000b	51		 push	 ecx
  0000c	6a 01		 push	 1
  0000e	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00018	83 c4 10	 add	 esp, 16			; 00000010H
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 98   :     return ret;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 99   : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_fread_file_func ENDP
_TEXT	ENDS
PUBLIC	_fopen_file_func
; Function compile flags: /Odtp
;	COMDAT _fopen_file_func
_TEXT	SEGMENT
_mode_fopen$ = -8					; size = 4
_file$ = -4						; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen_file_func PROC					; COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 73   :     FILE* file = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _file$[ebp], 0

; 74   :     const char* mode_fopen = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 75   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00014	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00017	83 e0 03	 and	 eax, 3
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	75 09		 jne	 SHORT $LN6@fopen_file

; 76   :         mode_fopen = "rb";

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02JDPG@rb?$AA@

; 77   :     else

  00026	eb 20		 jmp	 SHORT $LN5@fopen_file
$LN6@fopen_file:

; 78   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002b	83 e1 04	 and	 ecx, 4
  0002e	74 09		 je	 SHORT $LN4@fopen_file

; 79   :         mode_fopen = "r+b";

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@

; 80   :     else

  00037	eb 0f		 jmp	 SHORT $LN5@fopen_file
$LN4@fopen_file:

; 81   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00039	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  0003c	83 e2 08	 and	 edx, 8
  0003f	74 07		 je	 SHORT $LN5@fopen_file

; 82   :         mode_fopen = "wb";

  00041	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02GMLFBBN@wb?$AA@
$LN5@fopen_file:

; 83   : 
; 84   :     if ((filename!=NULL) && (mode_fopen != NULL))

  00048	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004c	74 1a		 je	 SHORT $LN1@fopen_file
  0004e	83 7d f8 00	 cmp	 DWORD PTR _mode_fopen$[ebp], 0
  00052	74 14		 je	 SHORT $LN1@fopen_file

; 85   :         file = fopen(filename, mode_fopen);

  00054	8b 45 f8	 mov	 eax, DWORD PTR _mode_fopen$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00062	83 c4 08	 add	 esp, 8
  00065	89 45 fc	 mov	 DWORD PTR _file$[ebp], eax
$LN1@fopen_file:

; 86   :     return file;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _file$[ebp]

; 87   : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_fopen_file_func ENDP
PUBLIC	_fill_fopen_filefunc
; Function compile flags: /Odtp
;	COMDAT _fill_fopen_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_fopen_filefunc PROC				; COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :     pzlib_filefunc_def->zopen_file = fopen_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _fopen_file_func

; 170  :     pzlib_filefunc_def->zread_file = fread_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _fread_file_func

; 171  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _fwrite_file_func

; 172  :     pzlib_filefunc_def->ztell_file = ftell_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _ftell_file_func

; 173  :     pzlib_filefunc_def->zseek_file = fseek_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _fseek_file_func

; 174  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _fclose_file_func

; 175  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _ferror_file_func

; 176  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 177  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_fopen_filefunc ENDP
END
