; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_zip_copyright
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
EXTRN	__imp__rand:PROC
EXTRN	__imp__srand:PROC
EXTRN	__imp___time64:PROC
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
_zip_copyright DB ' zip 1.01 Copyright 1998-2004 Gilles Vollant - http://'
	DB	'www.winimage.com/zLibDll', 00H
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
;	COMDAT _ziplocal_SearchCentralDir
_TEXT	SEGMENT
tv89 = -36						; size = 4
_uReadSize$79794 = -32					; size = 4
_uReadPos$79795 = -28					; size = 4
_i$79796 = -24						; size = 4
_buf$ = -20						; size = 4
_uMaxBack$ = -16					; size = 4
_uBackRead$ = -12					; size = 4
_uPosFound$ = -8					; size = 4
_uSizeFile$ = -4					; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_ziplocal_SearchCentralDir PROC				; COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 444  :     unsigned char* buf;
; 445  :     uLong uSizeFile;
; 446  :     uLong uBackRead;
; 447  :     uLong uMaxBack=0xffff; /* maximum size of global comment */

  00006	c7 45 f0 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH

; 448  :     uLong uPosFound=0;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp], 0

; 449  : 
; 450  :     if (ZSEEK(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00014	6a 02		 push	 2
  00016	6a 00		 push	 0
  00018	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0001f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00022	52		 push	 edx
  00023	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00026	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00029	ff d1		 call	 ecx
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN14@ziplocal_S

; 451  :         return 0;

  00032	33 c0		 xor	 eax, eax
  00034	e9 76 01 00 00	 jmp	 $LN15@ziplocal_S
$LN14@ziplocal_S:

; 452  : 
; 453  : 
; 454  :     uSizeFile = ZTELL(*pzlib_filefunc_def,filestream);

  00039	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0003c	52		 push	 edx
  0003d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00040	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00047	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0004a	ff d0		 call	 eax
  0004c	83 c4 08	 add	 esp, 8
  0004f	89 45 fc	 mov	 DWORD PTR _uSizeFile$[ebp], eax

; 455  : 
; 456  :     if (uMaxBack>uSizeFile)

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _uMaxBack$[ebp]
  00055	3b 4d fc	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp]
  00058	76 06		 jbe	 SHORT $LN13@ziplocal_S

; 457  :         uMaxBack = uSizeFile;

  0005a	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  0005d	89 55 f0	 mov	 DWORD PTR _uMaxBack$[ebp], edx
$LN13@ziplocal_S:

; 458  : 
; 459  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00060	68 04 04 00 00	 push	 1028			; 00000404H
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 45 ec	 mov	 DWORD PTR _buf$[ebp], eax

; 460  :     if (buf==NULL)

  00071	83 7d ec 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00075	75 07		 jne	 SHORT $LN12@ziplocal_S

; 461  :         return 0;

  00077	33 c0		 xor	 eax, eax
  00079	e9 31 01 00 00	 jmp	 $LN15@ziplocal_S
$LN12@ziplocal_S:

; 462  : 
; 463  :     uBackRead = 4;

  0007e	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
$LN11@ziplocal_S:

; 464  :     while (uBackRead<uMaxBack)

  00085	8b 45 f4	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  00088	3b 45 f0	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  0008b	0f 83 08 01 00
	00		 jae	 $LN10@ziplocal_S

; 465  :     {
; 466  :         uLong uReadSize,uReadPos ;
; 467  :         int i;
; 468  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00091	8b 4d f4	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  00094	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  0009a	3b 4d f0	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  0009d	76 08		 jbe	 SHORT $LN9@ziplocal_S

; 469  :             uBackRead = uMaxBack;

  0009f	8b 55 f0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  000a2	89 55 f4	 mov	 DWORD PTR _uBackRead$[ebp], edx

; 470  :         else

  000a5	eb 0b		 jmp	 SHORT $LN8@ziplocal_S
$LN9@ziplocal_S:

; 471  :             uBackRead+=BUFREADCOMMENT;

  000a7	8b 45 f4	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000aa	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000af	89 45 f4	 mov	 DWORD PTR _uBackRead$[ebp], eax
$LN8@ziplocal_S:

; 472  :         uReadPos = uSizeFile-uBackRead ;

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  000b5	2b 4d f4	 sub	 ecx, DWORD PTR _uBackRead$[ebp]
  000b8	89 4d e4	 mov	 DWORD PTR _uReadPos$79795[ebp], ecx

; 473  : 
; 474  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 475  :                      (BUFREADCOMMENT+4) : (uSizeFile-uReadPos);

  000bb	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  000be	2b 55 e4	 sub	 edx, DWORD PTR _uReadPos$79795[ebp]
  000c1	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  000c7	76 09		 jbe	 SHORT $LN17@ziplocal_S
  000c9	c7 45 dc 04 04
	00 00		 mov	 DWORD PTR tv89[ebp], 1028 ; 00000404H
  000d0	eb 09		 jmp	 SHORT $LN18@ziplocal_S
$LN17@ziplocal_S:
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  000d5	2b 45 e4	 sub	 eax, DWORD PTR _uReadPos$79795[ebp]
  000d8	89 45 dc	 mov	 DWORD PTR tv89[ebp], eax
$LN18@ziplocal_S:
  000db	8b 4d dc	 mov	 ecx, DWORD PTR tv89[ebp]
  000de	89 4d e0	 mov	 DWORD PTR _uReadSize$79794[ebp], ecx

; 476  :         if (ZSEEK(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000e1	6a 00		 push	 0
  000e3	8b 55 e4	 mov	 edx, DWORD PTR _uReadPos$79795[ebp]
  000e6	52		 push	 edx
  000e7	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000ee	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000f1	52		 push	 edx
  000f2	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  000f5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f8	ff d1		 call	 ecx
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	85 c0		 test	 eax, eax
  000ff	74 05		 je	 SHORT $LN7@ziplocal_S

; 477  :             break;

  00101	e9 93 00 00 00	 jmp	 $LN10@ziplocal_S
$LN7@ziplocal_S:

; 478  : 
; 479  :         if (ZREAD(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00106	8b 55 e0	 mov	 edx, DWORD PTR _uReadSize$79794[ebp]
  00109	52		 push	 edx
  0010a	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00111	51		 push	 ecx
  00112	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00115	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00118	50		 push	 eax
  00119	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0011c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0011f	ff d2		 call	 edx
  00121	83 c4 10	 add	 esp, 16			; 00000010H
  00124	3b 45 e0	 cmp	 eax, DWORD PTR _uReadSize$79794[ebp]
  00127	74 02		 je	 SHORT $LN6@ziplocal_S

; 480  :             break;

  00129	eb 6e		 jmp	 SHORT $LN10@ziplocal_S
$LN6@ziplocal_S:

; 481  : 
; 482  :         for (i=(int)uReadSize-3; (i--)>0;)

  0012b	8b 45 e0	 mov	 eax, DWORD PTR _uReadSize$79794[ebp]
  0012e	83 e8 03	 sub	 eax, 3
  00131	89 45 e8	 mov	 DWORD PTR _i$79796[ebp], eax
$LN5@ziplocal_S:
  00134	8b 4d e8	 mov	 ecx, DWORD PTR _i$79796[ebp]
  00137	8b 55 e8	 mov	 edx, DWORD PTR _i$79796[ebp]
  0013a	83 ea 01	 sub	 edx, 1
  0013d	89 55 e8	 mov	 DWORD PTR _i$79796[ebp], edx
  00140	85 c9		 test	 ecx, ecx
  00142	7e 48		 jle	 SHORT $LN4@ziplocal_S

; 483  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 484  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00144	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  00147	03 45 e8	 add	 eax, DWORD PTR _i$79796[ebp]
  0014a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0014d	83 f9 50	 cmp	 ecx, 80			; 00000050H
  00150	75 38		 jne	 SHORT $LN3@ziplocal_S
  00152	8b 55 ec	 mov	 edx, DWORD PTR _buf$[ebp]
  00155	03 55 e8	 add	 edx, DWORD PTR _i$79796[ebp]
  00158	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0015c	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0015f	75 29		 jne	 SHORT $LN3@ziplocal_S
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _buf$[ebp]
  00164	03 4d e8	 add	 ecx, DWORD PTR _i$79796[ebp]
  00167	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  0016b	83 fa 05	 cmp	 edx, 5
  0016e	75 1a		 jne	 SHORT $LN3@ziplocal_S
  00170	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  00173	03 45 e8	 add	 eax, DWORD PTR _i$79796[ebp]
  00176	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0017a	83 f9 06	 cmp	 ecx, 6
  0017d	75 0b		 jne	 SHORT $LN3@ziplocal_S

; 485  :             {
; 486  :                 uPosFound = uReadPos+i;

  0017f	8b 55 e4	 mov	 edx, DWORD PTR _uReadPos$79795[ebp]
  00182	03 55 e8	 add	 edx, DWORD PTR _i$79796[ebp]
  00185	89 55 f8	 mov	 DWORD PTR _uPosFound$[ebp], edx

; 487  :                 break;

  00188	eb 02		 jmp	 SHORT $LN4@ziplocal_S
$LN3@ziplocal_S:

; 488  :             }

  0018a	eb a8		 jmp	 SHORT $LN5@ziplocal_S
$LN4@ziplocal_S:

; 489  : 
; 490  :         if (uPosFound!=0)

  0018c	83 7d f8 00	 cmp	 DWORD PTR _uPosFound$[ebp], 0
  00190	74 02		 je	 SHORT $LN2@ziplocal_S

; 491  :             break;

  00192	eb 05		 jmp	 SHORT $LN10@ziplocal_S
$LN2@ziplocal_S:

; 492  :     }

  00194	e9 ec fe ff ff	 jmp	 $LN11@ziplocal_S
$LN10@ziplocal_S:

; 493  :     TRYFREE(buf);

  00199	83 7d ec 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0019d	74 0d		 je	 SHORT $LN1@ziplocal_S
  0019f	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  001a2	50		 push	 eax
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001a9	83 c4 04	 add	 esp, 4
$LN1@ziplocal_S:

; 494  :     return uPosFound;

  001ac	8b 45 f8	 mov	 eax, DWORD PTR _uPosFound$[ebp]
$LN15@ziplocal_S:

; 495  : }

  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c3		 ret	 0
_ziplocal_SearchCentralDir ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ziplocal_getByte
_TEXT	SEGMENT
_c$ = -5						; size = 1
_err$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_ziplocal_getByte PROC					; COMDAT

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 345  :     unsigned char c;
; 346  :     int err = (int)ZREAD(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8d 45 fb	 lea	 eax, DWORD PTR _c$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00013	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	ff d2		 call	 edx
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 347  :     if (err==1)

  00025	83 7d fc 01	 cmp	 DWORD PTR _err$[ebp], 1
  00029	75 0f		 jne	 SHORT $LN4@ziplocal_g

; 348  :     {
; 349  :         *pi = (int)c;

  0002b	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _pi$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 350  :         return ZIP_OK;

  00034	33 c0		 xor	 eax, eax
  00036	eb 25		 jmp	 SHORT $LN5@ziplocal_g

; 351  :     }
; 352  :     else

  00038	eb 23		 jmp	 SHORT $LN5@ziplocal_g
$LN4@ziplocal_g:

; 353  :     {
; 354  :         if (ZERROR(*pzlib_filefunc_def,filestream))

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00048	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0004b	ff d0		 call	 eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN2@ziplocal_g

; 355  :             return ZIP_ERRNO;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 04		 jmp	 SHORT $LN5@ziplocal_g

; 356  :         else

  00059	eb 02		 jmp	 SHORT $LN5@ziplocal_g
$LN2@ziplocal_g:

; 357  :             return ZIP_EOF;

  0005b	33 c0		 xor	 eax, eax
$LN5@ziplocal_g:

; 358  :     }
; 359  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_ziplocal_getByte ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ziplocal_TmzDateToDosDate
_TEXT	SEGMENT
_year$ = -4						; size = 4
_ptm$ = 8						; size = 4
_dosDate$ = 12						; size = 4
_ziplocal_TmzDateToDosDate PROC				; COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 322  :     uLong year = (uLong)ptm->tm_year;

  00004	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00007	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000a	89 4d fc	 mov	 DWORD PTR _year$[ebp], ecx

; 323  :     if (year>1980)

  0000d	81 7d fc bc 07
	00 00		 cmp	 DWORD PTR _year$[ebp], 1980 ; 000007bcH
  00014	76 0e		 jbe	 SHORT $LN3@ziplocal_T

; 324  :         year-=1980;

  00016	8b 55 fc	 mov	 edx, DWORD PTR _year$[ebp]
  00019	81 ea bc 07 00
	00		 sub	 edx, 1980		; 000007bcH
  0001f	89 55 fc	 mov	 DWORD PTR _year$[ebp], edx
  00022	eb 0f		 jmp	 SHORT $LN2@ziplocal_T
$LN3@ziplocal_T:

; 325  :     else if (year>80)

  00024	83 7d fc 50	 cmp	 DWORD PTR _year$[ebp], 80 ; 00000050H
  00028	76 09		 jbe	 SHORT $LN2@ziplocal_T

; 326  :         year-=80;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _year$[ebp]
  0002d	83 e8 50	 sub	 eax, 80			; 00000050H
  00030	89 45 fc	 mov	 DWORD PTR _year$[ebp], eax
$LN2@ziplocal_T:

; 327  :     return
; 328  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 329  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	83 c2 01	 add	 edx, 1
  0003c	c1 e2 05	 shl	 edx, 5
  0003f	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  00042	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00045	03 c2		 add	 eax, edx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _year$[ebp]
  0004a	c1 e1 09	 shl	 ecx, 9
  0004d	03 c1		 add	 eax, ecx
  0004f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00052	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  00055	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00057	d1 e9		 shr	 ecx, 1
  00059	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  0005c	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0005f	c1 e2 05	 shl	 edx, 5
  00062	03 ca		 add	 ecx, edx
  00064	8b 55 08	 mov	 edx, DWORD PTR _ptm$[ebp]
  00067	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0006a	c1 e2 0b	 shl	 edx, 11			; 0000000bH
  0006d	03 ca		 add	 ecx, edx
  0006f	0b c1		 or	 eax, ecx

; 330  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_ziplocal_TmzDateToDosDate ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ziplocal_putValue_inmemory
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_n$ = -4						; size = 4
_dest$ = 8						; size = 4
_x$ = 12						; size = 4
_nbByte$ = 16						; size = 4
_ziplocal_putValue_inmemory PROC			; COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 299  :     unsigned char* buf=(unsigned char*)dest;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _buf$[ebp], eax

; 300  :     int n;
; 301  :     for (n = 0; n < nbByte; n++) {

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN7@ziplocal_p
$LN6@ziplocal_p:
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00018	83 c1 01	 add	 ecx, 1
  0001b	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN7@ziplocal_p:
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00021	3b 55 10	 cmp	 edx, DWORD PTR _nbByte$[ebp]
  00024	7d 1b		 jge	 SHORT $LN5@ziplocal_p

; 302  :         buf[n] = (unsigned char)(x & 0xff);

  00026	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00029	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _buf$[ebp]
  00031	03 4d fc	 add	 ecx, DWORD PTR _n$[ebp]
  00034	88 01		 mov	 BYTE PTR [ecx], al

; 303  :         x >>= 8;

  00036	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00039	c1 ea 08	 shr	 edx, 8
  0003c	89 55 0c	 mov	 DWORD PTR _x$[ebp], edx

; 304  :     }

  0003f	eb d4		 jmp	 SHORT $LN6@ziplocal_p
$LN5@ziplocal_p:

; 305  : 
; 306  :     if (x != 0)

  00041	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  00045	74 25		 je	 SHORT $LN8@ziplocal_p

; 307  :     {     /* data overflow - hack for ZIP64 */
; 308  :        for (n = 0; n < nbByte; n++)

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0004e	eb 09		 jmp	 SHORT $LN3@ziplocal_p
$LN2@ziplocal_p:
  00050	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00053	83 c0 01	 add	 eax, 1
  00056	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN3@ziplocal_p:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0005c	3b 4d 10	 cmp	 ecx, DWORD PTR _nbByte$[ebp]
  0005f	7d 0b		 jge	 SHORT $LN8@ziplocal_p

; 309  :        {
; 310  :           buf[n] = 0xff;

  00061	8b 55 f8	 mov	 edx, DWORD PTR _buf$[ebp]
  00064	03 55 fc	 add	 edx, DWORD PTR _n$[ebp]
  00067	c6 02 ff	 mov	 BYTE PTR [edx], 255	; 000000ffH

; 311  :        }

  0006a	eb e4		 jmp	 SHORT $LN2@ziplocal_p
$LN8@ziplocal_p:

; 312  :     }
; 313  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_ziplocal_putValue_inmemory ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ziplocal_putValue
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_n$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_x$ = 16						; size = 4
_nbByte$ = 20						; size = 4
_ziplocal_putValue PROC					; COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 272  :     unsigned char buf[4];
; 273  :     int n;
; 274  :     for (n = 0; n < nbByte; n++)

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN9@ziplocal_p@2
$LN8@ziplocal_p@2:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN9@ziplocal_p@2:
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0001b	3b 4d 14	 cmp	 ecx, DWORD PTR _nbByte$[ebp]
  0001e	7d 1b		 jge	 SHORT $LN7@ziplocal_p@2

; 275  :     {
; 276  :         buf[n] = (unsigned char)(x & 0xff);

  00020	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00023	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00029	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0002c	88 54 05 f8	 mov	 BYTE PTR _buf$[ebp+eax], dl

; 277  :         x >>= 8;

  00030	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00033	c1 e9 08	 shr	 ecx, 8
  00036	89 4d 10	 mov	 DWORD PTR _x$[ebp], ecx

; 278  :     }

  00039	eb d4		 jmp	 SHORT $LN8@ziplocal_p@2
$LN7@ziplocal_p@2:

; 279  :     if (x != 0)

  0003b	83 7d 10 00	 cmp	 DWORD PTR _x$[ebp], 0
  0003f	74 24		 je	 SHORT $LN6@ziplocal_p@2

; 280  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 281  :       for (n = 0; n < nbByte; n++)

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN5@ziplocal_p@2
$LN4@ziplocal_p@2:
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx
$LN5@ziplocal_p@2:
  00053	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00056	3b 45 14	 cmp	 eax, DWORD PTR _nbByte$[ebp]
  00059	7d 0a		 jge	 SHORT $LN6@ziplocal_p@2

; 282  :         {
; 283  :           buf[n] = 0xff;

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0005e	c6 44 0d f8 ff	 mov	 BYTE PTR _buf$[ebp+ecx], 255 ; 000000ffH

; 284  :         }

  00063	eb e5		 jmp	 SHORT $LN4@ziplocal_p@2
$LN6@ziplocal_p@2:

; 285  :       }
; 286  : 
; 287  :     if (ZWRITE(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00065	8b 55 14	 mov	 edx, DWORD PTR _nbByte$[ebp]
  00068	52		 push	 edx
  00069	8d 45 f8	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00074	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00077	50		 push	 eax
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0007b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0007e	ff d2		 call	 edx
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	3b 45 14	 cmp	 eax, DWORD PTR _nbByte$[ebp]
  00086	74 07		 je	 SHORT $LN2@ziplocal_p@2

; 288  :         return ZIP_ERRNO;

  00088	83 c8 ff	 or	 eax, -1
  0008b	eb 04		 jmp	 SHORT $LN10@ziplocal_p@2

; 289  :     else

  0008d	eb 02		 jmp	 SHORT $LN10@ziplocal_p@2
$LN2@ziplocal_p@2:

; 290  :         return ZIP_OK;

  0008f	33 c0		 xor	 eax, eax
$LN10@ziplocal_p@2:

; 291  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
_ziplocal_putValue ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _init_linkedlist
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_init_linkedlist PROC					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     ll->first_block = ll->last_block = NULL;

  00003	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  00010	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 190  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_init_linkedlist ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _free_datablock
_TEXT	SEGMENT
_ldinext$79602 = -4					; size = 4
_ldi$ = 8						; size = 4
_free_datablock PROC					; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN3@free_datab:

; 178  :     while (ldi!=NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00008	74 23		 je	 SHORT $LN4@free_datab

; 179  :     {
; 180  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _ldi$[ebp]
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	89 4d fc	 mov	 DWORD PTR _ldinext$79602[ebp], ecx

; 181  :         TRYFREE(ldi);

  00012	83 7d 08 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00016	74 0d		 je	 SHORT $LN1@free_datab
  00018	8b 55 08	 mov	 edx, DWORD PTR _ldi$[ebp]
  0001b	52		 push	 edx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00022	83 c4 04	 add	 esp, 4
$LN1@free_datab:

; 182  :         ldi = ldinext;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ldinext$79602[ebp]
  00028	89 45 08	 mov	 DWORD PTR _ldi$[ebp], eax

; 183  :     }

  0002b	eb d7		 jmp	 SHORT $LN3@free_datab
$LN4@free_datab:

; 184  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_free_datablock ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _allocate_new_datablock
_TEXT	SEGMENT
_ldi$ = -4						; size = 4
_allocate_new_datablock PROC				; COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 163  :     linkedlist_datablock_internal* ldi;
; 164  :     ldi = (linkedlist_datablock_internal*)
; 165  :                  ALLOC(sizeof(linkedlist_datablock_internal));

  00004	68 00 10 00 00	 push	 4096			; 00001000H
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0000f	83 c4 04	 add	 esp, 4
  00012	89 45 fc	 mov	 DWORD PTR _ldi$[ebp], eax

; 166  :     if (ldi!=NULL)

  00015	83 7d fc 00	 cmp	 DWORD PTR _ldi$[ebp], 0
  00019	74 1d		 je	 SHORT $LN1@allocate_n

; 167  :     {
; 168  :         ldi->next_datablock = NULL ;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 169  :         ldi->filled_in_this_block = 0 ;

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00027	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 170  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0002e	8b 55 fc	 mov	 edx, DWORD PTR _ldi$[ebp]
  00031	c7 42 04 f0 0f
	00 00		 mov	 DWORD PTR [edx+4], 4080	; 00000ff0H
$LN1@allocate_n:

; 171  :     }
; 172  :     return ldi;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _ldi$[ebp]

; 173  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_allocate_new_datablock ENDP
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _update_keys
_TEXT	SEGMENT
_keyshift$79540 = -4					; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_c$ = 16						; size = 4
_update_keys PROC					; COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00004	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	33 4d 10	 xor	 ecx, DWORD PTR _c$[ebp]
  0000c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00012	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	c1 e8 08	 shr	 eax, 8
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0001d	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00025	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00032	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00035	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00038	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	69 c9 05 84 08
	08		 imul	 ecx, 134775813		; 08088405H
  00047	83 c1 01	 add	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0004d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00050	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00059	89 4d fc	 mov	 DWORD PTR _keyshift$79540[ebp], ecx

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0005c	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0005f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00062	33 45 fc	 xor	 eax, DWORD PTR _keyshift$79540[ebp]
  00065	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0006d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00070	c1 ea 08	 shr	 edx, 8
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00076	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  00079	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0007c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 56   :     }
; 57   :     return c;

  0007f	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]

; 58   : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_update_keys ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_decrypt_byte PROC					; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00007	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00010	83 c9 02	 or	 ecx, 2
  00013	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00016	8b 55 fc	 mov	 edx, DWORD PTR _temp$[ebp]
  00019	83 f2 01	 xor	 edx, 1
  0001c	8b c2		 mov	 eax, edx
  0001e	0f af 45 fc	 imul	 eax, DWORD PTR _temp$[ebp]
  00022	c1 e8 08	 shr	 eax, 8
  00025	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_decrypt_byte ENDP
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\time.inl
_TEXT	ENDS
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     return _time64(_Time);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0000d	83 c4 04	 add	 esp, 4

; 136  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_time	ENDP
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
;	COMDAT _zipFlushWriteBuffer
_TEXT	SEGMENT
_t$80043 = -12						; size = 4
_i$80042 = -8						; size = 4
_err$ = -4						; size = 4
_zi$ = 8						; size = 4
_zipFlushWriteBuffer PROC				; COMDAT

; 946  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 947  :     int err=ZIP_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 948  : 
; 949  :     if (zi->ci.encrypt != 0)

  0000d	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00010	83 b8 90 40 00
	00 00		 cmp	 DWORD PTR [eax+16528], 0
  00017	0f 84 83 00 00
	00		 je	 $LN5@zipFlushWr

; 950  :     {
; 951  : #ifndef NOCRYPT
; 952  :         uInt i;
; 953  :         int t;
; 954  :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$80042[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@zipFlushWr
$LN3@zipFlushWr:
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _i$80042[ebp]
  00029	83 c1 01	 add	 ecx, 1
  0002c	89 4d f8	 mov	 DWORD PTR _i$80042[ebp], ecx
$LN4@zipFlushWr:
  0002f	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00032	8b 45 f8	 mov	 eax, DWORD PTR _i$80042[ebp]
  00035	3b 42 6c	 cmp	 eax, DWORD PTR [edx+108]
  00038	73 66		 jae	 SHORT $LN5@zipFlushWr

; 955  :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab,
; 956  :                                        zi->ci.buffered_data[i],t);

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0003d	8b 91 a0 40 00
	00		 mov	 edx, DWORD PTR [ecx+16544]
  00043	52		 push	 edx
  00044	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00047	05 94 40 00 00	 add	 eax, 16532		; 00004094H
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _decrypt_byte
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 f4	 mov	 DWORD PTR _t$80043[ebp], eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  0005b	03 4d f8	 add	 ecx, DWORD PTR _i$80042[ebp]
  0005e	0f b6 91 88 00
	00 00		 movzx	 edx, BYTE PTR [ecx+136]
  00065	52		 push	 edx
  00066	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00069	8b 88 a0 40 00
	00		 mov	 ecx, DWORD PTR [eax+16544]
  0006f	51		 push	 ecx
  00070	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00073	81 c2 94 40 00
	00		 add	 edx, 16532		; 00004094H
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 _update_keys
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  00085	03 45 f8	 add	 eax, DWORD PTR _i$80042[ebp]
  00088	0f b6 88 88 00
	00 00		 movzx	 ecx, BYTE PTR [eax+136]
  0008f	33 4d f4	 xor	 ecx, DWORD PTR _t$80043[ebp]
  00092	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  00095	03 55 f8	 add	 edx, DWORD PTR _i$80042[ebp]
  00098	88 8a 88 00 00
	00		 mov	 BYTE PTR [edx+136], cl
  0009e	eb 86		 jmp	 SHORT $LN3@zipFlushWr
$LN5@zipFlushWr:

; 957  : #endif
; 958  :     }
; 959  :     if (ZWRITE(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data)
; 960  :                                                                     !=zi->ci.pos_in_buffered_data)

  000a0	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000a3	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000a6	51		 push	 ecx
  000a7	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000aa	81 c2 88 00 00
	00		 add	 edx, 136		; 00000088H
  000b0	52		 push	 edx
  000b1	8b 45 08	 mov	 eax, DWORD PTR _zi$[ebp]
  000b4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000b7	51		 push	 ecx
  000b8	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000bb	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000be	50		 push	 eax
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000c2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c5	ff d2		 call	 edx
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _zi$[ebp]
  000cd	3b 41 6c	 cmp	 eax, DWORD PTR [ecx+108]
  000d0	74 07		 je	 SHORT $LN1@zipFlushWr

; 961  :       err = ZIP_ERRNO;

  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN1@zipFlushWr:

; 962  :     zi->ci.pos_in_buffered_data = 0;

  000d9	8b 55 08	 mov	 edx, DWORD PTR _zi$[ebp]
  000dc	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 963  :     return err;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]

; 964  : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_zipFlushWriteBuffer ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ziplocal_getLong
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_ziplocal_getLong PROC					; COMDAT

; 402  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 403  :     uLong x ;
; 404  :     int i;
; 405  :     int err;
; 406  : 
; 407  :     err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00011	52		 push	 edx
  00012	e8 00 00 00 00	 call	 _ziplocal_getByte
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 408  :     x = (uLong)i;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 409  : 
; 410  :     if (err==ZIP_OK)

  00023	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00027	75 17		 jne	 SHORT $LN5@ziplocal_g@2

; 411  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _ziplocal_getByte
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN5@ziplocal_g@2:

; 412  :     x += ((uLong)i)<<8;

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00049	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 413  : 
; 414  :     if (err==ZIP_OK)

  0004c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00050	75 17		 jne	 SHORT $LN4@ziplocal_g@2

; 415  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00052	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  00055	52		 push	 edx
  00056	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _ziplocal_getByte
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN4@ziplocal_g@2:

; 416  :     x += ((uLong)i)<<16;

  00069	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0006c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0006f	03 55 fc	 add	 edx, DWORD PTR _x$[ebp]
  00072	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 417  : 
; 418  :     if (err==ZIP_OK)

  00075	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00079	75 17		 jne	 SHORT $LN3@ziplocal_g@2

; 419  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  0007b	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _ziplocal_getByte
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@ziplocal_g@2:

; 420  :     x += ((uLong)i)<<24;

  00092	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00095	c1 e0 18	 shl	 eax, 24			; 00000018H
  00098	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  0009b	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 421  : 
; 422  :     if (err==ZIP_OK)

  0009e	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000a2	75 0a		 jne	 SHORT $LN2@ziplocal_g@2

; 423  :         *pX = x;

  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000aa	89 11		 mov	 DWORD PTR [ecx], edx

; 424  :     else

  000ac	eb 09		 jmp	 SHORT $LN1@ziplocal_g@2
$LN2@ziplocal_g@2:

; 425  :         *pX = 0;

  000ae	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  000b1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@ziplocal_g@2:

; 426  :     return err;

  000b7	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 427  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_ziplocal_getLong ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ziplocal_getShort
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_ziplocal_getShort PROC					; COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 375  :     uLong x ;
; 376  :     int i;
; 377  :     int err;
; 378  : 
; 379  :     err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00011	52		 push	 edx
  00012	e8 00 00 00 00	 call	 _ziplocal_getByte
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 380  :     x = (uLong)i;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  00023	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00027	75 17		 jne	 SHORT $LN3@ziplocal_g@3

; 383  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _ziplocal_getByte
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@ziplocal_g@3:

; 384  :     x += ((uLong)i)<<8;

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00049	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 385  : 
; 386  :     if (err==ZIP_OK)

  0004c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00050	75 0a		 jne	 SHORT $LN2@ziplocal_g@3

; 387  :         *pX = x;

  00052	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00058	89 02		 mov	 DWORD PTR [edx], eax

; 388  :     else

  0005a	eb 09		 jmp	 SHORT $LN1@ziplocal_g@3
$LN2@ziplocal_g@3:

; 389  :         *pX = 0;

  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  0005f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@ziplocal_g@3:

; 390  :     return err;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 391  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_ziplocal_getShort ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _add_data_in_datablock
_TEXT	SEGMENT
_i$79633 = -20						; size = 4
_to_copy$79634 = -16					; size = 4
_copy_this$79632 = -12					; size = 4
_ldi$ = -8						; size = 4
_from_copy$ = -4					; size = 4
_ll$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_add_data_in_datablock PROC				; COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 205  :     linkedlist_datablock_internal* ldi;
; 206  :     const unsigned char* from_copy;
; 207  : 
; 208  :     if (ll==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _ll$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN12@add_data_i

; 209  :         return ZIP_INTERNALERROR;

  0000c	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00011	e9 0f 01 00 00	 jmp	 $LN13@add_data_i
$LN12@add_data_i:

; 210  : 
; 211  :     if (ll->last_block == NULL)

  00016	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00019	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001d	75 28		 jne	 SHORT $LN11@add_data_i

; 212  :     {
; 213  :         ll->first_block = ll->last_block = allocate_new_datablock();

  0001f	e8 00 00 00 00	 call	 _allocate_new_datablock
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _ll$[ebp]
  00027	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002a	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  0002d	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	89 0a		 mov	 DWORD PTR [edx], ecx

; 214  :         if (ll->first_block == NULL)

  00035	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  00038	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0003b	75 0a		 jne	 SHORT $LN11@add_data_i

; 215  :             return ZIP_INTERNALERROR;

  0003d	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00042	e9 de 00 00 00	 jmp	 $LN13@add_data_i
$LN11@add_data_i:

; 216  :     }
; 217  : 
; 218  :     ldi = ll->last_block;

  00047	8b 45 08	 mov	 eax, DWORD PTR _ll$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	89 4d f8	 mov	 DWORD PTR _ldi$[ebp], ecx

; 219  :     from_copy = (unsigned char*)buf;

  00050	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00053	89 55 fc	 mov	 DWORD PTR _from_copy$[ebp], edx
$LN9@add_data_i:

; 220  : 
; 221  :     while (len>0)

  00056	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0005a	0f 86 c3 00 00
	00		 jbe	 $LN8@add_data_i

; 222  :     {
; 223  :         uInt copy_this;
; 224  :         uInt i;
; 225  :         unsigned char* to_copy;
; 226  : 
; 227  :         if (ldi->avail_in_this_block==0)

  00060	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00063	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00067	75 2d		 jne	 SHORT $LN7@add_data_i

; 228  :         {
; 229  :             ldi->next_datablock = allocate_new_datablock();

  00069	e8 00 00 00 00	 call	 _allocate_new_datablock
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00071	89 01		 mov	 DWORD PTR [ecx], eax

; 230  :             if (ldi->next_datablock == NULL)

  00073	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  00076	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00079	75 0a		 jne	 SHORT $LN6@add_data_i

; 231  :                 return ZIP_INTERNALERROR;

  0007b	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00080	e9 a0 00 00 00	 jmp	 $LN13@add_data_i
$LN6@add_data_i:

; 232  :             ldi = ldi->next_datablock ;

  00085	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	89 4d f8	 mov	 DWORD PTR _ldi$[ebp], ecx

; 233  :             ll->last_block = ldi;

  0008d	8b 55 08	 mov	 edx, DWORD PTR _ll$[ebp]
  00090	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00093	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN7@add_data_i:

; 234  :         }
; 235  : 
; 236  :         if (ldi->avail_in_this_block < len)

  00096	8b 4d f8	 mov	 ecx, DWORD PTR _ldi$[ebp]
  00099	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0009c	3b 55 10	 cmp	 edx, DWORD PTR _len$[ebp]
  0009f	73 0b		 jae	 SHORT $LN5@add_data_i

; 237  :             copy_this = (uInt)ldi->avail_in_this_block;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  000a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a7	89 4d f4	 mov	 DWORD PTR _copy_this$79632[ebp], ecx

; 238  :         else

  000aa	eb 06		 jmp	 SHORT $LN4@add_data_i
$LN5@add_data_i:

; 239  :             copy_this = (uInt)len;

  000ac	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  000af	89 55 f4	 mov	 DWORD PTR _copy_this$79632[ebp], edx
$LN4@add_data_i:

; 240  : 
; 241  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  000b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b8	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  000bb	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  000bf	89 45 f0	 mov	 DWORD PTR _to_copy$79634[ebp], eax

; 242  : 
; 243  :         for (i=0;i<copy_this;i++)

  000c2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$79633[ebp], 0
  000c9	eb 09		 jmp	 SHORT $LN3@add_data_i
$LN2@add_data_i:
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _i$79633[ebp]
  000ce	83 c1 01	 add	 ecx, 1
  000d1	89 4d ec	 mov	 DWORD PTR _i$79633[ebp], ecx
$LN3@add_data_i:
  000d4	8b 55 ec	 mov	 edx, DWORD PTR _i$79633[ebp]
  000d7	3b 55 f4	 cmp	 edx, DWORD PTR _copy_this$79632[ebp]
  000da	73 12		 jae	 SHORT $LN1@add_data_i

; 244  :             *(to_copy+i)=*(from_copy+i);

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _to_copy$79634[ebp]
  000df	03 45 ec	 add	 eax, DWORD PTR _i$79633[ebp]
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _from_copy$[ebp]
  000e5	03 4d ec	 add	 ecx, DWORD PTR _i$79633[ebp]
  000e8	8a 11		 mov	 dl, BYTE PTR [ecx]
  000ea	88 10		 mov	 BYTE PTR [eax], dl
  000ec	eb dd		 jmp	 SHORT $LN2@add_data_i
$LN1@add_data_i:

; 245  : 
; 246  :         ldi->filled_in_this_block += copy_this;

  000ee	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  000f1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f4	03 4d f4	 add	 ecx, DWORD PTR _copy_this$79632[ebp]
  000f7	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  000fa	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 247  :         ldi->avail_in_this_block -= copy_this;

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _ldi$[ebp]
  00100	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00103	2b 4d f4	 sub	 ecx, DWORD PTR _copy_this$79632[ebp]
  00106	8b 55 f8	 mov	 edx, DWORD PTR _ldi$[ebp]
  00109	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 248  :         from_copy += copy_this ;

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _from_copy$[ebp]
  0010f	03 45 f4	 add	 eax, DWORD PTR _copy_this$79632[ebp]
  00112	89 45 fc	 mov	 DWORD PTR _from_copy$[ebp], eax

; 249  :         len -= copy_this;

  00115	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00118	2b 4d f4	 sub	 ecx, DWORD PTR _copy_this$79632[ebp]
  0011b	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx

; 250  :     }

  0011e	e9 33 ff ff ff	 jmp	 $LN9@add_data_i
$LN8@add_data_i:

; 251  :     return ZIP_OK;

  00123	33 c0		 xor	 eax, eax
$LN13@add_data_i:

; 252  : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
_add_data_in_datablock ENDP
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _init_keys
_TEXT	SEGMENT
_passwd$ = 8						; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_init_keys PROC						; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     *(pkeys+0) = 305419896L;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00006	c7 00 78 56 34
	12		 mov	 DWORD PTR [eax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0000f	c7 41 04 89 67
	45 23		 mov	 DWORD PTR [ecx+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  00016	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00019	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [edx+8], 878082192 ; 34567890H
$LN2@init_keys:

; 70   :     while (*passwd != '\0') {

  00020	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00023	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00026	85 c9		 test	 ecx, ecx
  00028	74 22		 je	 SHORT $LN3@init_keys

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  0002a	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  0002d	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00030	50		 push	 eax
  00031	8b 4d 10	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _update_keys
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   :         passwd++;

  00041	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 08	 mov	 DWORD PTR _passwd$[ebp], eax

; 73   :     }

  0004a	eb d4		 jmp	 SHORT $LN2@init_keys
$LN3@init_keys:

; 74   : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_init_keys ENDP
PUBLIC	_zipCloseFileInZipRaw@12
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw@12
_TEXT	SEGMENT
_cur_pos_inzip$80114 = -20				; size = 4
_uTotalOutBefore$80096 = -16				; size = 4
_zi$ = -12						; size = 4
_err$ = -8						; size = 4
_compressed_size$ = -4					; size = 4
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 4
_crc32$ = 16						; size = 4
_zipCloseFileInZipRaw@12 PROC				; COMDAT

; 1035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1036 :     zip_internal* zi;
; 1037 :     uLong compressed_size;
; 1038 :     int err=ZIP_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1039 : 
; 1040 :     if (file == NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 0a		 jne	 SHORT $LN20@zipCloseFi

; 1041 :         return ZIP_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	e9 ef 02 00 00	 jmp	 $LN21@zipCloseFi
$LN20@zipCloseFi:

; 1042 :     zi = (zip_internal*)file;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00020	89 45 f4	 mov	 DWORD PTR _zi$[ebp], eax

; 1043 : 
; 1044 :     if (zi->in_opened_file_inzip == 0)

  00023	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  00026	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  0002a	75 0a		 jne	 SHORT $LN19@zipCloseFi

; 1045 :         return ZIP_PARAMERROR;

  0002c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00031	e9 d6 02 00 00	 jmp	 $LN21@zipCloseFi
$LN19@zipCloseFi:

; 1046 :     zi->ci.stream.avail_in = 0;

  00036	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00039	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0

; 1047 : 
; 1048 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00040	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00043	83 b8 80 00 00
	00 08		 cmp	 DWORD PTR [eax+128], 8
  0004a	75 7d		 jne	 SHORT $LN18@zipCloseFi
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  0004f	83 b9 84 00 00
	00 00		 cmp	 DWORD PTR [ecx+132], 0
  00056	75 71		 jne	 SHORT $LN18@zipCloseFi
$LN17@zipCloseFi:

; 1049 :         while (err==ZIP_OK)

  00058	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0005c	75 6b		 jne	 SHORT $LN18@zipCloseFi

; 1050 :     {
; 1051 :         uLong uTotalOutBefore;
; 1052 :         if (zi->ci.stream.avail_out == 0)

  0005e	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00061	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00065	75 31		 jne	 SHORT $LN15@zipCloseFi

; 1053 :         {
; 1054 :             if (zipFlushWriteBuffer(zi) == ZIP_ERRNO)

  00067	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _zipFlushWriteBuffer
  00070	83 c4 04	 add	 esp, 4
  00073	83 f8 ff	 cmp	 eax, -1
  00076	75 07		 jne	 SHORT $LN14@zipCloseFi

; 1055 :                 err = ZIP_ERRNO;

  00078	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@zipCloseFi:

; 1056 :             zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  00082	c7 41 40 00 40
	00 00		 mov	 DWORD PTR [ecx+64], 16384 ; 00004000H

; 1057 :             zi->ci.stream.next_out = zi->ci.buffered_data;

  00089	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  0008c	81 c2 88 00 00
	00		 add	 edx, 136		; 00000088H
  00092	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00095	89 50 3c	 mov	 DWORD PTR [eax+60], edx
$LN15@zipCloseFi:

; 1058 :         }
; 1059 :         uTotalOutBefore = zi->ci.stream.total_out;

  00098	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  0009b	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0009e	89 55 f0	 mov	 DWORD PTR _uTotalOutBefore$80096[ebp], edx

; 1060 :         err=deflate(&zi->ci.stream,  Z_FINISH);

  000a1	6a 04		 push	 4
  000a3	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  000a6	83 c0 30	 add	 eax, 48			; 00000030H
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _deflate@8
  000af	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1061 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  000b5	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000b8	2b 55 f0	 sub	 edx, DWORD PTR _uTotalOutBefore$80096[ebp]
  000bb	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  000be	03 50 6c	 add	 edx, DWORD PTR [eax+108]
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  000c4	89 51 6c	 mov	 DWORD PTR [ecx+108], edx

; 1062 :     }

  000c7	eb 8f		 jmp	 SHORT $LN17@zipCloseFi
$LN18@zipCloseFi:

; 1063 : 
; 1064 :     if (err==Z_STREAM_END)

  000c9	83 7d f8 01	 cmp	 DWORD PTR _err$[ebp], 1
  000cd	75 07		 jne	 SHORT $LN13@zipCloseFi

; 1065 :         err=ZIP_OK; /* this is normal */

  000cf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0
$LN13@zipCloseFi:

; 1066 : 
; 1067 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  000d6	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  000d9	83 7a 6c 00	 cmp	 DWORD PTR [edx+108], 0
  000dd	76 1e		 jbe	 SHORT $LN12@zipCloseFi
  000df	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000e3	75 18		 jne	 SHORT $LN12@zipCloseFi

; 1068 :         if (zipFlushWriteBuffer(zi)==ZIP_ERRNO)

  000e5	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _zipFlushWriteBuffer
  000ee	83 c4 04	 add	 esp, 4
  000f1	83 f8 ff	 cmp	 eax, -1
  000f4	75 07		 jne	 SHORT $LN12@zipCloseFi

; 1069 :             err = ZIP_ERRNO;

  000f6	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@zipCloseFi:

; 1070 : 
; 1071 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  00100	83 b9 80 00 00
	00 08		 cmp	 DWORD PTR [ecx+128], 8
  00107	75 25		 jne	 SHORT $LN10@zipCloseFi
  00109	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  0010c	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  00113	75 19		 jne	 SHORT $LN10@zipCloseFi

; 1072 :     {
; 1073 :         err=deflateEnd(&zi->ci.stream);

  00115	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00118	83 c0 30	 add	 eax, 48			; 00000030H
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _deflateEnd@4
  00121	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 1074 :         zi->ci.stream_initialised = 0;

  00124	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  00127	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0
$LN10@zipCloseFi:

; 1075 :     }
; 1076 : 
; 1077 :     if (!zi->ci.raw)

  0012e	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00131	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  00138	75 15		 jne	 SHORT $LN9@zipCloseFi

; 1078 :     {
; 1079 :         crc32 = (uLong)zi->ci.crc32;

  0013a	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  0013d	8b 88 8c 40 00
	00		 mov	 ecx, DWORD PTR [eax+16524]
  00143	89 4d 10	 mov	 DWORD PTR _crc32$[ebp], ecx

; 1080 :         uncompressed_size = (uLong)zi->ci.stream.total_in;

  00146	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00149	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0014c	89 45 0c	 mov	 DWORD PTR _uncompressed_size$[ebp], eax
$LN9@zipCloseFi:

; 1081 :     }
; 1082 :     compressed_size = (uLong)zi->ci.stream.total_out;

  0014f	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  00152	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00155	89 55 fc	 mov	 DWORD PTR _compressed_size$[ebp], edx

; 1083 : #    ifndef NOCRYPT
; 1084 :     compressed_size += zi->ci.crypt_header_size;

  00158	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _compressed_size$[ebp]
  0015e	03 88 a4 40 00
	00		 add	 ecx, DWORD PTR [eax+16548]
  00164	89 4d fc	 mov	 DWORD PTR _compressed_size$[ebp], ecx

; 1085 : #    endif
; 1086 : 
; 1087 :     ziplocal_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  00167	6a 04		 push	 4
  00169	8b 55 10	 mov	 edx, DWORD PTR _crc32$[ebp]
  0016c	52		 push	 edx
  0016d	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00170	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00173	83 c1 10	 add	 ecx, 16			; 00000010H
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1088 :     ziplocal_putValue_inmemory(zi->ci.central_header+20,
; 1089 :                                 compressed_size,4); /*compr size*/

  0017f	6a 04		 push	 4
  00181	8b 55 fc	 mov	 edx, DWORD PTR _compressed_size$[ebp]
  00184	52		 push	 edx
  00185	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00188	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0018b	83 c1 14	 add	 ecx, 20			; 00000014H
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1090 :     if (zi->ci.stream.data_type == Z_ASCII)

  00197	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  0019a	83 7a 5c 01	 cmp	 DWORD PTR [edx+92], 1
  0019e	75 16		 jne	 SHORT $LN8@zipCloseFi

; 1091 :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001a0	6a 02		 push	 2
  001a2	6a 01		 push	 1
  001a4	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  001a7	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001aa	83 c1 24	 add	 ecx, 36			; 00000024H
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@zipCloseFi:

; 1092 :     ziplocal_putValue_inmemory(zi->ci.central_header+24,
; 1093 :                                 uncompressed_size,4); /*uncompr size*/

  001b6	6a 04		 push	 4
  001b8	8b 55 0c	 mov	 edx, DWORD PTR _uncompressed_size$[ebp]
  001bb	52		 push	 edx
  001bc	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  001bf	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001c2	83 c1 18	 add	 ecx, 24			; 00000018H
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  001cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1094 : 
; 1095 :     if (err==ZIP_OK)

  001ce	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  001d2	75 20		 jne	 SHORT $LN7@zipCloseFi

; 1096 :         err = add_data_in_datablock(&zi->central_dir,zi->ci.central_header,
; 1097 :                                        (uLong)zi->ci.size_centralheader);

  001d4	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  001d7	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  001da	50		 push	 eax
  001db	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  001de	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  001e1	52		 push	 edx
  001e2	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  001e5	83 c0 24	 add	 eax, 36			; 00000024H
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 _add_data_in_datablock
  001ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f1	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN7@zipCloseFi:

; 1098 :     free(zi->ci.central_header);

  001f4	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  001f7	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  001fa	52		 push	 edx
  001fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00201	83 c4 04	 add	 esp, 4

; 1099 : 
; 1100 :     if (err==ZIP_OK)

  00204	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00208	0f 85 dc 00 00
	00		 jne	 $LN6@zipCloseFi

; 1101 :     {
; 1102 :         long cur_pos_inzip = ZTELL(zi->z_filefunc,zi->filestream);

  0020e	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00211	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00214	51		 push	 ecx
  00215	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00218	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0021b	50		 push	 eax
  0021c	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  0021f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00222	ff d2		 call	 edx
  00224	83 c4 08	 add	 esp, 8
  00227	89 45 ec	 mov	 DWORD PTR _cur_pos_inzip$80114[ebp], eax

; 1103 :         if (ZSEEK(zi->z_filefunc,zi->filestream,
; 1104 :                   zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0022a	6a 00		 push	 0
  0022c	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  0022f	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00232	83 c1 0e	 add	 ecx, 14			; 0000000eH
  00235	51		 push	 ecx
  00236	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00239	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0023c	50		 push	 eax
  0023d	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  00240	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00243	52		 push	 edx
  00244	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00247	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0024a	ff d1		 call	 ecx
  0024c	83 c4 10	 add	 esp, 16			; 00000010H
  0024f	85 c0		 test	 eax, eax
  00251	74 07		 je	 SHORT $LN5@zipCloseFi

; 1105 :             err = ZIP_ERRNO;

  00253	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@zipCloseFi:

; 1106 : 
; 1107 :         if (err==ZIP_OK)

  0025a	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  0025e	75 1c		 jne	 SHORT $LN4@zipCloseFi

; 1108 :             err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  00260	6a 04		 push	 4
  00262	8b 55 10	 mov	 edx, DWORD PTR _crc32$[ebp]
  00265	52		 push	 edx
  00266	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00269	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0026c	51		 push	 ecx
  0026d	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 _ziplocal_putValue
  00276	83 c4 10	 add	 esp, 16			; 00000010H
  00279	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN4@zipCloseFi:

; 1109 : 
; 1110 :         if (err==ZIP_OK) /* compressed size, unknown */

  0027c	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00280	75 1c		 jne	 SHORT $LN3@zipCloseFi

; 1111 :             err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  00282	6a 04		 push	 4
  00284	8b 45 fc	 mov	 eax, DWORD PTR _compressed_size$[ebp]
  00287	50		 push	 eax
  00288	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  0028b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0028e	52		 push	 edx
  0028f	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 _ziplocal_putValue
  00298	83 c4 10	 add	 esp, 16			; 00000010H
  0029b	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN3@zipCloseFi:

; 1112 : 
; 1113 :         if (err==ZIP_OK) /* uncompressed size, unknown */

  0029e	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  002a2	75 1c		 jne	 SHORT $LN2@zipCloseFi

; 1114 :             err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  002a4	6a 04		 push	 4
  002a6	8b 4d 0c	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp]
  002a9	51		 push	 ecx
  002aa	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  002ad	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  002b0	50		 push	 eax
  002b1	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 _ziplocal_putValue
  002ba	83 c4 10	 add	 esp, 16			; 00000010H
  002bd	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax
$LN2@zipCloseFi:

; 1115 : 
; 1116 :         if (ZSEEK(zi->z_filefunc,zi->filestream,
; 1117 :                   cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  002c0	6a 00		 push	 0
  002c2	8b 55 ec	 mov	 edx, DWORD PTR _cur_pos_inzip$80114[ebp]
  002c5	52		 push	 edx
  002c6	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  002c9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002cc	51		 push	 ecx
  002cd	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  002d0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002d3	50		 push	 eax
  002d4	8b 4d f4	 mov	 ecx, DWORD PTR _zi$[ebp]
  002d7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002da	ff d2		 call	 edx
  002dc	83 c4 10	 add	 esp, 16			; 00000010H
  002df	85 c0		 test	 eax, eax
  002e1	74 07		 je	 SHORT $LN6@zipCloseFi

; 1118 :             err = ZIP_ERRNO;

  002e3	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN6@zipCloseFi:

; 1119 :     }
; 1120 : 
; 1121 :     zi->number_entry ++;

  002ea	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  002ed	8b 88 b0 40 00
	00		 mov	 ecx, DWORD PTR [eax+16560]
  002f3	83 c1 01	 add	 ecx, 1
  002f6	8b 55 f4	 mov	 edx, DWORD PTR _zi$[ebp]
  002f9	89 8a b0 40 00
	00		 mov	 DWORD PTR [edx+16560], ecx

; 1122 :     zi->in_opened_file_inzip = 0;

  002ff	8b 45 f4	 mov	 eax, DWORD PTR _zi$[ebp]
  00302	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 1123 : 
; 1124 :     return err;

  00309	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN21@zipCloseFi:

; 1125 : }

  0030c	8b e5		 mov	 esp, ebp
  0030e	5d		 pop	 ebp
  0030f	c2 0c 00	 ret	 12			; 0000000cH
_zipCloseFileInZipRaw@12 ENDP
_TEXT	ENDS
PUBLIC	_zipWriteInFileInZip@12
; Function compile flags: /Odtp
;	COMDAT _zipWriteInFileInZip@12
_TEXT	SEGMENT
_i$80072 = -20						; size = 4
_copy_this$80071 = -16					; size = 4
_uTotalOutBefore$80068 = -12				; size = 4
_zi$ = -8						; size = 4
_err$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_zipWriteInFileInZip@12 PROC				; COMDAT

; 970  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 971  :     zip_internal* zi;
; 972  :     int err=ZIP_OK;

  00007	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 973  : 
; 974  :     if (file == NULL)

  0000e	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00012	75 0a		 jne	 SHORT $LN14@zipWriteIn

; 975  :         return ZIP_PARAMERROR;

  00014	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00019	e9 b9 01 00 00	 jmp	 $LN15@zipWriteIn
$LN14@zipWriteIn:

; 976  :     zi = (zip_internal*)file;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR _zi$[ebp], eax

; 977  : 
; 978  :     if (zi->in_opened_file_inzip == 0)

  00024	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00027	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  0002b	75 0a		 jne	 SHORT $LN13@zipWriteIn

; 979  :         return ZIP_PARAMERROR;

  0002d	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00032	e9 a0 01 00 00	 jmp	 $LN15@zipWriteIn
$LN13@zipWriteIn:

; 980  : 
; 981  :     zi->ci.stream.next_in = (void*)buf;

  00037	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0003d	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 982  :     zi->ci.stream.avail_in = len;

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00043	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00046	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 983  :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,len);

  00049	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00054	8b 82 8c 40 00
	00		 mov	 eax, DWORD PTR [edx+16524]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _crc32@12
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00063	89 81 8c 40 00
	00		 mov	 DWORD PTR [ecx+16524], eax
$LN12@zipWriteIn:

; 984  : 
; 985  :     while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00069	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  0006d	0f 85 61 01 00
	00		 jne	 $LN11@zipWriteIn
  00073	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00076	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  0007a	0f 86 54 01 00
	00		 jbe	 $LN11@zipWriteIn

; 986  :     {
; 987  :         if (zi->ci.stream.avail_out == 0)

  00080	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00083	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00087	75 30		 jne	 SHORT $LN10@zipWriteIn

; 988  :         {
; 989  :             if (zipFlushWriteBuffer(zi) == ZIP_ERRNO)

  00089	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _zipFlushWriteBuffer
  00092	83 c4 04	 add	 esp, 4
  00095	83 f8 ff	 cmp	 eax, -1
  00098	75 07		 jne	 SHORT $LN9@zipWriteIn

; 990  :                 err = ZIP_ERRNO;

  0009a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN9@zipWriteIn:

; 991  :             zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000a1	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  000a4	c7 42 40 00 40
	00 00		 mov	 DWORD PTR [edx+64], 16384 ; 00004000H

; 992  :             zi->ci.stream.next_out = zi->ci.buffered_data;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  000ae	05 88 00 00 00	 add	 eax, 136		; 00000088H
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000b6	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN10@zipWriteIn:

; 993  :         }
; 994  : 
; 995  : 
; 996  :         if(err != ZIP_OK)

  000b9	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  000bd	74 05		 je	 SHORT $LN8@zipWriteIn

; 997  :             break;

  000bf	e9 10 01 00 00	 jmp	 $LN11@zipWriteIn
$LN8@zipWriteIn:

; 998  : 
; 999  :         if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000c4	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  000c7	83 ba 80 00 00
	00 08		 cmp	 DWORD PTR [edx+128], 8
  000ce	75 40		 jne	 SHORT $LN7@zipWriteIn
  000d0	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  000d3	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  000da	75 34		 jne	 SHORT $LN7@zipWriteIn

; 1000 :         {
; 1001 :             uLong uTotalOutBefore = zi->ci.stream.total_out;

  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000df	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000e2	89 55 f4	 mov	 DWORD PTR _uTotalOutBefore$80068[ebp], edx

; 1002 :             err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  000e5	6a 00		 push	 0
  000e7	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  000ea	83 c0 30	 add	 eax, 48			; 00000030H
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 _deflate@8
  000f3	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 1003 :             zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000f6	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  000f9	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000fc	2b 55 f4	 sub	 edx, DWORD PTR _uTotalOutBefore$80068[ebp]
  000ff	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00102	03 50 6c	 add	 edx, DWORD PTR [eax+108]
  00105	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00108	89 51 6c	 mov	 DWORD PTR [ecx+108], edx

; 1004 : 
; 1005 :         }
; 1006 :         else

  0010b	e9 bf 00 00 00	 jmp	 $LN6@zipWriteIn
$LN7@zipWriteIn:

; 1007 :         {
; 1008 :             uInt copy_this,i;
; 1009 :             if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  00110	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00113	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00116	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  00119	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  0011c	73 0b		 jae	 SHORT $LN5@zipWriteIn

; 1010 :                 copy_this = zi->ci.stream.avail_in;

  0011e	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  00121	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00124	89 45 f0	 mov	 DWORD PTR _copy_this$80071[ebp], eax

; 1011 :             else

  00127	eb 09		 jmp	 SHORT $LN4@zipWriteIn
$LN5@zipWriteIn:

; 1012 :                 copy_this = zi->ci.stream.avail_out;

  00129	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  0012c	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0012f	89 55 f0	 mov	 DWORD PTR _copy_this$80071[ebp], edx
$LN4@zipWriteIn:

; 1013 :             for (i=0;i<copy_this;i++)

  00132	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$80072[ebp], 0
  00139	eb 09		 jmp	 SHORT $LN3@zipWriteIn
$LN2@zipWriteIn:
  0013b	8b 45 ec	 mov	 eax, DWORD PTR _i$80072[ebp]
  0013e	83 c0 01	 add	 eax, 1
  00141	89 45 ec	 mov	 DWORD PTR _i$80072[ebp], eax
$LN3@zipWriteIn:
  00144	8b 4d ec	 mov	 ecx, DWORD PTR _i$80072[ebp]
  00147	3b 4d f0	 cmp	 ecx, DWORD PTR _copy_this$80071[ebp]
  0014a	73 1a		 jae	 SHORT $LN1@zipWriteIn

; 1014 :                 *(((char*)zi->ci.stream.next_out)+i) =
; 1015 :                     *(((const char*)zi->ci.stream.next_in)+i);

  0014c	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  0014f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00152	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00155	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00158	8b 4d ec	 mov	 ecx, DWORD PTR _i$80072[ebp]
  0015b	8b 75 ec	 mov	 esi, DWORD PTR _i$80072[ebp]
  0015e	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  00161	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00164	eb d5		 jmp	 SHORT $LN2@zipWriteIn
$LN1@zipWriteIn:

; 1016 :             {
; 1017 :                 zi->ci.stream.avail_in -= copy_this;

  00166	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00169	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0016c	2b 55 f0	 sub	 edx, DWORD PTR _copy_this$80071[ebp]
  0016f	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00172	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 1018 :                 zi->ci.stream.avail_out-= copy_this;

  00175	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00178	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0017b	2b 55 f0	 sub	 edx, DWORD PTR _copy_this$80071[ebp]
  0017e	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00181	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 1019 :                 zi->ci.stream.next_in+= copy_this;

  00184	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00187	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0018a	03 55 f0	 add	 edx, DWORD PTR _copy_this$80071[ebp]
  0018d	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  00190	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1020 :                 zi->ci.stream.next_out+= copy_this;

  00193	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  00196	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00199	03 55 f0	 add	 edx, DWORD PTR _copy_this$80071[ebp]
  0019c	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  0019f	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 1021 :                 zi->ci.stream.total_in+= copy_this;

  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001a5	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001a8	03 55 f0	 add	 edx, DWORD PTR _copy_this$80071[ebp]
  001ab	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  001ae	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1022 :                 zi->ci.stream.total_out+= copy_this;

  001b1	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001b4	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  001b7	03 55 f0	 add	 edx, DWORD PTR _copy_this$80071[ebp]
  001ba	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  001bd	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 1023 :                 zi->ci.pos_in_buffered_data += copy_this;

  001c0	8b 4d f8	 mov	 ecx, DWORD PTR _zi$[ebp]
  001c3	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  001c6	03 55 f0	 add	 edx, DWORD PTR _copy_this$80071[ebp]
  001c9	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  001cc	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN6@zipWriteIn:

; 1024 :             }
; 1025 :         }
; 1026 :     }

  001cf	e9 95 fe ff ff	 jmp	 $LN12@zipWriteIn
$LN11@zipWriteIn:

; 1027 : 
; 1028 :     return err;

  001d4	8b 45 fc	 mov	 eax, DWORD PTR _err$[ebp]
$LN15@zipWriteIn:

; 1029 : }

  001d7	5e		 pop	 esi
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 0c 00	 ret	 12			; 0000000cH
_zipWriteInFileInZip@12 ENDP
_TEXT	ENDS
PUBLIC	_zipOpen2@16
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp
;	COMDAT _zipOpen2@16
_TEXT	SEGMENT
_read_this$79865 = -16632				; size = 4
_buf_read$79859 = -16628				; size = 4
_size_central_dir_to_read$79857 = -16624		; size = 4
_buf_size$79858 = -16620				; size = 4
_central_pos$79833 = -16616				; size = 4
_number_disk_with_CD$79836 = -16612			; size = 4
_number_entry_CD$79838 = -16608				; size = 4
_size_central_dir$79831 = -16604			; size = 4
_byte_before_the_zipfile$79830 = -16600			; size = 4
_offset_central_dir$79832 = -16596			; size = 4
_uL$79834 = -16592					; size = 4
_number_entry$79837 = -16588				; size = 4
_number_disk$79835 = -16584				; size = 4
_size_comment$79839 = -16580				; size = 4
_ziinit$ = -16576					; size = 16568
_zi$ = -8						; size = 4
_err$ = -4						; size = 4
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc_def$ = 20				; size = 4
_zipOpen2@16 PROC					; COMDAT

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 f8 40 00 00	 mov	 eax, 16632		; 000040f8H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	56		 push	 esi
  0000e	57		 push	 edi

; 505  :     zip_internal ziinit;
; 506  :     zip_internal* zi;
; 507  :     int err=ZIP_OK;

  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 508  : 
; 509  : 
; 510  :     if (pzlib_filefunc_def==NULL)

  00016	83 7d 14 00	 cmp	 DWORD PTR _pzlib_filefunc_def$[ebp], 0
  0001a	75 11		 jne	 SHORT $LN34@zipOpen2

; 511  :         fill_fopen_filefunc(&ziinit.z_filefunc);

  0001c	8d 85 40 bf ff
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _fill_fopen_filefunc
  00028	83 c4 04	 add	 esp, 4

; 512  :     else

  0002b	eb 10		 jmp	 SHORT $LN33@zipOpen2
$LN34@zipOpen2:

; 513  :         ziinit.z_filefunc = *pzlib_filefunc_def;

  0002d	8b 75 14	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  00030	b9 08 00 00 00	 mov	 ecx, 8
  00035	8d bd 40 bf ff
	ff		 lea	 edi, DWORD PTR _ziinit$[ebp]
  0003b	f3 a5		 rep movsd
$LN33@zipOpen2:

; 514  : 
; 515  :     ziinit.filestream = (*(ziinit.z_filefunc.zopen_file))
; 516  :                  (ziinit.z_filefunc.opaque,
; 517  :                   pathname,
; 518  :                   (append == APPEND_STATUS_CREATE) ?
; 519  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 520  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));

  0003d	33 c9		 xor	 ecx, ecx
  0003f	83 7d 0c 00	 cmp	 DWORD PTR _append$[ebp], 0
  00043	0f 94 c1	 sete	 cl
  00046	8d 0c 8d 07 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+7]
  0004d	51		 push	 ecx
  0004e	8b 55 08	 mov	 edx, DWORD PTR _pathname$[ebp]
  00051	52		 push	 edx
  00052	8b 85 5c bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+28]
  00058	50		 push	 eax
  00059	ff 95 40 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp]
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 85 60 bf ff
	ff		 mov	 DWORD PTR _ziinit$[ebp+32], eax

; 521  : 
; 522  :     if (ziinit.filestream == NULL)

  00068	83 bd 60 bf ff
	ff 00		 cmp	 DWORD PTR _ziinit$[ebp+32], 0
  0006f	75 07		 jne	 SHORT $LN32@zipOpen2

; 523  :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	e9 d0 04 00 00	 jmp	 $LN35@zipOpen2
$LN32@zipOpen2:

; 524  :     ziinit.begin_pos = ZTELL(ziinit.z_filefunc,ziinit.filestream);

  00078	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  0007e	51		 push	 ecx
  0007f	8b 95 5c bf ff
	ff		 mov	 edx, DWORD PTR _ziinit$[ebp+28]
  00085	52		 push	 edx
  00086	ff 95 4c bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+12]
  0008c	83 c4 08	 add	 esp, 8
  0008f	89 45 e8	 mov	 DWORD PTR _ziinit$[ebp+16552], eax

; 525  :     ziinit.in_opened_file_inzip = 0;

  00092	c7 85 6c bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+44], 0

; 526  :     ziinit.ci.stream_initialised = 0;

  0009c	c7 85 a8 bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _ziinit$[ebp+104], 0

; 527  :     ziinit.number_entry = 0;

  000a6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+16560], 0

; 528  :     ziinit.add_position_when_writting_offset = 0;

  000ad	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+16556], 0

; 529  :     init_linkedlist(&(ziinit.central_dir));

  000b4	8d 85 64 bf ff
	ff		 lea	 eax, DWORD PTR _ziinit$[ebp+36]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _init_linkedlist
  000c0	83 c4 04	 add	 esp, 4

; 530  : 
; 531  : 
; 532  :     zi = (zip_internal*)ALLOC(sizeof(zip_internal));

  000c3	68 b8 40 00 00	 push	 16568			; 000040b8H
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000ce	83 c4 04	 add	 esp, 4
  000d1	89 45 f8	 mov	 DWORD PTR _zi$[ebp], eax

; 533  :     if (zi==NULL)

  000d4	83 7d f8 00	 cmp	 DWORD PTR _zi$[ebp], 0
  000d8	75 1e		 jne	 SHORT $LN31@zipOpen2

; 534  :     {
; 535  :         ZCLOSE(ziinit.z_filefunc,ziinit.filestream);

  000da	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  000e0	51		 push	 ecx
  000e1	8b 95 5c bf ff
	ff		 mov	 edx, DWORD PTR _ziinit$[ebp+28]
  000e7	52		 push	 edx
  000e8	ff 95 54 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+20]
  000ee	83 c4 08	 add	 esp, 8

; 536  :         return NULL;

  000f1	33 c0		 xor	 eax, eax
  000f3	e9 50 04 00 00	 jmp	 $LN35@zipOpen2
$LN31@zipOpen2:

; 537  :     }
; 538  : 
; 539  :     /* now we add file in a zipfile */
; 540  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 541  :     ziinit.globalcomment = NULL;

  000f8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ziinit$[ebp+16564], 0

; 542  :     if (append == APPEND_STATUS_ADDINZIP)

  000ff	83 7d 0c 02	 cmp	 DWORD PTR _append$[ebp], 2
  00103	0f 85 e4 03 00
	00		 jne	 $LN30@zipOpen2

; 543  :     {
; 544  :         uLong byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 545  : 
; 546  :         uLong size_central_dir;     /* size of the central directory  */
; 547  :         uLong offset_central_dir;   /* offset of start of central directory */
; 548  :         uLong central_pos,uL;
; 549  : 
; 550  :         uLong number_disk;          /* number of the current dist, used for
; 551  :                                     spaning ZIP, unsupported, always 0*/
; 552  :         uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 553  :                                     for spaning ZIP, unsupported, always 0*/
; 554  :         uLong number_entry;
; 555  :         uLong number_entry_CD;      /* total number of entries in
; 556  :                                     the central dir
; 557  :                                     (same than number_entry on nospan) */
; 558  :         uLong size_comment;
; 559  : 
; 560  :         central_pos = ziplocal_SearchCentralDir(&ziinit.z_filefunc,ziinit.filestream);

  00109	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  0010f	50		 push	 eax
  00110	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 _ziplocal_SearchCentralDir
  0011c	83 c4 08	 add	 esp, 8
  0011f	89 85 18 bf ff
	ff		 mov	 DWORD PTR _central_pos$79833[ebp], eax

; 561  :         if (central_pos==0)

  00125	83 bd 18 bf ff
	ff 00		 cmp	 DWORD PTR _central_pos$79833[ebp], 0
  0012c	75 07		 jne	 SHORT $LN29@zipOpen2

; 562  :             err=ZIP_ERRNO;

  0012e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN29@zipOpen2:

; 563  : 
; 564  :         if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
; 565  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00135	6a 00		 push	 0
  00137	8b 95 18 bf ff
	ff		 mov	 edx, DWORD PTR _central_pos$79833[ebp]
  0013d	52		 push	 edx
  0013e	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  00144	50		 push	 eax
  00145	8b 8d 5c bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+28]
  0014b	51		 push	 ecx
  0014c	ff 95 50 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+16]
  00152	83 c4 10	 add	 esp, 16			; 00000010H
  00155	85 c0		 test	 eax, eax
  00157	74 07		 je	 SHORT $LN28@zipOpen2

; 566  :             err=ZIP_ERRNO;

  00159	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN28@zipOpen2:

; 567  : 
; 568  :         /* the signature, already checked */
; 569  :         if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&uL)!=ZIP_OK)

  00160	8d 95 30 bf ff
	ff		 lea	 edx, DWORD PTR _uL$79834[ebp]
  00166	52		 push	 edx
  00167	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  0016d	50		 push	 eax
  0016e	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 _ziplocal_getLong
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017d	85 c0		 test	 eax, eax
  0017f	74 07		 je	 SHORT $LN27@zipOpen2

; 570  :             err=ZIP_ERRNO;

  00181	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN27@zipOpen2:

; 571  : 
; 572  :         /* number of this disk */
; 573  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_disk)!=ZIP_OK)

  00188	8d 95 38 bf ff
	ff		 lea	 edx, DWORD PTR _number_disk$79835[ebp]
  0018e	52		 push	 edx
  0018f	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  00195	50		 push	 eax
  00196	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  0019c	51		 push	 ecx
  0019d	e8 00 00 00 00	 call	 _ziplocal_getShort
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a5	85 c0		 test	 eax, eax
  001a7	74 07		 je	 SHORT $LN26@zipOpen2

; 574  :             err=ZIP_ERRNO;

  001a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN26@zipOpen2:

; 575  : 
; 576  :         /* number of the disk with the start of the central directory */
; 577  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_disk_with_CD)!=ZIP_OK)

  001b0	8d 95 1c bf ff
	ff		 lea	 edx, DWORD PTR _number_disk_with_CD$79836[ebp]
  001b6	52		 push	 edx
  001b7	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  001bd	50		 push	 eax
  001be	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  001c4	51		 push	 ecx
  001c5	e8 00 00 00 00	 call	 _ziplocal_getShort
  001ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cd	85 c0		 test	 eax, eax
  001cf	74 07		 je	 SHORT $LN25@zipOpen2

; 578  :             err=ZIP_ERRNO;

  001d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN25@zipOpen2:

; 579  : 
; 580  :         /* total number of entries in the central dir on this disk */
; 581  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_entry)!=ZIP_OK)

  001d8	8d 95 34 bf ff
	ff		 lea	 edx, DWORD PTR _number_entry$79837[ebp]
  001de	52		 push	 edx
  001df	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  001e5	50		 push	 eax
  001e6	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  001ec	51		 push	 ecx
  001ed	e8 00 00 00 00	 call	 _ziplocal_getShort
  001f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f5	85 c0		 test	 eax, eax
  001f7	74 07		 je	 SHORT $LN24@zipOpen2

; 582  :             err=ZIP_ERRNO;

  001f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN24@zipOpen2:

; 583  : 
; 584  :         /* total number of entries in the central dir */
; 585  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_entry_CD)!=ZIP_OK)

  00200	8d 95 20 bf ff
	ff		 lea	 edx, DWORD PTR _number_entry_CD$79838[ebp]
  00206	52		 push	 edx
  00207	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  0020d	50		 push	 eax
  0020e	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  00214	51		 push	 ecx
  00215	e8 00 00 00 00	 call	 _ziplocal_getShort
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	85 c0		 test	 eax, eax
  0021f	74 07		 je	 SHORT $LN23@zipOpen2

; 586  :             err=ZIP_ERRNO;

  00221	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN23@zipOpen2:

; 587  : 
; 588  :         if ((number_entry_CD!=number_entry) ||
; 589  :             (number_disk_with_CD!=0) ||
; 590  :             (number_disk!=0))

  00228	8b 95 20 bf ff
	ff		 mov	 edx, DWORD PTR _number_entry_CD$79838[ebp]
  0022e	3b 95 34 bf ff
	ff		 cmp	 edx, DWORD PTR _number_entry$79837[ebp]
  00234	75 12		 jne	 SHORT $LN21@zipOpen2
  00236	83 bd 1c bf ff
	ff 00		 cmp	 DWORD PTR _number_disk_with_CD$79836[ebp], 0
  0023d	75 09		 jne	 SHORT $LN21@zipOpen2
  0023f	83 bd 38 bf ff
	ff 00		 cmp	 DWORD PTR _number_disk$79835[ebp], 0
  00246	74 07		 je	 SHORT $LN22@zipOpen2
$LN21@zipOpen2:

; 591  :             err=ZIP_BADZIPFILE;

  00248	c7 45 fc 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN22@zipOpen2:

; 592  : 
; 593  :         /* size of the central directory */
; 594  :         if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&size_central_dir)!=ZIP_OK)

  0024f	8d 85 24 bf ff
	ff		 lea	 eax, DWORD PTR _size_central_dir$79831[ebp]
  00255	50		 push	 eax
  00256	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  0025c	51		 push	 ecx
  0025d	8d 95 40 bf ff
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 _ziplocal_getLong
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026c	85 c0		 test	 eax, eax
  0026e	74 07		 je	 SHORT $LN20@zipOpen2

; 595  :             err=ZIP_ERRNO;

  00270	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN20@zipOpen2:

; 596  : 
; 597  :         /* offset of start of central directory with respect to the
; 598  :             starting disk number */
; 599  :         if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&offset_central_dir)!=ZIP_OK)

  00277	8d 85 2c bf ff
	ff		 lea	 eax, DWORD PTR _offset_central_dir$79832[ebp]
  0027d	50		 push	 eax
  0027e	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  00284	51		 push	 ecx
  00285	8d 95 40 bf ff
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  0028b	52		 push	 edx
  0028c	e8 00 00 00 00	 call	 _ziplocal_getLong
  00291	83 c4 0c	 add	 esp, 12			; 0000000cH
  00294	85 c0		 test	 eax, eax
  00296	74 07		 je	 SHORT $LN19@zipOpen2

; 600  :             err=ZIP_ERRNO;

  00298	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN19@zipOpen2:

; 601  : 
; 602  :         /* zipfile global comment length */
; 603  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&size_comment)!=ZIP_OK)

  0029f	8d 85 3c bf ff
	ff		 lea	 eax, DWORD PTR _size_comment$79839[ebp]
  002a5	50		 push	 eax
  002a6	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  002ac	51		 push	 ecx
  002ad	8d 95 40 bf ff
	ff		 lea	 edx, DWORD PTR _ziinit$[ebp]
  002b3	52		 push	 edx
  002b4	e8 00 00 00 00	 call	 _ziplocal_getShort
  002b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002bc	85 c0		 test	 eax, eax
  002be	74 07		 je	 SHORT $LN18@zipOpen2

; 604  :             err=ZIP_ERRNO;

  002c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN18@zipOpen2:

; 605  : 
; 606  :         if ((central_pos<offset_central_dir+size_central_dir) &&
; 607  :             (err==ZIP_OK))

  002c7	8b 85 2c bf ff
	ff		 mov	 eax, DWORD PTR _offset_central_dir$79832[ebp]
  002cd	03 85 24 bf ff
	ff		 add	 eax, DWORD PTR _size_central_dir$79831[ebp]
  002d3	39 85 18 bf ff
	ff		 cmp	 DWORD PTR _central_pos$79833[ebp], eax
  002d9	73 0d		 jae	 SHORT $LN17@zipOpen2
  002db	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  002df	75 07		 jne	 SHORT $LN17@zipOpen2

; 608  :             err=ZIP_BADZIPFILE;

  002e1	c7 45 fc 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN17@zipOpen2:

; 609  : 
; 610  :         if (err!=ZIP_OK)

  002e8	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  002ec	74 1e		 je	 SHORT $LN16@zipOpen2

; 611  :         {
; 612  :             ZCLOSE(ziinit.z_filefunc, ziinit.filestream);

  002ee	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  002f4	51		 push	 ecx
  002f5	8b 95 5c bf ff
	ff		 mov	 edx, DWORD PTR _ziinit$[ebp+28]
  002fb	52		 push	 edx
  002fc	ff 95 54 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+20]
  00302	83 c4 08	 add	 esp, 8

; 613  :             return NULL;

  00305	33 c0		 xor	 eax, eax
  00307	e9 3c 02 00 00	 jmp	 $LN35@zipOpen2
$LN16@zipOpen2:

; 614  :         }
; 615  : 
; 616  :         if (size_comment>0)

  0030c	83 bd 3c bf ff
	ff 00		 cmp	 DWORD PTR _size_comment$79839[ebp], 0
  00313	76 50		 jbe	 SHORT $LN15@zipOpen2

; 617  :         {
; 618  :             ziinit.globalcomment = ALLOC(size_comment+1);

  00315	8b 85 3c bf ff
	ff		 mov	 eax, DWORD PTR _size_comment$79839[ebp]
  0031b	83 c0 01	 add	 eax, 1
  0031e	50		 push	 eax
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00325	83 c4 04	 add	 esp, 4
  00328	89 45 f4	 mov	 DWORD PTR _ziinit$[ebp+16564], eax

; 619  :             if (ziinit.globalcomment)

  0032b	83 7d f4 00	 cmp	 DWORD PTR _ziinit$[ebp+16564], 0
  0032f	74 34		 je	 SHORT $LN15@zipOpen2

; 620  :             {
; 621  :                size_comment = ZREAD(ziinit.z_filefunc, ziinit.filestream,ziinit.globalcomment,size_comment);

  00331	8b 8d 3c bf ff
	ff		 mov	 ecx, DWORD PTR _size_comment$79839[ebp]
  00337	51		 push	 ecx
  00338	8b 55 f4	 mov	 edx, DWORD PTR _ziinit$[ebp+16564]
  0033b	52		 push	 edx
  0033c	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  00342	50		 push	 eax
  00343	8b 8d 5c bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+28]
  00349	51		 push	 ecx
  0034a	ff 95 44 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+4]
  00350	83 c4 10	 add	 esp, 16			; 00000010H
  00353	89 85 3c bf ff
	ff		 mov	 DWORD PTR _size_comment$79839[ebp], eax

; 622  :                ziinit.globalcomment[size_comment]=0;

  00359	8b 55 f4	 mov	 edx, DWORD PTR _ziinit$[ebp+16564]
  0035c	03 95 3c bf ff
	ff		 add	 edx, DWORD PTR _size_comment$79839[ebp]
  00362	c6 02 00	 mov	 BYTE PTR [edx], 0
$LN15@zipOpen2:

; 623  :             }
; 624  :         }
; 625  : 
; 626  :         byte_before_the_zipfile = central_pos -
; 627  :                                 (offset_central_dir+size_central_dir);

  00365	8b 85 2c bf ff
	ff		 mov	 eax, DWORD PTR _offset_central_dir$79832[ebp]
  0036b	03 85 24 bf ff
	ff		 add	 eax, DWORD PTR _size_central_dir$79831[ebp]
  00371	8b 8d 18 bf ff
	ff		 mov	 ecx, DWORD PTR _central_pos$79833[ebp]
  00377	2b c8		 sub	 ecx, eax
  00379	89 8d 28 bf ff
	ff		 mov	 DWORD PTR _byte_before_the_zipfile$79830[ebp], ecx

; 628  :         ziinit.add_position_when_writting_offset = byte_before_the_zipfile;

  0037f	8b 95 28 bf ff
	ff		 mov	 edx, DWORD PTR _byte_before_the_zipfile$79830[ebp]
  00385	89 55 ec	 mov	 DWORD PTR _ziinit$[ebp+16556], edx

; 629  : 
; 630  :         {
; 631  :             uLong size_central_dir_to_read = size_central_dir;

  00388	8b 85 24 bf ff
	ff		 mov	 eax, DWORD PTR _size_central_dir$79831[ebp]
  0038e	89 85 10 bf ff
	ff		 mov	 DWORD PTR _size_central_dir_to_read$79857[ebp], eax

; 632  :             size_t buf_size = SIZEDATA_INDATABLOCK;

  00394	c7 85 14 bf ff
	ff f0 0f 00 00	 mov	 DWORD PTR _buf_size$79858[ebp], 4080 ; 00000ff0H

; 633  :             void* buf_read = (void*)ALLOC(buf_size);

  0039e	8b 8d 14 bf ff
	ff		 mov	 ecx, DWORD PTR _buf_size$79858[ebp]
  003a4	51		 push	 ecx
  003a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  003ab	83 c4 04	 add	 esp, 4
  003ae	89 85 0c bf ff
	ff		 mov	 DWORD PTR _buf_read$79859[ebp], eax

; 634  :             if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
; 635  :                   offset_central_dir + byte_before_the_zipfile,
; 636  :                   ZLIB_FILEFUNC_SEEK_SET) != 0)

  003b4	6a 00		 push	 0
  003b6	8b 95 2c bf ff
	ff		 mov	 edx, DWORD PTR _offset_central_dir$79832[ebp]
  003bc	03 95 28 bf ff
	ff		 add	 edx, DWORD PTR _byte_before_the_zipfile$79830[ebp]
  003c2	52		 push	 edx
  003c3	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  003c9	50		 push	 eax
  003ca	8b 8d 5c bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+28]
  003d0	51		 push	 ecx
  003d1	ff 95 50 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+16]
  003d7	83 c4 10	 add	 esp, 16			; 00000010H
  003da	85 c0		 test	 eax, eax
  003dc	74 07		 je	 SHORT $LN12@zipOpen2

; 637  :                   err=ZIP_ERRNO;

  003de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@zipOpen2:

; 638  : 
; 639  :             while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  003e5	83 bd 10 bf ff
	ff 00		 cmp	 DWORD PTR _size_central_dir_to_read$79857[ebp], 0
  003ec	0f 86 9f 00 00
	00		 jbe	 $LN11@zipOpen2
  003f2	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  003f6	0f 85 95 00 00
	00		 jne	 $LN11@zipOpen2

; 640  :             {
; 641  :                 uLong read_this = SIZEDATA_INDATABLOCK;

  003fc	c7 85 08 bf ff
	ff f0 0f 00 00	 mov	 DWORD PTR _read_this$79865[ebp], 4080 ; 00000ff0H

; 642  :                 if (read_this > size_central_dir_to_read)

  00406	8b 95 08 bf ff
	ff		 mov	 edx, DWORD PTR _read_this$79865[ebp]
  0040c	3b 95 10 bf ff
	ff		 cmp	 edx, DWORD PTR _size_central_dir_to_read$79857[ebp]
  00412	76 0c		 jbe	 SHORT $LN10@zipOpen2

; 643  :                     read_this = size_central_dir_to_read;

  00414	8b 85 10 bf ff
	ff		 mov	 eax, DWORD PTR _size_central_dir_to_read$79857[ebp]
  0041a	89 85 08 bf ff
	ff		 mov	 DWORD PTR _read_this$79865[ebp], eax
$LN10@zipOpen2:

; 644  :                 if (ZREAD(ziinit.z_filefunc, ziinit.filestream,buf_read,read_this) != read_this)

  00420	8b 8d 08 bf ff
	ff		 mov	 ecx, DWORD PTR _read_this$79865[ebp]
  00426	51		 push	 ecx
  00427	8b 95 0c bf ff
	ff		 mov	 edx, DWORD PTR _buf_read$79859[ebp]
  0042d	52		 push	 edx
  0042e	8b 85 60 bf ff
	ff		 mov	 eax, DWORD PTR _ziinit$[ebp+32]
  00434	50		 push	 eax
  00435	8b 8d 5c bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+28]
  0043b	51		 push	 ecx
  0043c	ff 95 44 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+4]
  00442	83 c4 10	 add	 esp, 16			; 00000010H
  00445	3b 85 08 bf ff
	ff		 cmp	 eax, DWORD PTR _read_this$79865[ebp]
  0044b	74 07		 je	 SHORT $LN9@zipOpen2

; 645  :                     err=ZIP_ERRNO;

  0044d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN9@zipOpen2:

; 646  : 
; 647  :                 if (err==ZIP_OK)

  00454	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  00458	75 20		 jne	 SHORT $LN8@zipOpen2

; 648  :                     err = add_data_in_datablock(&ziinit.central_dir,buf_read,
; 649  :                                                 (uLong)read_this);

  0045a	8b 95 08 bf ff
	ff		 mov	 edx, DWORD PTR _read_this$79865[ebp]
  00460	52		 push	 edx
  00461	8b 85 0c bf ff
	ff		 mov	 eax, DWORD PTR _buf_read$79859[ebp]
  00467	50		 push	 eax
  00468	8d 8d 64 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp+36]
  0046e	51		 push	 ecx
  0046f	e8 00 00 00 00	 call	 _add_data_in_datablock
  00474	83 c4 0c	 add	 esp, 12			; 0000000cH
  00477	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax
$LN8@zipOpen2:

; 650  :                 size_central_dir_to_read-=read_this;

  0047a	8b 95 10 bf ff
	ff		 mov	 edx, DWORD PTR _size_central_dir_to_read$79857[ebp]
  00480	2b 95 08 bf ff
	ff		 sub	 edx, DWORD PTR _read_this$79865[ebp]
  00486	89 95 10 bf ff
	ff		 mov	 DWORD PTR _size_central_dir_to_read$79857[ebp], edx

; 651  :             }

  0048c	e9 54 ff ff ff	 jmp	 $LN12@zipOpen2
$LN11@zipOpen2:

; 652  :             TRYFREE(buf_read);

  00491	83 bd 0c bf ff
	ff 00		 cmp	 DWORD PTR _buf_read$79859[ebp], 0
  00498	74 10		 je	 SHORT $LN7@zipOpen2
  0049a	8b 85 0c bf ff
	ff		 mov	 eax, DWORD PTR _buf_read$79859[ebp]
  004a0	50		 push	 eax
  004a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  004a7	83 c4 04	 add	 esp, 4
$LN7@zipOpen2:

; 653  :         }
; 654  :         ziinit.begin_pos = byte_before_the_zipfile;

  004aa	8b 8d 28 bf ff
	ff		 mov	 ecx, DWORD PTR _byte_before_the_zipfile$79830[ebp]
  004b0	89 4d e8	 mov	 DWORD PTR _ziinit$[ebp+16552], ecx

; 655  :         ziinit.number_entry = number_entry_CD;

  004b3	8b 95 20 bf ff
	ff		 mov	 edx, DWORD PTR _number_entry_CD$79838[ebp]
  004b9	89 55 f0	 mov	 DWORD PTR _ziinit$[ebp+16560], edx

; 656  : 
; 657  :         if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
; 658  :                   offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  004bc	6a 00		 push	 0
  004be	8b 85 2c bf ff
	ff		 mov	 eax, DWORD PTR _offset_central_dir$79832[ebp]
  004c4	03 85 28 bf ff
	ff		 add	 eax, DWORD PTR _byte_before_the_zipfile$79830[ebp]
  004ca	50		 push	 eax
  004cb	8b 8d 60 bf ff
	ff		 mov	 ecx, DWORD PTR _ziinit$[ebp+32]
  004d1	51		 push	 ecx
  004d2	8b 95 5c bf ff
	ff		 mov	 edx, DWORD PTR _ziinit$[ebp+28]
  004d8	52		 push	 edx
  004d9	ff 95 50 bf ff
	ff		 call	 DWORD PTR _ziinit$[ebp+16]
  004df	83 c4 10	 add	 esp, 16			; 00000010H
  004e2	85 c0		 test	 eax, eax
  004e4	74 07		 je	 SHORT $LN30@zipOpen2

; 659  :             err=ZIP_ERRNO;

  004e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN30@zipOpen2:

; 660  :     }
; 661  : 
; 662  :     if (globalcomment)

  004ed	83 7d 10 00	 cmp	 DWORD PTR _globalcomment$[ebp], 0
  004f1	74 08		 je	 SHORT $LN5@zipOpen2

; 663  :     {
; 664  :       *globalcomment = ziinit.globalcomment;

  004f3	8b 45 10	 mov	 eax, DWORD PTR _globalcomment$[ebp]
  004f6	8b 4d f4	 mov	 ecx, DWORD PTR _ziinit$[ebp+16564]
  004f9	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@zipOpen2:

; 665  :     }
; 666  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 667  : 
; 668  :     if (err != ZIP_OK)

  004fb	83 7d fc 00	 cmp	 DWORD PTR _err$[ebp], 0
  004ff	74 2c		 je	 SHORT $LN4@zipOpen2

; 669  :     {
; 670  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 671  :         TRYFREE(ziinit.globalcomment);

  00501	83 7d f4 00	 cmp	 DWORD PTR _ziinit$[ebp+16564], 0
  00505	74 0d		 je	 SHORT $LN3@zipOpen2
  00507	8b 55 f4	 mov	 edx, DWORD PTR _ziinit$[ebp+16564]
  0050a	52		 push	 edx
  0050b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00511	83 c4 04	 add	 esp, 4
$LN3@zipOpen2:

; 672  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 673  :         TRYFREE(zi);

  00514	83 7d f8 00	 cmp	 DWORD PTR _zi$[ebp], 0
  00518	74 0d		 je	 SHORT $LN2@zipOpen2
  0051a	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
  0051d	50		 push	 eax
  0051e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00524	83 c4 04	 add	 esp, 4
$LN2@zipOpen2:

; 674  :         return NULL;

  00527	33 c0		 xor	 eax, eax
  00529	eb 1d		 jmp	 SHORT $LN35@zipOpen2

; 675  :     }
; 676  :     else

  0052b	eb 1b		 jmp	 SHORT $LN35@zipOpen2
$LN4@zipOpen2:

; 677  :     {
; 678  :         *zi = ziinit;

  0052d	68 b8 40 00 00	 push	 16568			; 000040b8H
  00532	8d 8d 40 bf ff
	ff		 lea	 ecx, DWORD PTR _ziinit$[ebp]
  00538	51		 push	 ecx
  00539	8b 55 f8	 mov	 edx, DWORD PTR _zi$[ebp]
  0053c	52		 push	 edx
  0053d	e8 00 00 00 00	 call	 _memcpy
  00542	83 c4 0c	 add	 esp, 12			; 0000000cH

; 679  :         return (zipFile)zi;

  00545	8b 45 f8	 mov	 eax, DWORD PTR _zi$[ebp]
$LN35@zipOpen2:

; 680  :     }
; 681  : }

  00548	5f		 pop	 edi
  00549	5e		 pop	 esi
  0054a	8b e5		 mov	 esp, ebp
  0054c	5d		 pop	 ebp
  0054d	c2 10 00	 ret	 16			; 00000010H
_zipOpen2@16 ENDP
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _crypthead
_TEXT	SEGMENT
_header$ = -24						; size = 10
_t$ = -12						; size = 4
_c$ = -8						; size = 4
_n$ = -4						; size = 4
_passwd$ = 8						; size = 4
_buf$ = 12						; size = 4
_bufSize$ = 16						; size = 4
_pkeys$ = 20						; size = 4
_pcrc_32_tab$ = 24					; size = 4
_crcForCrypting$ = 28					; size = 4
_crypthead PROC						; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 98   :     int n;                       /* index in random header */
; 99   :     int t;                       /* temporary */
; 100  :     int c;                       /* random byte */
; 101  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 102  :     static unsigned calls = 0;   /* ensure different random header each time */
; 103  : 
; 104  :     if (bufSize<RAND_HEAD_LEN)

  00006	83 7d 10 0c	 cmp	 DWORD PTR _bufSize$[ebp], 12 ; 0000000cH
  0000a	7d 07		 jge	 SHORT $LN8@crypthead

; 105  :       return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	e9 b4 01 00 00	 jmp	 $LN9@crypthead
$LN8@crypthead:

; 106  : 
; 107  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 108  :      * output of rand() to get less predictability, since rand() is
; 109  :      * often poorly implemented.
; 110  :      */
; 111  :     if (++calls == 1)

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00018	83 c0 01	 add	 eax, 1
  0001b	a3 00 00 00 00	 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00020	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?calls@?1??crypthead@@9@9, 1
  00027	75 1d		 jne	 SHORT $LN7@crypthead

; 112  :     {
; 113  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00029	6a 00		 push	 0
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00031	83 c4 04	 add	 esp, 4
  00034	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  00039	83 f2 00	 xor	 edx, 0
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  00043	83 c4 04	 add	 esp, 4
$LN7@crypthead:

; 114  :     }
; 115  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00046	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0004d	52		 push	 edx
  0004e	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _init_keys
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN6@crypthead
$LN5@crypthead:
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00066	83 c1 01	 add	 ecx, 1
  00069	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN6@crypthead:
  0006c	83 7d fc 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  00070	7d 47		 jge	 SHORT $LN4@crypthead

; 117  :     {
; 118  :         c = (rand() >> 7) & 0xff;

  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00078	c1 f8 07	 sar	 eax, 7
  0007b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00080	89 45 f8	 mov	 DWORD PTR _c$[ebp], eax

; 119  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00083	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00086	52		 push	 edx
  00087	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _decrypt_byte
  00090	83 c4 08	 add	 esp, 8
  00093	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _c$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _update_keys
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	8b 4d f4	 mov	 ecx, DWORD PTR _t$[ebp]
  000ad	33 4d f8	 xor	 ecx, DWORD PTR _c$[ebp]
  000b0	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  000b3	88 4c 15 e8	 mov	 BYTE PTR _header$[ebp+edx], cl

; 120  :     }

  000b7	eb aa		 jmp	 SHORT $LN5@crypthead
$LN4@crypthead:

; 121  :     /* Encrypt random header (last two bytes is high word of crc) */
; 122  :     init_keys(passwd, pkeys, pcrc_32_tab);

  000b9	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  000c4	52		 push	 edx
  000c5	e8 00 00 00 00	 call	 _init_keys
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  000cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  000d4	eb 09		 jmp	 SHORT $LN3@crypthead
$LN2@crypthead:
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000d9	83 c0 01	 add	 eax, 1
  000dc	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN3@crypthead:
  000df	83 7d fc 0a	 cmp	 DWORD PTR _n$[ebp], 10	; 0000000aH
  000e3	7d 41		 jge	 SHORT $LN1@crypthead

; 124  :     {
; 125  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000e5	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  000e8	51		 push	 ecx
  000e9	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 _decrypt_byte
  000f2	83 c4 08	 add	 esp, 8
  000f5	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  000f8	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  000fb	0f b6 4c 05 e8	 movzx	 ecx, BYTE PTR _header$[ebp+eax]
  00100	51		 push	 ecx
  00101	8b 55 18	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00104	52		 push	 edx
  00105	8b 45 14	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _update_keys
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00111	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00114	0f b6 54 0d e8	 movzx	 edx, BYTE PTR _header$[ebp+ecx]
  00119	33 55 f4	 xor	 edx, DWORD PTR _t$[ebp]
  0011c	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0011f	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  00122	88 10		 mov	 BYTE PTR [eax], dl

; 126  :     }

  00124	eb b0		 jmp	 SHORT $LN2@crypthead
$LN1@crypthead:

; 127  :     buf[n++] = zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  00126	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 _decrypt_byte
  00133	83 c4 08	 add	 esp, 8
  00136	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  00139	8b 45 1c	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  0013c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0013f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00144	50		 push	 eax
  00145	8b 4d 18	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 14	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 _update_keys
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	8b 45 1c	 mov	 eax, DWORD PTR _crcForCrypting$[ebp]
  00158	c1 e8 10	 shr	 eax, 16			; 00000010H
  0015b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00160	33 45 f4	 xor	 eax, DWORD PTR _t$[ebp]
  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00166	03 4d fc	 add	 ecx, DWORD PTR _n$[ebp]
  00169	88 01		 mov	 BYTE PTR [ecx], al
  0016b	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  0016e	83 c2 01	 add	 edx, 1
  00171	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx

; 128  :     buf[n++] = zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  00174	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  00177	50		 push	 eax
  00178	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 _decrypt_byte
  00181	83 c4 08	 add	 esp, 8
  00184	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  00187	8b 55 1c	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  0018a	c1 ea 18	 shr	 edx, 24			; 00000018H
  0018d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00193	52		 push	 edx
  00194	8b 45 18	 mov	 eax, DWORD PTR _pcrc_32_tab$[ebp]
  00197	50		 push	 eax
  00198	8b 4d 14	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0019b	51		 push	 ecx
  0019c	e8 00 00 00 00	 call	 _update_keys
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8b 55 1c	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  001a7	c1 ea 18	 shr	 edx, 24			; 00000018H
  001aa	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001b0	33 55 f4	 xor	 edx, DWORD PTR _t$[ebp]
  001b3	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001b6	03 45 fc	 add	 eax, DWORD PTR _n$[ebp]
  001b9	88 10		 mov	 BYTE PTR [eax], dl
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  001be	83 c1 01	 add	 ecx, 1
  001c1	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 129  :     return n;

  001c4	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
$LN9@crypthead:

; 130  : }

  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
_crypthead ENDP
PUBLIC	_zipCloseFileInZip@4
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZip@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_zipCloseFileInZip@4 PROC				; COMDAT

; 1129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1130 :     return zipCloseFileInZipRaw (file,0,0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw@12

; 1131 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
_zipCloseFileInZip@4 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip3@64
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip3@64
_TEXT	SEGMENT
_bufHead$80006 = -36					; size = 12
_sizeHead$80007 = -24					; size = 4
_zi$ = -20						; size = 4
_size_filename$ = -16					; size = 4
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_size_comment$ = -4					; size = 4
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zipOpenNewFileInZip3@64 PROC				; COMDAT

; 712  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 713  :     zip_internal* zi;
; 714  :     uInt size_filename;
; 715  :     uInt size_comment;
; 716  :     uInt i;
; 717  :     int err = ZIP_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 718  : 
; 719  : #    ifdef NOCRYPT
; 720  :     if (password != NULL)
; 721  :         return ZIP_PARAMERROR;
; 722  : #    endif
; 723  : 
; 724  :     if (file == NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 0a		 jne	 SHORT $LN49@zipOpenNew

; 725  :         return ZIP_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	e9 70 07 00 00	 jmp	 $LN50@zipOpenNew
$LN49@zipOpenNew:

; 726  :     if ((method!=0) && (method!=Z_DEFLATED))

  0001d	83 7d 28 00	 cmp	 DWORD PTR _method$[ebp], 0
  00021	74 10		 je	 SHORT $LN48@zipOpenNew
  00023	83 7d 28 08	 cmp	 DWORD PTR _method$[ebp], 8
  00027	74 0a		 je	 SHORT $LN48@zipOpenNew

; 727  :         return ZIP_PARAMERROR;

  00029	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0002e	e9 5a 07 00 00	 jmp	 $LN50@zipOpenNew
$LN48@zipOpenNew:

; 728  : 
; 729  :     zi = (zip_internal*)file;

  00033	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00036	89 45 ec	 mov	 DWORD PTR _zi$[ebp], eax

; 730  : 
; 731  :     if (zi->in_opened_file_inzip == 1)

  00039	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0003c	83 79 2c 01	 cmp	 DWORD PTR [ecx+44], 1
  00040	75 1a		 jne	 SHORT $LN47@zipOpenNew

; 732  :     {
; 733  :         err = zipCloseFileInZip (file);

  00042	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  0004b	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 734  :         if (err != ZIP_OK)

  0004e	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00052	74 08		 je	 SHORT $LN47@zipOpenNew

; 735  :             return err;

  00054	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
  00057	e9 31 07 00 00	 jmp	 $LN50@zipOpenNew
$LN47@zipOpenNew:

; 736  :     }
; 737  : 
; 738  : 
; 739  :     if (filename==NULL)

  0005c	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00060	75 07		 jne	 SHORT $LN45@zipOpenNew

; 740  :         filename="-";

  00062	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
$LN45@zipOpenNew:

; 741  : 
; 742  :     if (comment==NULL)

  00069	83 7d 24 00	 cmp	 DWORD PTR _comment$[ebp], 0
  0006d	75 09		 jne	 SHORT $LN44@zipOpenNew

; 743  :         size_comment = 0;

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _size_comment$[ebp], 0

; 744  :     else

  00076	eb 0f		 jmp	 SHORT $LN43@zipOpenNew
$LN44@zipOpenNew:

; 745  :         size_comment = (uInt)strlen(comment);

  00078	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _strlen
  00081	83 c4 04	 add	 esp, 4
  00084	89 45 fc	 mov	 DWORD PTR _size_comment$[ebp], eax
$LN43@zipOpenNew:

; 746  : 
; 747  :     size_filename = (uInt)strlen(filename);

  00087	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _strlen
  00090	83 c4 04	 add	 esp, 4
  00093	89 45 f0	 mov	 DWORD PTR _size_filename$[ebp], eax

; 748  : 
; 749  :     if (zipfi == NULL)

  00096	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  0009a	75 0f		 jne	 SHORT $LN42@zipOpenNew

; 750  :         zi->ci.dosDate = 0;

  0009c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0009f	c7 82 88 40 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+16520], 0

; 751  :     else

  000a9	eb 36		 jmp	 SHORT $LN41@zipOpenNew
$LN42@zipOpenNew:

; 752  :     {
; 753  :         if (zipfi->dosDate != 0)

  000ab	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  000ae	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000b2	74 11		 je	 SHORT $LN40@zipOpenNew

; 754  :             zi->ci.dosDate = zipfi->dosDate;

  000b4	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  000b7	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  000ba	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000bd	89 81 88 40 00
	00		 mov	 DWORD PTR [ecx+16520], eax
  000c3	eb 1c		 jmp	 SHORT $LN41@zipOpenNew
$LN40@zipOpenNew:

; 755  :         else zi->ci.dosDate = ziplocal_TmzDateToDosDate(&zipfi->tmz_date,zipfi->dosDate);

  000c5	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  000c8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000cb	52		 push	 edx
  000cc	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 _ziplocal_TmzDateToDosDate
  000d5	83 c4 08	 add	 esp, 8
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  000db	89 81 88 40 00
	00		 mov	 DWORD PTR [ecx+16520], eax
$LN41@zipOpenNew:

; 756  :     }
; 757  : 
; 758  :     zi->ci.flag = 0;

  000e1	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  000e4	c7 42 7c 00 00
	00 00		 mov	 DWORD PTR [edx+124], 0

; 759  :     if ((level==8) || (level==9))

  000eb	83 7d 2c 08	 cmp	 DWORD PTR _level$[ebp], 8
  000ef	74 06		 je	 SHORT $LN37@zipOpenNew
  000f1	83 7d 2c 09	 cmp	 DWORD PTR _level$[ebp], 9
  000f5	75 0f		 jne	 SHORT $LN38@zipOpenNew
$LN37@zipOpenNew:

; 760  :       zi->ci.flag |= 2;

  000f7	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  000fa	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000fd	83 c9 02	 or	 ecx, 2
  00100	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00103	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx
$LN38@zipOpenNew:

; 761  :     if ((level==2))

  00106	83 7d 2c 02	 cmp	 DWORD PTR _level$[ebp], 2
  0010a	75 0f		 jne	 SHORT $LN36@zipOpenNew

; 762  :       zi->ci.flag |= 4;

  0010c	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0010f	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00112	83 c9 04	 or	 ecx, 4
  00115	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00118	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx
$LN36@zipOpenNew:

; 763  :     if ((level==1))

  0011b	83 7d 2c 01	 cmp	 DWORD PTR _level$[ebp], 1
  0011f	75 0f		 jne	 SHORT $LN35@zipOpenNew

; 764  :       zi->ci.flag |= 6;

  00121	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00124	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00127	83 c9 06	 or	 ecx, 6
  0012a	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0012d	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx
$LN35@zipOpenNew:

; 765  :     if (password != NULL)

  00130	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  00134	74 0f		 je	 SHORT $LN34@zipOpenNew

; 766  :       zi->ci.flag |= 1;

  00136	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00139	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0013c	83 c9 01	 or	 ecx, 1
  0013f	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00142	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx
$LN34@zipOpenNew:

; 767  : 
; 768  :     zi->ci.crc32 = 0;

  00145	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00148	c7 80 8c 40 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+16524], 0

; 769  :     zi->ci.method = method;

  00152	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00155	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  00158	89 91 80 00 00
	00		 mov	 DWORD PTR [ecx+128], edx

; 770  :     zi->ci.encrypt = 0;

  0015e	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00161	c7 80 90 40 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+16528], 0

; 771  :     zi->ci.stream_initialised = 0;

  0016b	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0016e	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 772  :     zi->ci.pos_in_buffered_data = 0;

  00175	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00178	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 773  :     zi->ci.raw = raw;

  0017f	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00182	8b 4d 30	 mov	 ecx, DWORD PTR _raw$[ebp]
  00185	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx

; 774  :     zi->ci.pos_local_header = ZTELL(zi->z_filefunc,zi->filestream) ;

  0018b	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0018e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00191	50		 push	 eax
  00192	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00195	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00198	52		 push	 edx
  00199	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0019c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0019f	ff d1		 call	 ecx
  001a1	83 c4 08	 add	 esp, 8
  001a4	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001a7	89 42 70	 mov	 DWORD PTR [edx+112], eax

; 775  :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename +
; 776  :                                       size_extrafield_global + size_comment;

  001aa	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  001ad	8b 4d f0	 mov	 ecx, DWORD PTR _size_filename$[ebp]
  001b0	8d 54 01 2e	 lea	 edx, DWORD PTR [ecx+eax+46]
  001b4	03 55 fc	 add	 edx, DWORD PTR _size_comment$[ebp]
  001b7	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001ba	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 777  :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader);

  001bd	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001c0	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  001c3	52		 push	 edx
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  001ca	83 c4 04	 add	 esp, 4
  001cd	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001d0	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 778  : 
; 779  :     ziplocal_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  001d3	6a 04		 push	 4
  001d5	68 50 4b 01 02	 push	 33639248		; 02014b50H
  001da	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001dd	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  001e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 780  :     /* version info */
; 781  :     ziplocal_putValue_inmemory(zi->ci.central_header+4,(uLong)VERSIONMADEBY,2);

  001e9	6a 02		 push	 2
  001eb	6a 00		 push	 0
  001ed	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001f0	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  001f3	83 c2 04	 add	 edx, 4
  001f6	52		 push	 edx
  001f7	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  001fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 782  :     ziplocal_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  001ff	6a 02		 push	 2
  00201	6a 14		 push	 20			; 00000014H
  00203	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00206	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00209	83 c1 06	 add	 ecx, 6
  0020c	51		 push	 ecx
  0020d	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00212	83 c4 0c	 add	 esp, 12			; 0000000cH

; 783  :     ziplocal_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  00215	6a 02		 push	 2
  00217	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0021a	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  0021d	50		 push	 eax
  0021e	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00221	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00224	83 c2 08	 add	 edx, 8
  00227	52		 push	 edx
  00228	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0022d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 784  :     ziplocal_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  00230	6a 02		 push	 2
  00232	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00235	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0023b	51		 push	 ecx
  0023c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0023f	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00242	83 c0 0a	 add	 eax, 10			; 0000000aH
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0024b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 785  :     ziplocal_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  0024e	6a 04		 push	 4
  00250	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00253	8b 91 88 40 00
	00		 mov	 edx, DWORD PTR [ecx+16520]
  00259	52		 push	 edx
  0025a	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0025d	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00260	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00263	51		 push	 ecx
  00264	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH

; 786  :     ziplocal_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  0026c	6a 04		 push	 4
  0026e	6a 00		 push	 0
  00270	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00273	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00276	83 c0 10	 add	 eax, 16			; 00000010H
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 787  :     ziplocal_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00282	6a 04		 push	 4
  00284	6a 00		 push	 0
  00286	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00289	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  0028c	83 c2 14	 add	 edx, 20			; 00000014H
  0028f	52		 push	 edx
  00290	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00295	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  :     ziplocal_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  00298	6a 04		 push	 4
  0029a	6a 00		 push	 0
  0029c	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0029f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002a2	83 c1 18	 add	 ecx, 24			; 00000018H
  002a5	51		 push	 ecx
  002a6	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  002ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 789  :     ziplocal_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  002ae	6a 02		 push	 2
  002b0	8b 55 f0	 mov	 edx, DWORD PTR _size_filename$[ebp]
  002b3	52		 push	 edx
  002b4	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  002b7	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002ba	83 c1 1c	 add	 ecx, 28			; 0000001cH
  002bd	51		 push	 ecx
  002be	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  002c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 790  :     ziplocal_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  002c6	6a 02		 push	 2
  002c8	8b 55 20	 mov	 edx, DWORD PTR _size_extrafield_global$[ebp]
  002cb	52		 push	 edx
  002cc	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  002cf	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002d2	83 c1 1e	 add	 ecx, 30			; 0000001eH
  002d5	51		 push	 ecx
  002d6	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 791  :     ziplocal_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  002de	6a 02		 push	 2
  002e0	8b 55 fc	 mov	 edx, DWORD PTR _size_comment$[ebp]
  002e3	52		 push	 edx
  002e4	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  002e7	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002ea	83 c1 20	 add	 ecx, 32			; 00000020H
  002ed	51		 push	 ecx
  002ee	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  002f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 792  :     ziplocal_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  002f6	6a 02		 push	 2
  002f8	6a 00		 push	 0
  002fa	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  002fd	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00300	83 c0 22	 add	 eax, 34			; 00000022H
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00309	83 c4 0c	 add	 esp, 12			; 0000000cH

; 793  : 
; 794  :     if (zipfi==NULL)

  0030c	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  00310	75 18		 jne	 SHORT $LN33@zipOpenNew

; 795  :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  00312	6a 02		 push	 2
  00314	6a 00		 push	 0
  00316	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00319	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  0031c	83 c2 24	 add	 edx, 36			; 00000024H
  0031f	52		 push	 edx
  00320	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  :     else

  00328	eb 1b		 jmp	 SHORT $LN32@zipOpenNew
$LN33@zipOpenNew:

; 797  :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  0032a	6a 02		 push	 2
  0032c	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  0032f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00332	51		 push	 ecx
  00333	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00336	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00339	83 c0 24	 add	 eax, 36			; 00000024H
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  00342	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@zipOpenNew:

; 798  : 
; 799  :     if (zipfi==NULL)

  00345	83 7d 10 00	 cmp	 DWORD PTR _zipfi$[ebp], 0
  00349	75 18		 jne	 SHORT $LN31@zipOpenNew

; 800  :         ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  0034b	6a 04		 push	 4
  0034d	6a 00		 push	 0
  0034f	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00352	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00355	83 c2 26	 add	 edx, 38			; 00000026H
  00358	52		 push	 edx
  00359	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0035e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  :     else

  00361	eb 1b		 jmp	 SHORT $LN30@zipOpenNew
$LN31@zipOpenNew:

; 802  :         ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  00363	6a 04		 push	 4
  00365	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  00368	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0036b	51		 push	 ecx
  0036c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0036f	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00372	83 c0 26	 add	 eax, 38			; 00000026H
  00375	50		 push	 eax
  00376	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0037b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@zipOpenNew:

; 803  : 
; 804  :     ziplocal_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header- zi->add_position_when_writting_offset,4);

  0037e	6a 04		 push	 4
  00380	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00383	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00386	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00389	2b 82 ac 40 00
	00		 sub	 eax, DWORD PTR [edx+16556]
  0038f	50		 push	 eax
  00390	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00393	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00396	83 c2 2a	 add	 edx, 42			; 0000002aH
  00399	52		 push	 edx
  0039a	e8 00 00 00 00	 call	 _ziplocal_putValue_inmemory
  0039f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 805  : 
; 806  :     for (i=0;i<size_filename;i++)

  003a2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003a9	eb 09		 jmp	 SHORT $LN29@zipOpenNew
$LN28@zipOpenNew:
  003ab	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003ae	83 c0 01	 add	 eax, 1
  003b1	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN29@zipOpenNew:
  003b4	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  003b7	3b 4d f0	 cmp	 ecx, DWORD PTR _size_filename$[ebp]
  003ba	73 17		 jae	 SHORT $LN27@zipOpenNew

; 807  :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  003bc	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  003bf	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  003c2	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  003c5	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  003c8	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  003cb	8a 09		 mov	 cl, BYTE PTR [ecx]
  003cd	88 4c 10 2e	 mov	 BYTE PTR [eax+edx+46], cl
  003d1	eb d8		 jmp	 SHORT $LN28@zipOpenNew
$LN27@zipOpenNew:

; 808  : 
; 809  :     for (i=0;i<size_extrafield_global;i++)

  003d3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003da	eb 09		 jmp	 SHORT $LN26@zipOpenNew
$LN25@zipOpenNew:
  003dc	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  003df	83 c2 01	 add	 edx, 1
  003e2	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN26@zipOpenNew:
  003e5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003e8	3b 45 20	 cmp	 eax, DWORD PTR _size_extrafield_global$[ebp]
  003eb	73 1d		 jae	 SHORT $LN24@zipOpenNew

; 810  :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
; 811  :               *(((const char*)extrafield_global)+i);

  003ed	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  003f0	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  003f3	8b 45 f0	 mov	 eax, DWORD PTR _size_filename$[ebp]
  003f6	8d 4c 02 2e	 lea	 ecx, DWORD PTR [edx+eax+46]
  003fa	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  003fd	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  00400	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00403	8a 12		 mov	 dl, BYTE PTR [edx]
  00405	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00408	eb d2		 jmp	 SHORT $LN25@zipOpenNew
$LN24@zipOpenNew:

; 812  : 
; 813  :     for (i=0;i<size_comment;i++)

  0040a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00411	eb 09		 jmp	 SHORT $LN23@zipOpenNew
$LN22@zipOpenNew:
  00413	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00416	83 c0 01	 add	 eax, 1
  00419	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN23@zipOpenNew:
  0041c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0041f	3b 4d fc	 cmp	 ecx, DWORD PTR _size_comment$[ebp]
  00422	73 20		 jae	 SHORT $LN21@zipOpenNew

; 814  :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 815  :               size_extrafield_global+i) = *(comment+i);

  00424	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00427	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0042a	8b 4d f0	 mov	 ecx, DWORD PTR _size_filename$[ebp]
  0042d	8d 54 08 2e	 lea	 edx, DWORD PTR [eax+ecx+46]
  00431	03 55 20	 add	 edx, DWORD PTR _size_extrafield_global$[ebp]
  00434	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00437	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0043a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0043d	8a 00		 mov	 al, BYTE PTR [eax]
  0043f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00442	eb cf		 jmp	 SHORT $LN22@zipOpenNew
$LN21@zipOpenNew:

; 816  :     if (zi->ci.central_header == NULL)

  00444	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00447	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  0044b	75 0a		 jne	 SHORT $LN20@zipOpenNew

; 817  :         return ZIP_INTERNALERROR;

  0044d	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00452	e9 36 03 00 00	 jmp	 $LN50@zipOpenNew
$LN20@zipOpenNew:

; 818  : 
; 819  :     /* write the local header */
; 820  :     err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC,4);

  00457	6a 04		 push	 4
  00459	68 50 4b 03 04	 push	 67324752		; 04034b50H
  0045e	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00461	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00464	50		 push	 eax
  00465	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00468	51		 push	 ecx
  00469	e8 00 00 00 00	 call	 _ziplocal_putValue
  0046e	83 c4 10	 add	 esp, 16			; 00000010H
  00471	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 821  : 
; 822  :     if (err==ZIP_OK)

  00474	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00478	75 1a		 jne	 SHORT $LN19@zipOpenNew

; 823  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  0047a	6a 02		 push	 2
  0047c	6a 14		 push	 20			; 00000014H
  0047e	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00481	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00484	50		 push	 eax
  00485	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00488	51		 push	 ecx
  00489	e8 00 00 00 00	 call	 _ziplocal_putValue
  0048e	83 c4 10	 add	 esp, 16			; 00000010H
  00491	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN19@zipOpenNew:

; 824  :     if (err==ZIP_OK)

  00494	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00498	75 1f		 jne	 SHORT $LN18@zipOpenNew

; 825  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  0049a	6a 02		 push	 2
  0049c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0049f	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  004a2	50		 push	 eax
  004a3	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  004a6	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  004a9	52		 push	 edx
  004aa	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 _ziplocal_putValue
  004b3	83 c4 10	 add	 esp, 16			; 00000010H
  004b6	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN18@zipOpenNew:

; 826  : 
; 827  :     if (err==ZIP_OK)

  004b9	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  004bd	75 22		 jne	 SHORT $LN17@zipOpenNew

; 828  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  004bf	6a 02		 push	 2
  004c1	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  004c4	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  004ca	52		 push	 edx
  004cb	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  004ce	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  004d1	51		 push	 ecx
  004d2	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  004d5	52		 push	 edx
  004d6	e8 00 00 00 00	 call	 _ziplocal_putValue
  004db	83 c4 10	 add	 esp, 16			; 00000010H
  004de	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN17@zipOpenNew:

; 829  : 
; 830  :     if (err==ZIP_OK)

  004e1	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  004e5	75 22		 jne	 SHORT $LN16@zipOpenNew

; 831  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  004e7	6a 04		 push	 4
  004e9	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  004ec	8b 88 88 40 00
	00		 mov	 ecx, DWORD PTR [eax+16520]
  004f2	51		 push	 ecx
  004f3	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  004f6	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  004f9	50		 push	 eax
  004fa	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  004fd	51		 push	 ecx
  004fe	e8 00 00 00 00	 call	 _ziplocal_putValue
  00503	83 c4 10	 add	 esp, 16			; 00000010H
  00506	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN16@zipOpenNew:

; 832  : 
; 833  :     if (err==ZIP_OK)

  00509	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0050d	75 1a		 jne	 SHORT $LN15@zipOpenNew

; 834  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  0050f	6a 04		 push	 4
  00511	6a 00		 push	 0
  00513	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00516	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00519	50		 push	 eax
  0051a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0051d	51		 push	 ecx
  0051e	e8 00 00 00 00	 call	 _ziplocal_putValue
  00523	83 c4 10	 add	 esp, 16			; 00000010H
  00526	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN15@zipOpenNew:

; 835  :     if (err==ZIP_OK)

  00529	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0052d	75 1a		 jne	 SHORT $LN14@zipOpenNew

; 836  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  0052f	6a 04		 push	 4
  00531	6a 00		 push	 0
  00533	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00536	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00539	50		 push	 eax
  0053a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0053d	51		 push	 ecx
  0053e	e8 00 00 00 00	 call	 _ziplocal_putValue
  00543	83 c4 10	 add	 esp, 16			; 00000010H
  00546	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN14@zipOpenNew:

; 837  :     if (err==ZIP_OK)

  00549	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0054d	75 1a		 jne	 SHORT $LN13@zipOpenNew

; 838  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  0054f	6a 04		 push	 4
  00551	6a 00		 push	 0
  00553	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00556	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00559	50		 push	 eax
  0055a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0055d	51		 push	 ecx
  0055e	e8 00 00 00 00	 call	 _ziplocal_putValue
  00563	83 c4 10	 add	 esp, 16			; 00000010H
  00566	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN13@zipOpenNew:

; 839  : 
; 840  :     if (err==ZIP_OK)

  00569	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0056d	75 1c		 jne	 SHORT $LN12@zipOpenNew

; 841  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  0056f	6a 02		 push	 2
  00571	8b 55 f0	 mov	 edx, DWORD PTR _size_filename$[ebp]
  00574	52		 push	 edx
  00575	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00578	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0057b	51		 push	 ecx
  0057c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0057f	52		 push	 edx
  00580	e8 00 00 00 00	 call	 _ziplocal_putValue
  00585	83 c4 10	 add	 esp, 16			; 00000010H
  00588	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN12@zipOpenNew:

; 842  : 
; 843  :     if (err==ZIP_OK)

  0058b	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0058f	75 1c		 jne	 SHORT $LN11@zipOpenNew

; 844  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield_local,2);

  00591	6a 02		 push	 2
  00593	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00596	50		 push	 eax
  00597	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0059a	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0059d	52		 push	 edx
  0059e	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  005a1	50		 push	 eax
  005a2	e8 00 00 00 00	 call	 _ziplocal_putValue
  005a7	83 c4 10	 add	 esp, 16			; 00000010H
  005aa	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN11@zipOpenNew:

; 845  : 
; 846  :     if ((err==ZIP_OK) && (size_filename>0))

  005ad	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  005b1	75 33		 jne	 SHORT $LN10@zipOpenNew
  005b3	83 7d f0 00	 cmp	 DWORD PTR _size_filename$[ebp], 0
  005b7	76 2d		 jbe	 SHORT $LN10@zipOpenNew

; 847  :         if (ZWRITE(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  005b9	8b 4d f0	 mov	 ecx, DWORD PTR _size_filename$[ebp]
  005bc	51		 push	 ecx
  005bd	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  005c0	52		 push	 edx
  005c1	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  005c4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  005c7	51		 push	 ecx
  005c8	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  005cb	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  005ce	50		 push	 eax
  005cf	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  005d2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  005d5	ff d2		 call	 edx
  005d7	83 c4 10	 add	 esp, 16			; 00000010H
  005da	3b 45 f0	 cmp	 eax, DWORD PTR _size_filename$[ebp]
  005dd	74 07		 je	 SHORT $LN10@zipOpenNew

; 848  :                 err = ZIP_ERRNO;

  005df	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@zipOpenNew:

; 849  : 
; 850  :     if ((err==ZIP_OK) && (size_extrafield_local>0))

  005e6	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  005ea	75 33		 jne	 SHORT $LN8@zipOpenNew
  005ec	83 7d 18 00	 cmp	 DWORD PTR _size_extrafield_local$[ebp], 0
  005f0	76 2d		 jbe	 SHORT $LN8@zipOpenNew

; 851  :         if (ZWRITE(zi->z_filefunc,zi->filestream,extrafield_local,size_extrafield_local)
; 852  :                                                                            !=size_extrafield_local)

  005f2	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  005f5	50		 push	 eax
  005f6	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  005f9	51		 push	 ecx
  005fa	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  005fd	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00600	50		 push	 eax
  00601	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00604	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00607	52		 push	 edx
  00608	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0060b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0060e	ff d1		 call	 ecx
  00610	83 c4 10	 add	 esp, 16			; 00000010H
  00613	3b 45 18	 cmp	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00616	74 07		 je	 SHORT $LN8@zipOpenNew

; 853  :                 err = ZIP_ERRNO;

  00618	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@zipOpenNew:

; 854  : 
; 855  :     zi->ci.stream.avail_in = (uInt)0;

  0061f	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00622	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0

; 856  :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00629	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0062c	c7 40 40 00 40
	00 00		 mov	 DWORD PTR [eax+64], 16384 ; 00004000H

; 857  :     zi->ci.stream.next_out = zi->ci.buffered_data;

  00633	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00636	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0063c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0063f	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 858  :     zi->ci.stream.total_in = 0;

  00642	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00645	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 859  :     zi->ci.stream.total_out = 0;

  0064c	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0064f	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 860  : 
; 861  :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00656	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0065a	75 7c		 jne	 SHORT $LN6@zipOpenNew
  0065c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0065f	83 ba 80 00 00
	00 08		 cmp	 DWORD PTR [edx+128], 8
  00666	75 70		 jne	 SHORT $LN6@zipOpenNew
  00668	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0066b	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00672	75 64		 jne	 SHORT $LN6@zipOpenNew

; 862  :     {
; 863  :         zi->ci.stream.zalloc = (alloc_func)0;

  00674	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00677	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 864  :         zi->ci.stream.zfree = (free_func)0;

  0067e	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00681	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], 0

; 865  :         zi->ci.stream.opaque = (voidpf)0;

  00688	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0068b	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 866  : 
; 867  :         if (windowBits>0)

  00692	83 7d 34 00	 cmp	 DWORD PTR _windowBits$[ebp], 0
  00696	7e 08		 jle	 SHORT $LN5@zipOpenNew

; 868  :             windowBits = -windowBits;

  00698	8b 4d 34	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  0069b	f7 d9		 neg	 ecx
  0069d	89 4d 34	 mov	 DWORD PTR _windowBits$[ebp], ecx
$LN5@zipOpenNew:

; 869  : 
; 870  :         err = deflateInit2(&zi->ci.stream, level,
; 871  :                Z_DEFLATED, windowBits, memLevel, strategy);

  006a0	6a 38		 push	 56			; 00000038H
  006a2	68 00 00 00 00	 push	 OFFSET ??_C@_05GDHACFMB@1?42?43?$AA@
  006a7	8b 55 3c	 mov	 edx, DWORD PTR _strategy$[ebp]
  006aa	52		 push	 edx
  006ab	8b 45 38	 mov	 eax, DWORD PTR _memLevel$[ebp]
  006ae	50		 push	 eax
  006af	8b 4d 34	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  006b2	51		 push	 ecx
  006b3	6a 08		 push	 8
  006b5	8b 55 2c	 mov	 edx, DWORD PTR _level$[ebp]
  006b8	52		 push	 edx
  006b9	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  006bc	83 c0 30	 add	 eax, 48			; 00000030H
  006bf	50		 push	 eax
  006c0	e8 00 00 00 00	 call	 _deflateInit2_@32
  006c5	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 872  : 
; 873  :         if (err==Z_OK)

  006c8	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  006cc	75 0a		 jne	 SHORT $LN6@zipOpenNew

; 874  :             zi->ci.stream_initialised = 1;

  006ce	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  006d1	c7 41 68 01 00
	00 00		 mov	 DWORD PTR [ecx+104], 1
$LN6@zipOpenNew:

; 875  :     }
; 876  : #    ifndef NOCRYPT
; 877  :     zi->ci.crypt_header_size = 0;

  006d8	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  006db	c7 82 a4 40 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+16548], 0

; 878  :     if ((err==Z_OK) && (password != NULL))

  006e5	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  006e9	0f 85 8b 00 00
	00		 jne	 $LN3@zipOpenNew
  006ef	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  006f3	0f 84 81 00 00
	00		 je	 $LN3@zipOpenNew

; 879  :     {
; 880  :         unsigned char bufHead[RAND_HEAD_LEN];
; 881  :         unsigned int sizeHead;
; 882  :         zi->ci.encrypt = 1;

  006f9	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  006fc	c7 80 90 40 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+16528], 1

; 883  :         zi->ci.pcrc_32_tab = get_crc_table();

  00706	e8 00 00 00 00	 call	 _get_crc_table@0
  0070b	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0070e	89 81 a0 40 00
	00		 mov	 DWORD PTR [ecx+16544], eax

; 884  :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 885  : 
; 886  :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  00714	8b 55 44	 mov	 edx, DWORD PTR _crcForCrypting$[ebp]
  00717	52		 push	 edx
  00718	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  0071b	8b 88 a0 40 00
	00		 mov	 ecx, DWORD PTR [eax+16544]
  00721	51		 push	 ecx
  00722	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00725	81 c2 94 40 00
	00		 add	 edx, 16532		; 00004094H
  0072b	52		 push	 edx
  0072c	6a 0c		 push	 12			; 0000000cH
  0072e	8d 45 dc	 lea	 eax, DWORD PTR _bufHead$80006[ebp]
  00731	50		 push	 eax
  00732	8b 4d 40	 mov	 ecx, DWORD PTR _password$[ebp]
  00735	51		 push	 ecx
  00736	e8 00 00 00 00	 call	 _crypthead
  0073b	83 c4 18	 add	 esp, 24			; 00000018H
  0073e	89 45 e8	 mov	 DWORD PTR _sizeHead$80007[ebp], eax

; 887  :         zi->ci.crypt_header_size = sizeHead;

  00741	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00744	8b 45 e8	 mov	 eax, DWORD PTR _sizeHead$80007[ebp]
  00747	89 82 a4 40 00
	00		 mov	 DWORD PTR [edx+16548], eax

; 888  : 
; 889  :         if (ZWRITE(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  0074d	8b 4d e8	 mov	 ecx, DWORD PTR _sizeHead$80007[ebp]
  00750	51		 push	 ecx
  00751	8d 55 dc	 lea	 edx, DWORD PTR _bufHead$80006[ebp]
  00754	52		 push	 edx
  00755	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00758	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0075b	51		 push	 ecx
  0075c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0075f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00762	50		 push	 eax
  00763	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00766	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00769	ff d2		 call	 edx
  0076b	83 c4 10	 add	 esp, 16			; 00000010H
  0076e	3b 45 e8	 cmp	 eax, DWORD PTR _sizeHead$80007[ebp]
  00771	74 07		 je	 SHORT $LN3@zipOpenNew

; 890  :                 err = ZIP_ERRNO;

  00773	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN3@zipOpenNew:

; 891  :     }
; 892  : #    endif
; 893  : 
; 894  :     if (err==Z_OK)

  0077a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0077e	75 0a		 jne	 SHORT $LN1@zipOpenNew

; 895  :         zi->in_opened_file_inzip = 1;

  00780	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00783	c7 40 2c 01 00
	00 00		 mov	 DWORD PTR [eax+44], 1
$LN1@zipOpenNew:

; 896  :     return err;

  0078a	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
$LN50@zipOpenNew:

; 897  : }

  0078d	8b e5		 mov	 esp, ebp
  0078f	5d		 pop	 ebp
  00790	c2 40 00	 ret	 64			; 00000040H
_zipOpenNewFileInZip3@64 ENDP
_TEXT	ENDS
PUBLIC	_zipOpen@8
; Function compile flags: /Odtp
;	COMDAT _zipOpen@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen@8 PROC						; COMDAT

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 687  :     return zipOpen2(pathname,append,NULL,NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 0c	 mov	 eax, DWORD PTR _append$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _zipOpen2@16

; 688  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_zipOpen@8 ENDP
PUBLIC	_zipClose@8
; Function compile flags: /Odtp
;	COMDAT _zipClose@8
_TEXT	SEGMENT
_ldi$80143 = -24					; size = 4
_zi$ = -20						; size = 4
_size_global_comment$ = -16				; size = 4
_err$ = -12						; size = 4
_size_centraldir$ = -8					; size = 4
_centraldir_pos_inzip$ = -4				; size = 4
_file$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_zipClose@8 PROC					; COMDAT

; 1136 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1137 :     zip_internal* zi;
; 1138 :     int err = 0;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1139 :     uLong size_centraldir = 0;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _size_centraldir$[ebp], 0

; 1140 :     uLong centraldir_pos_inzip;
; 1141 :     uInt size_global_comment;
; 1142 :     if (file == NULL)

  00014	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00018	75 0a		 jne	 SHORT $LN24@zipClose

; 1143 :         return ZIP_PARAMERROR;

  0001a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0001f	e9 a0 02 00 00	 jmp	 $LN25@zipClose
$LN24@zipClose:

; 1144 :     zi = (zip_internal*)file;

  00024	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00027	89 45 ec	 mov	 DWORD PTR _zi$[ebp], eax

; 1145 : 
; 1146 :     if (zi->in_opened_file_inzip == 1)

  0002a	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0002d	83 79 2c 01	 cmp	 DWORD PTR [ecx+44], 1
  00031	75 0c		 jne	 SHORT $LN23@zipClose

; 1147 :     {
; 1148 :         err = zipCloseFileInZip (file);

  00033	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  0003c	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN23@zipClose:

; 1149 :     }
; 1150 : 
; 1151 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1152 :     if (global_comment==NULL)

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  00043	75 0c		 jne	 SHORT $LN22@zipClose

; 1153 :         global_comment = zi->globalcomment;

  00045	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00048	8b 88 b4 40 00
	00		 mov	 ecx, DWORD PTR [eax+16564]
  0004e	89 4d 0c	 mov	 DWORD PTR _global_comment$[ebp], ecx
$LN22@zipClose:

; 1154 : #endif
; 1155 :     if (global_comment==NULL)

  00051	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  00055	75 09		 jne	 SHORT $LN21@zipClose

; 1156 :         size_global_comment = 0;

  00057	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _size_global_comment$[ebp], 0

; 1157 :     else

  0005e	eb 0f		 jmp	 SHORT $LN20@zipClose
$LN21@zipClose:

; 1158 :         size_global_comment = (uInt)strlen(global_comment);

  00060	8b 55 0c	 mov	 edx, DWORD PTR _global_comment$[ebp]
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _strlen
  00069	83 c4 04	 add	 esp, 4
  0006c	89 45 f0	 mov	 DWORD PTR _size_global_comment$[ebp], eax
$LN20@zipClose:

; 1159 : 
; 1160 :     centraldir_pos_inzip = ZTELL(zi->z_filefunc,zi->filestream);

  0006f	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00072	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00075	51		 push	 ecx
  00076	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00079	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0007c	50		 push	 eax
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00080	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00083	ff d2		 call	 edx
  00085	83 c4 08	 add	 esp, 8
  00088	89 45 fc	 mov	 DWORD PTR _centraldir_pos_inzip$[ebp], eax

; 1161 :     if (err==ZIP_OK)

  0008b	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0008f	75 6a		 jne	 SHORT $LN19@zipClose

; 1162 :     {
; 1163 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block ;

  00091	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00094	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00097	89 4d e8	 mov	 DWORD PTR _ldi$80143[ebp], ecx
$LN18@zipClose:

; 1164 :         while (ldi!=NULL)

  0009a	83 7d e8 00	 cmp	 DWORD PTR _ldi$80143[ebp], 0
  0009e	74 5b		 je	 SHORT $LN19@zipClose

; 1165 :         {
; 1166 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  000a0	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000a4	75 3f		 jne	 SHORT $LN16@zipClose
  000a6	8b 55 e8	 mov	 edx, DWORD PTR _ldi$80143[ebp]
  000a9	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000ad	76 36		 jbe	 SHORT $LN16@zipClose

; 1167 :                 if (ZWRITE(zi->z_filefunc,zi->filestream,
; 1168 :                            ldi->data,ldi->filled_in_this_block)
; 1169 :                               !=ldi->filled_in_this_block )

  000af	8b 45 e8	 mov	 eax, DWORD PTR _ldi$80143[ebp]
  000b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b5	51		 push	 ecx
  000b6	8b 55 e8	 mov	 edx, DWORD PTR _ldi$80143[ebp]
  000b9	83 c2 10	 add	 edx, 16			; 00000010H
  000bc	52		 push	 edx
  000bd	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  000c0	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000c3	51		 push	 ecx
  000c4	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  000c7	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000ca	50		 push	 eax
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  000ce	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d1	ff d2		 call	 edx
  000d3	83 c4 10	 add	 esp, 16			; 00000010H
  000d6	8b 4d e8	 mov	 ecx, DWORD PTR _ldi$80143[ebp]
  000d9	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000dc	74 07		 je	 SHORT $LN16@zipClose

; 1170 :                     err = ZIP_ERRNO;

  000de	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN16@zipClose:

; 1171 : 
; 1172 :             size_centraldir += ldi->filled_in_this_block;

  000e5	8b 55 e8	 mov	 edx, DWORD PTR _ldi$80143[ebp]
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _size_centraldir$[ebp]
  000eb	03 42 08	 add	 eax, DWORD PTR [edx+8]
  000ee	89 45 f8	 mov	 DWORD PTR _size_centraldir$[ebp], eax

; 1173 :             ldi = ldi->next_datablock;

  000f1	8b 4d e8	 mov	 ecx, DWORD PTR _ldi$80143[ebp]
  000f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f6	89 55 e8	 mov	 DWORD PTR _ldi$80143[ebp], edx

; 1174 :         }

  000f9	eb 9f		 jmp	 SHORT $LN18@zipClose
$LN19@zipClose:

; 1175 :     }
; 1176 :     free_datablock(zi->central_dir.first_block);

  000fb	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  000fe	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 _free_datablock
  00107	83 c4 04	 add	 esp, 4

; 1177 : 
; 1178 :     if (err==ZIP_OK) /* Magic End */

  0010a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0010e	75 1d		 jne	 SHORT $LN14@zipClose

; 1179 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  00110	6a 04		 push	 4
  00112	68 50 4b 05 06	 push	 101010256		; 06054b50H
  00117	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0011a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0011d	50		 push	 eax
  0011e	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00121	51		 push	 ecx
  00122	e8 00 00 00 00	 call	 _ziplocal_putValue
  00127	83 c4 10	 add	 esp, 16			; 00000010H
  0012a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN14@zipClose:

; 1180 : 
; 1181 :     if (err==ZIP_OK) /* number of this disk */

  0012d	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00131	75 1a		 jne	 SHORT $LN13@zipClose

; 1182 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00133	6a 02		 push	 2
  00135	6a 00		 push	 0
  00137	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0013a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0013d	50		 push	 eax
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 _ziplocal_putValue
  00147	83 c4 10	 add	 esp, 16			; 00000010H
  0014a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN13@zipClose:

; 1183 : 
; 1184 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0014d	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00151	75 1a		 jne	 SHORT $LN12@zipClose

; 1185 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00153	6a 02		 push	 2
  00155	6a 00		 push	 0
  00157	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0015a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0015d	50		 push	 eax
  0015e	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 _ziplocal_putValue
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN12@zipClose:

; 1186 : 
; 1187 :     if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  0016d	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00171	75 22		 jne	 SHORT $LN11@zipClose

; 1188 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00173	6a 02		 push	 2
  00175	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  00178	8b 82 b0 40 00
	00		 mov	 eax, DWORD PTR [edx+16560]
  0017e	50		 push	 eax
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00182	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00185	52		 push	 edx
  00186	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 _ziplocal_putValue
  0018f	83 c4 10	 add	 esp, 16			; 00000010H
  00192	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN11@zipClose:

; 1189 : 
; 1190 :     if (err==ZIP_OK) /* total number of entries in the central dir */

  00195	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00199	75 22		 jne	 SHORT $LN10@zipClose

; 1191 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  0019b	6a 02		 push	 2
  0019d	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001a0	8b 91 b0 40 00
	00		 mov	 edx, DWORD PTR [ecx+16560]
  001a6	52		 push	 edx
  001a7	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001aa	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ad	51		 push	 ecx
  001ae	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001b1	52		 push	 edx
  001b2	e8 00 00 00 00	 call	 _ziplocal_putValue
  001b7	83 c4 10	 add	 esp, 16			; 00000010H
  001ba	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN10@zipClose:

; 1192 : 
; 1193 :     if (err==ZIP_OK) /* size of the central directory */

  001bd	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  001c1	75 1c		 jne	 SHORT $LN9@zipClose

; 1194 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  001c3	6a 04		 push	 4
  001c5	8b 45 f8	 mov	 eax, DWORD PTR _size_centraldir$[ebp]
  001c8	50		 push	 eax
  001c9	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001cc	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001cf	52		 push	 edx
  001d0	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _ziplocal_putValue
  001d9	83 c4 10	 add	 esp, 16			; 00000010H
  001dc	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN9@zipClose:

; 1195 : 
; 1196 :     if (err==ZIP_OK) /* offset of start of central directory with respect to the

  001df	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  001e3	75 25		 jne	 SHORT $LN8@zipClose

; 1197 :                             starting disk number */
; 1198 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,
; 1199 :                                 (uLong)(centraldir_pos_inzip - zi->add_position_when_writting_offset),4);

  001e5	6a 04		 push	 4
  001e7	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  001ea	8b 55 fc	 mov	 edx, DWORD PTR _centraldir_pos_inzip$[ebp]
  001ed	2b 91 ac 40 00
	00		 sub	 edx, DWORD PTR [ecx+16556]
  001f3	52		 push	 edx
  001f4	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  001f7	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001fa	51		 push	 ecx
  001fb	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  001fe	52		 push	 edx
  001ff	e8 00 00 00 00	 call	 _ziplocal_putValue
  00204	83 c4 10	 add	 esp, 16			; 00000010H
  00207	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN8@zipClose:

; 1200 : 
; 1201 :     if (err==ZIP_OK) /* zipfile comment length */

  0020a	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0020e	75 1c		 jne	 SHORT $LN7@zipClose

; 1202 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00210	6a 02		 push	 2
  00212	8b 45 f0	 mov	 eax, DWORD PTR _size_global_comment$[ebp]
  00215	50		 push	 eax
  00216	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00219	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0021c	52		 push	 edx
  0021d	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 _ziplocal_putValue
  00226	83 c4 10	 add	 esp, 16			; 00000010H
  00229	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN7@zipClose:

; 1203 : 
; 1204 :     if ((err==ZIP_OK) && (size_global_comment>0))

  0022c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00230	75 33		 jne	 SHORT $LN6@zipClose
  00232	83 7d f0 00	 cmp	 DWORD PTR _size_global_comment$[ebp], 0
  00236	76 2d		 jbe	 SHORT $LN6@zipClose

; 1205 :         if (ZWRITE(zi->z_filefunc,zi->filestream,
; 1206 :                    global_comment,size_global_comment) != size_global_comment)

  00238	8b 4d f0	 mov	 ecx, DWORD PTR _size_global_comment$[ebp]
  0023b	51		 push	 ecx
  0023c	8b 55 0c	 mov	 edx, DWORD PTR _global_comment$[ebp]
  0023f	52		 push	 edx
  00240	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00243	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00246	51		 push	 ecx
  00247	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0024a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0024d	50		 push	 eax
  0024e	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00251	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00254	ff d2		 call	 edx
  00256	83 c4 10	 add	 esp, 16			; 00000010H
  00259	3b 45 f0	 cmp	 eax, DWORD PTR _size_global_comment$[ebp]
  0025c	74 07		 je	 SHORT $LN6@zipClose

; 1207 :                 err = ZIP_ERRNO;

  0025e	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN6@zipClose:

; 1208 : 
; 1209 :     if (ZCLOSE(zi->z_filefunc,zi->filestream) != 0)

  00265	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00268	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0026b	51		 push	 ecx
  0026c	8b 55 ec	 mov	 edx, DWORD PTR _zi$[ebp]
  0026f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00272	50		 push	 eax
  00273	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  00276	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00279	ff d2		 call	 edx
  0027b	83 c4 08	 add	 esp, 8
  0027e	85 c0		 test	 eax, eax
  00280	74 0d		 je	 SHORT $LN4@zipClose

; 1210 :         if (err == ZIP_OK)

  00282	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00286	75 07		 jne	 SHORT $LN4@zipClose

; 1211 :             err = ZIP_ERRNO;

  00288	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN4@zipClose:

; 1212 : 
; 1213 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1214 :     TRYFREE(zi->globalcomment);

  0028f	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  00292	83 b8 b4 40 00
	00 00		 cmp	 DWORD PTR [eax+16564], 0
  00299	74 13		 je	 SHORT $LN2@zipClose
  0029b	8b 4d ec	 mov	 ecx, DWORD PTR _zi$[ebp]
  0029e	8b 91 b4 40 00
	00		 mov	 edx, DWORD PTR [ecx+16564]
  002a4	52		 push	 edx
  002a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  002ab	83 c4 04	 add	 esp, 4
$LN2@zipClose:

; 1215 : #endif
; 1216 :     TRYFREE(zi);

  002ae	83 7d ec 00	 cmp	 DWORD PTR _zi$[ebp], 0
  002b2	74 0d		 je	 SHORT $LN1@zipClose
  002b4	8b 45 ec	 mov	 eax, DWORD PTR _zi$[ebp]
  002b7	50		 push	 eax
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  002be	83 c4 04	 add	 esp, 4
$LN1@zipClose:

; 1217 : 
; 1218 :     return err;

  002c1	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
$LN25@zipClose:

; 1219 : }

  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c2 08 00	 ret	 8
_zipClose@8 ENDP
_TEXT	ENDS
PUBLIC	_zipOpenNewFileInZip2@44
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip2@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zipOpenNewFileInZip2@44 PROC				; COMDAT

; 914  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 915  :     return zipOpenNewFileInZip3 (file, filename, zipfi,
; 916  :                                  extrafield_local, size_extrafield_local,
; 917  :                                  extrafield_global, size_extrafield_global,
; 918  :                                  comment, method, level, raw,
; 919  :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 920  :                                  NULL, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 08		 push	 8
  0000b	6a f1		 push	 -15			; fffffff1H
  0000d	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 28	 mov	 edx, DWORD PTR _method$[ebp]
  00018	52		 push	 edx
  00019	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 1c	 mov	 edx, DWORD PTR _extrafield_global$[ebp]
  00024	52		 push	 edx
  00025	8b 45 18	 mov	 eax, DWORD PTR _size_extrafield_local$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 14	 mov	 ecx, DWORD PTR _extrafield_local$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 10	 mov	 edx, DWORD PTR _zipfi$[ebp]
  00030	52		 push	 edx
  00031	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _zipOpenNewFileInZip3@64

; 921  : }

  0003e	5d		 pop	 ebp
  0003f	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip2@44 ENDP
PUBLIC	_zipOpenNewFileInZip@40
; Function compile flags: /Odtp
;	COMDAT _zipOpenNewFileInZip@40
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zipOpenNewFileInZip@40 PROC				; COMDAT

; 937  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 938  :     return zipOpenNewFileInZip2 (file, filename, zipfi,
; 939  :                                  extrafield_local, size_extrafield_local,
; 940  :                                  extrafield_global, size_extrafield_global,
; 941  :                                  comment, method, level, 0);

  00003	6a 00		 push	 0
  00005	8b 45 2c	 mov	 eax, DWORD PTR _level$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 28	 mov	 ecx, DWORD PTR _method$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 24	 mov	 edx, DWORD PTR _comment$[ebp]
  00010	52		 push	 edx
  00011	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 1c	 mov	 ecx, DWORD PTR _extrafield_global$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 18	 mov	 edx, DWORD PTR _size_extrafield_local$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 14	 mov	 eax, DWORD PTR _extrafield_local$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _zipfi$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _zipOpenNewFileInZip2@44

; 942  : }

  00032	5d		 pop	 ebp
  00033	c2 28 00	 ret	 40			; 00000028H
_zipOpenNewFileInZip@40 ENDP
_TEXT	ENDS
END
