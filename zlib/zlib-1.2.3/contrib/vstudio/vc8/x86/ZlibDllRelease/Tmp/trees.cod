; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__dist_code
PUBLIC	__length_code
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+7
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+1
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_windup PROC						; COMDAT

; 1180 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1181 :     if (s->bi_valid > 8) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	83 b8 bc 16 00
	00 08		 cmp	 DWORD PTR [eax+5820], 8
  0000d	7e 5b		 jle	 SHORT $LN3@bi_windup

; 1182 :         put_short(s, s->bi_buf);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00019	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00022	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00025	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00028	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00034	83 c2 01	 add	 edx, 1
  00037	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00040	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00047	c1 fa 08	 sar	 edx, 8
  0004a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00050	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00053	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00056	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005f	83 c2 01	 add	 edx, 1
  00062	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00065	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00068	eb 33		 jmp	 SHORT $LN2@bi_windup
$LN3@bi_windup:

; 1183 :     } else if (s->bi_valid > 0) {

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006d	83 b9 bc 16 00
	00 00		 cmp	 DWORD PTR [ecx+5820], 0
  00074	7e 27		 jle	 SHORT $LN2@bi_windup

; 1184 :         put_byte(s, (Byte)s->bi_buf);

  00076	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00079	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00085	8a 89 b8 16 00
	00		 mov	 cl, BYTE PTR [ecx+5816]
  0008b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0008e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00091	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00094	83 c0 01	 add	 eax, 1
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN2@bi_windup:

; 1185 :     }
; 1186 :     s->bi_buf = 0;

  0009d	33 d2		 xor	 edx, edx
  0009f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a2	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx

; 1187 :     s->bi_valid = 0;

  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ac	c7 81 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5820], 0

; 1188 : #ifdef DEBUG
; 1189 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1190 : #endif
; 1191 : }

  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_bi_windup ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _bi_flush
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_flush PROC						; COMDAT

; 1163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1164 :     if (s->bi_valid == 16) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	83 b8 bc 16 00
	00 10		 cmp	 DWORD PTR [eax+5820], 16 ; 00000010H
  0000d	75 74		 jne	 SHORT $LN3@bi_flush

; 1165 :         put_short(s, s->bi_buf);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00019	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00022	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00025	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00028	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00034	83 c2 01	 add	 edx, 1
  00037	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00040	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00047	c1 fa 08	 sar	 edx, 8
  0004a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00050	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00053	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00056	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005f	83 c2 01	 add	 edx, 1
  00062	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00065	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1166 :         s->bi_buf = 0;

  00068	33 c9		 xor	 ecx, ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006d	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx

; 1167 :         s->bi_valid = 0;

  00074	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00077	c7 80 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5820], 0
  00081	eb 60		 jmp	 SHORT $LN4@bi_flush
$LN3@bi_flush:

; 1168 :     } else if (s->bi_valid >= 8) {

  00083	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00086	83 b9 bc 16 00
	00 08		 cmp	 DWORD PTR [ecx+5820], 8
  0008d	7c 54		 jl	 SHORT $LN4@bi_flush

; 1169 :         put_byte(s, (Byte)s->bi_buf);

  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00098	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009e	8a 89 b8 16 00
	00		 mov	 cl, BYTE PTR [ecx+5816]
  000a4	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ad	83 c0 01	 add	 eax, 1
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b3	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1170 :         s->bi_buf >>= 8;

  000b6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b9	66 8b 82 b8 16
	00 00		 mov	 ax, WORD PTR [edx+5816]
  000c0	66 c1 e8 08	 shr	 ax, 8
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c7	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 1171 :         s->bi_valid -= 8;

  000ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d1	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000d7	83 e8 08	 sub	 eax, 8
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000dd	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN4@bi_flush:

; 1172 :     }
; 1173 : }

  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
_bi_flush ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_res$ = -4						; size = 4
_code$ = 8						; size = 4
_len$ = 12						; size = 4
_bi_reverse PROC					; COMDAT

; 1149 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1150 :     register unsigned res = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0
$LN3@bi_reverse:

; 1151 :     do {
; 1152 :         res |= code & 1;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0b 45 fc	 or	 eax, DWORD PTR _res$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 1153 :         code >>= 1, res <<= 1;

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _code$[ebp]
  0001a	d1 e9		 shr	 ecx, 1
  0001c	89 4d 08	 mov	 DWORD PTR _code$[ebp], ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _res$[ebp]
  00022	d1 e2		 shl	 edx, 1
  00024	89 55 fc	 mov	 DWORD PTR _res$[ebp], edx

; 1154 :     } while (--len > 0);

  00027	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0002a	83 e8 01	 sub	 eax, 1
  0002d	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
  00030	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00034	7f d5		 jg	 SHORT $LN3@bi_reverse

; 1155 :     return res >> 1;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _res$[ebp]
  00039	d1 e8		 shr	 eax, 1

; 1156 : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_bi_reverse ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _set_data_type
_TEXT	SEGMENT
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_set_data_type PROC					; COMDAT

; 1128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1129 :     int n;
; 1130 : 
; 1131 :     for (n = 0; n < 9; n++)

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0000b	eb 09		 jmp	 SHORT $LN9@set_data_t
$LN8@set_data_t:
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00010	83 c0 01	 add	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN9@set_data_t:
  00016	83 7d fc 09	 cmp	 DWORD PTR _n$[ebp], 9
  0001a	7d 16		 jge	 SHORT $LN7@set_data_t

; 1132 :         if (s->dyn_ltree[n].Freq != 0)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00022	0f b7 84 8a 94
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+148]
  0002a	85 c0		 test	 eax, eax
  0002c	74 02		 je	 SHORT $LN6@set_data_t

; 1133 :             break;

  0002e	eb 02		 jmp	 SHORT $LN7@set_data_t
$LN6@set_data_t:

; 1134 :     if (n == 9)

  00030	eb db		 jmp	 SHORT $LN8@set_data_t
$LN7@set_data_t:
  00032	83 7d fc 09	 cmp	 DWORD PTR _n$[ebp], 9
  00036	75 2e		 jne	 SHORT $LN5@set_data_t

; 1135 :         for (n = 14; n < 32; n++)

  00038	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR _n$[ebp], 14	; 0000000eH
  0003f	eb 09		 jmp	 SHORT $LN4@set_data_t
$LN3@set_data_t:
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00044	83 c1 01	 add	 ecx, 1
  00047	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@set_data_t:
  0004a	83 7d fc 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  0004e	7d 16		 jge	 SHORT $LN5@set_data_t

; 1136 :             if (s->dyn_ltree[n].Freq != 0)

  00050	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00053	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00056	0f b7 8c 90 94
	00 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+148]
  0005e	85 c9		 test	 ecx, ecx
  00060	74 02		 je	 SHORT $LN1@set_data_t

; 1137 :                 break;

  00062	eb 02		 jmp	 SHORT $LN5@set_data_t
$LN1@set_data_t:

; 1138 :     s->strm->data_type = (n == 32) ? Z_TEXT : Z_BINARY;

  00064	eb db		 jmp	 SHORT $LN3@set_data_t
$LN5@set_data_t:
  00066	33 d2		 xor	 edx, edx
  00068	83 7d fc 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  0006c	0f 94 c2	 sete	 dl
  0006f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	89 51 2c	 mov	 DWORD PTR [ecx+44], edx

; 1139 : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_set_data_type ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _compress_block
_TEXT	SEGMENT
tv299 = -72						; size = 4
_val$78207 = -68					; size = 4
_len$78203 = -64					; size = 4
_val$78195 = -60					; size = 4
_len$78191 = -56					; size = 4
_val$78182 = -52					; size = 4
_len$78178 = -48					; size = 4
_val$78170 = -44					; size = 4
_len$78166 = -40					; size = 4
_val$78157 = -36					; size = 4
_len$78153 = -32					; size = 4
_val$78144 = -28					; size = 4
_len$78140 = -24					; size = 4
_dist$ = -20						; size = 4
_lc$ = -16						; size = 4
_lx$ = -12						; size = 4
_code$ = -8						; size = 4
_extra$ = -4						; size = 4
_s$ = 8							; size = 4
_ltree$ = 12						; size = 4
_dtree$ = 16						; size = 4
_compress_block PROC					; COMDAT

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 1077 :     unsigned dist;      /* distance of matched string */
; 1078 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1079 :     unsigned lx = 0;    /* running index in l_buf */

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lx$[ebp], 0

; 1080 :     unsigned code;      /* the code to send */
; 1081 :     int extra;          /* number of extra bits to send */
; 1082 : 
; 1083 :     if (s->last_lit != 0) do {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	83 b8 a0 16 00
	00 00		 cmp	 DWORD PTR [eax+5792], 0
  00017	0f 84 8d 06 00
	00		 je	 $LN20@compress_b
$LN19@compress_b:

; 1084 :         dist = s->d_buf[lx];

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00020	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  00026	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  00029	0f b7 0c 42	 movzx	 ecx, WORD PTR [edx+eax*2]
  0002d	89 4d ec	 mov	 DWORD PTR _dist$[ebp], ecx

; 1085 :         lc = s->l_buf[lx++];

  00030	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00033	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  00039	8b 4d f4	 mov	 ecx, DWORD PTR _lx$[ebp]
  0003c	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00040	89 55 f0	 mov	 DWORD PTR _lc$[ebp], edx
  00043	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f4	 mov	 DWORD PTR _lx$[ebp], eax

; 1086 :         if (dist == 0) {

  0004c	83 7d ec 00	 cmp	 DWORD PTR _dist$[ebp], 0
  00050	0f 85 2f 01 00
	00		 jne	 $LN16@compress_b

; 1087 :             send_code(s, lc, ltree); /* send a literal byte */

  00056	8b 4d f0	 mov	 ecx, DWORD PTR _lc$[ebp]
  00059	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  0005c	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  00061	89 45 e8	 mov	 DWORD PTR _len$78140[ebp], eax
  00064	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00069	2b 4d e8	 sub	 ecx, DWORD PTR _len$78140[ebp]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006f	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00075	0f 8e c5 00 00
	00		 jle	 $LN15@compress_b
  0007b	8b 45 f0	 mov	 eax, DWORD PTR _lc$[ebp]
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  00081	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  00085	89 55 e4	 mov	 DWORD PTR _val$78144[ebp], edx
  00088	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008b	8b 55 e4	 mov	 edx, DWORD PTR _val$78144[ebp]
  0008e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00094	d3 e2		 shl	 edx, cl
  00096	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00099	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000a0	0b ca		 or	 ecx, edx
  000a2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a5	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  000ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000af	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000b6	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000bc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c5	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000c8	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ce	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d1	83 c1 01	 add	 ecx, 1
  000d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d7	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000dd	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000e4	c1 f9 08	 sar	 ecx, 8
  000e7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ea	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f0	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000f3	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000f6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00102	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00105	0f b7 45 e4	 movzx	 eax, WORD PTR _val$78144[ebp]
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00111	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00117	8b ca		 mov	 ecx, edx
  00119	d3 f8		 sar	 eax, cl
  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0011e	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00125	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00128	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0012e	8b 4d e8	 mov	 ecx, DWORD PTR _len$78140[ebp]
  00131	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00135	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00138	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0013e	eb 40		 jmp	 SHORT $LN14@compress_b
$LN15@compress_b:
  00140	8b 4d f0	 mov	 ecx, DWORD PTR _lc$[ebp]
  00143	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  00146	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0014d	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00153	d3 e0		 shl	 eax, cl
  00155	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00158	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0015f	0b c8		 or	 ecx, eax
  00161	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00164	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0016b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00174	03 4d e8	 add	 ecx, DWORD PTR _len$78140[ebp]
  00177	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017a	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN14@compress_b:

; 1088 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1089 :         } else {

  00180	e9 13 05 00 00	 jmp	 $LN18@compress_b
$LN16@compress_b:

; 1090 :             /* Here, lc is the match length - MIN_MATCH */
; 1091 :             code = _length_code[lc];

  00185	8b 45 f0	 mov	 eax, DWORD PTR _lc$[ebp]
  00188	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  0018f	89 4d f8	 mov	 DWORD PTR _code$[ebp], ecx

; 1092 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00192	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  00195	8b 45 0c	 mov	 eax, DWORD PTR _ltree$[ebp]
  00198	0f b7 8c 90 06
	04 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+1030]
  001a0	89 4d e0	 mov	 DWORD PTR _len$78153[ebp], ecx
  001a3	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001a8	2b 55 e0	 sub	 edx, DWORD PTR _len$78153[ebp]
  001ab	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ae	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  001b4	0f 8e c9 00 00
	00		 jle	 $LN12@compress_b
  001ba	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  001bd	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  001c0	0f b7 84 8a 04
	04 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+1028]
  001c8	89 45 dc	 mov	 DWORD PTR _val$78157[ebp], eax
  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ce	8b 55 dc	 mov	 edx, DWORD PTR _val$78157[ebp]
  001d1	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  001d7	d3 e2		 shl	 edx, cl
  001d9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001dc	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  001e3	0b ca		 or	 ecx, edx
  001e5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e8	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  001ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001f2	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  001f9	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00202	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00205	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00208	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0020b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0020e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00211	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00214	83 c1 01	 add	 ecx, 1
  00217	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0021a	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0021d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00220	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00227	c1 f9 08	 sar	 ecx, 8
  0022a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00230	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00233	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00236	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00239	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0023f	83 c1 01	 add	 ecx, 1
  00242	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00245	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00248	0f b7 45 dc	 movzx	 eax, WORD PTR _val$78157[ebp]
  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00254	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  0025a	8b ca		 mov	 ecx, edx
  0025c	d3 f8		 sar	 eax, cl
  0025e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00261	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00268	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026b	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00271	8b 4d e0	 mov	 ecx, DWORD PTR _len$78153[ebp]
  00274	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00278	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027b	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00281	eb 44		 jmp	 SHORT $LN11@compress_b
$LN12@compress_b:
  00283	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  00286	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  00289	0f b7 84 8a 04
	04 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+1028]
  00291	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00294	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0029a	d3 e0		 shl	 eax, cl
  0029c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029f	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  002a6	0b c8		 or	 ecx, eax
  002a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ab	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  002b2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b5	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002bb	03 4d e0	 add	 ecx, DWORD PTR _len$78153[ebp]
  002be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c1	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN11@compress_b:

; 1093 :             extra = extra_lbits[code];

  002c7	8b 45 f8	 mov	 eax, DWORD PTR _code$[ebp]
  002ca	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _extra_lbits[eax*4]
  002d1	89 4d fc	 mov	 DWORD PTR _extra$[ebp], ecx

; 1094 :             if (extra != 0) {

  002d4	83 7d fc 00	 cmp	 DWORD PTR _extra$[ebp], 0
  002d8	0f 84 22 01 00
	00		 je	 $LN10@compress_b

; 1095 :                 lc -= base_length[code];

  002de	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  002e1	8b 45 f0	 mov	 eax, DWORD PTR _lc$[ebp]
  002e4	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR _base_length[edx*4]
  002eb	89 45 f0	 mov	 DWORD PTR _lc$[ebp], eax

; 1096 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  002ee	8b 4d fc	 mov	 ecx, DWORD PTR _extra$[ebp]
  002f1	89 4d d8	 mov	 DWORD PTR _len$78166[ebp], ecx
  002f4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002f9	2b 55 d8	 sub	 edx, DWORD PTR _len$78166[ebp]
  002fc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ff	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00305	0f 8e bc 00 00
	00		 jle	 $LN9@compress_b
  0030b	8b 4d f0	 mov	 ecx, DWORD PTR _lc$[ebp]
  0030e	89 4d d4	 mov	 DWORD PTR _val$78170[ebp], ecx
  00311	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00314	8b 45 d4	 mov	 eax, DWORD PTR _val$78170[ebp]
  00317	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  0031d	d3 e0		 shl	 eax, cl
  0031f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00322	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00329	0b d0		 or	 edx, eax
  0032b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0032e	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00335	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00338	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0033f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00345	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00348	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0034b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0034e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00351	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00354	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00357	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0035a	83 c2 01	 add	 edx, 1
  0035d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00360	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00363	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00366	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0036d	c1 fa 08	 sar	 edx, 8
  00370	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00373	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00376	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00379	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0037c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0037f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00382	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00385	83 c2 01	 add	 edx, 1
  00388	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0038b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0038e	0f b7 55 d4	 movzx	 edx, WORD PTR _val$78170[ebp]
  00392	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00395	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0039a	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  003a0	d3 fa		 sar	 edx, cl
  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a5	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  003ac	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003af	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  003b5	8b 4d d8	 mov	 ecx, DWORD PTR _len$78166[ebp]
  003b8	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  003bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003bf	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  003c5	eb 39		 jmp	 SHORT $LN10@compress_b
$LN9@compress_b:
  003c7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ca	8b 55 f0	 mov	 edx, DWORD PTR _lc$[ebp]
  003cd	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  003d3	d3 e2		 shl	 edx, cl
  003d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003d8	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003df	0b ca		 or	 ecx, edx
  003e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e4	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  003eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ee	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003f4	03 4d d8	 add	 ecx, DWORD PTR _len$78166[ebp]
  003f7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fa	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN10@compress_b:

; 1097 :             }
; 1098 :             dist--; /* dist is now the match distance - 1 */

  00400	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  00403	83 e8 01	 sub	 eax, 1
  00406	89 45 ec	 mov	 DWORD PTR _dist$[ebp], eax

; 1099 :             code = d_code(dist);

  00409	81 7d ec 00 01
	00 00		 cmp	 DWORD PTR _dist$[ebp], 256 ; 00000100H
  00410	73 0f		 jae	 SHORT $LN23@compress_b
  00412	8b 4d ec	 mov	 ecx, DWORD PTR _dist$[ebp]
  00415	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __dist_code[ecx]
  0041c	89 55 b8	 mov	 DWORD PTR tv299[ebp], edx
  0041f	eb 10		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00421	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  00424	c1 e8 07	 shr	 eax, 7
  00427	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax+256]
  0042e	89 4d b8	 mov	 DWORD PTR tv299[ebp], ecx
$LN24@compress_b:
  00431	8b 55 b8	 mov	 edx, DWORD PTR tv299[ebp]
  00434	89 55 f8	 mov	 DWORD PTR _code$[ebp], edx

; 1100 :             Assert (code < D_CODES, "bad d_code");
; 1101 : 
; 1102 :             send_code(s, code, dtree);       /* send the distance code */

  00437	8b 45 f8	 mov	 eax, DWORD PTR _code$[ebp]
  0043a	8b 4d 10	 mov	 ecx, DWORD PTR _dtree$[ebp]
  0043d	0f b7 54 81 02	 movzx	 edx, WORD PTR [ecx+eax*4+2]
  00442	89 55 d0	 mov	 DWORD PTR _len$78178[ebp], edx
  00445	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0044a	2b 45 d0	 sub	 eax, DWORD PTR _len$78178[ebp]
  0044d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00450	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00456	0f 8e c3 00 00
	00		 jle	 $LN7@compress_b
  0045c	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  0045f	8b 45 10	 mov	 eax, DWORD PTR _dtree$[ebp]
  00462	0f b7 0c 90	 movzx	 ecx, WORD PTR [eax+edx*4]
  00466	89 4d cc	 mov	 DWORD PTR _val$78182[ebp], ecx
  00469	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046c	8b 45 cc	 mov	 eax, DWORD PTR _val$78182[ebp]
  0046f	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00475	d3 e0		 shl	 eax, cl
  00477	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0047a	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00481	0b d0		 or	 edx, eax
  00483	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00486	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00490	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00497	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0049d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004a3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a6	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  004a9	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  004ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004af	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004b2	83 c2 01	 add	 edx, 1
  004b5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004b8	89 50 14	 mov	 DWORD PTR [eax+20], edx
  004bb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004be	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  004c5	c1 fa 08	 sar	 edx, 8
  004c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004ce	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004d1	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  004d4	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  004d7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004da	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004dd	83 c2 01	 add	 edx, 1
  004e0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004e3	89 50 14	 mov	 DWORD PTR [eax+20], edx
  004e6	0f b7 55 cc	 movzx	 edx, WORD PTR _val$78182[ebp]
  004ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004ed	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004f2	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  004f8	d3 fa		 sar	 edx, cl
  004fa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fd	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00504	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00507	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0050d	8b 4d d0	 mov	 ecx, DWORD PTR _len$78178[ebp]
  00510	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00514	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00517	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0051d	eb 40		 jmp	 SHORT $LN6@compress_b
$LN7@compress_b:
  0051f	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  00522	8b 55 10	 mov	 edx, DWORD PTR _dtree$[ebp]
  00525	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00529	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0052c	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00532	d3 e0		 shl	 eax, cl
  00534	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00537	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0053e	0b c8		 or	 ecx, eax
  00540	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00543	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0054a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0054d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00553	03 4d d0	 add	 ecx, DWORD PTR _len$78178[ebp]
  00556	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00559	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN6@compress_b:

; 1103 :             extra = extra_dbits[code];

  0055f	8b 45 f8	 mov	 eax, DWORD PTR _code$[ebp]
  00562	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _extra_dbits[eax*4]
  00569	89 4d fc	 mov	 DWORD PTR _extra$[ebp], ecx

; 1104 :             if (extra != 0) {

  0056c	83 7d fc 00	 cmp	 DWORD PTR _extra$[ebp], 0
  00570	0f 84 22 01 00
	00		 je	 $LN18@compress_b

; 1105 :                 dist -= base_dist[code];

  00576	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  00579	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  0057c	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR _base_dist[edx*4]
  00583	89 45 ec	 mov	 DWORD PTR _dist$[ebp], eax

; 1106 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00586	8b 4d fc	 mov	 ecx, DWORD PTR _extra$[ebp]
  00589	89 4d c8	 mov	 DWORD PTR _len$78191[ebp], ecx
  0058c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00591	2b 55 c8	 sub	 edx, DWORD PTR _len$78191[ebp]
  00594	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00597	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0059d	0f 8e bc 00 00
	00		 jle	 $LN4@compress_b
  005a3	8b 4d ec	 mov	 ecx, DWORD PTR _dist$[ebp]
  005a6	89 4d c4	 mov	 DWORD PTR _val$78195[ebp], ecx
  005a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005ac	8b 45 c4	 mov	 eax, DWORD PTR _val$78195[ebp]
  005af	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  005b5	d3 e0		 shl	 eax, cl
  005b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005ba	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  005c1	0b d0		 or	 edx, eax
  005c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005c6	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  005cd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005d0	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  005d7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005dd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  005e3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005e6	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  005e9	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  005ec	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005ef	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  005f2	83 c2 01	 add	 edx, 1
  005f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005f8	89 50 14	 mov	 DWORD PTR [eax+20], edx
  005fb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005fe	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00605	c1 fa 08	 sar	 edx, 8
  00608	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0060b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0060e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00611	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00614	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00617	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0061a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0061d	83 c2 01	 add	 edx, 1
  00620	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00623	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00626	0f b7 55 c4	 movzx	 edx, WORD PTR _val$78195[ebp]
  0062a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0062d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00632	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00638	d3 fa		 sar	 edx, cl
  0063a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0063d	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00644	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00647	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0064d	8b 4d c8	 mov	 ecx, DWORD PTR _len$78191[ebp]
  00650	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00654	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00657	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0065d	eb 39		 jmp	 SHORT $LN18@compress_b
$LN4@compress_b:
  0065f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00662	8b 55 ec	 mov	 edx, DWORD PTR _dist$[ebp]
  00665	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0066b	d3 e2		 shl	 edx, cl
  0066d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00670	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00677	0b ca		 or	 ecx, edx
  00679	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0067c	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00683	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00686	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0068c	03 4d c8	 add	 ecx, DWORD PTR _len$78191[ebp]
  0068f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00692	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN18@compress_b:

; 1107 :             }
; 1108 :         } /* literal or match pair ? */
; 1109 : 
; 1110 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1111 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1112 :                "pendingBuf overflow");
; 1113 : 
; 1114 :     } while (lx < s->last_lit);

  00698	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0069b	8b 4d f4	 mov	 ecx, DWORD PTR _lx$[ebp]
  0069e	3b 88 a0 16 00
	00		 cmp	 ecx, DWORD PTR [eax+5792]
  006a4	0f 82 73 f9 ff
	ff		 jb	 $LN19@compress_b
$LN20@compress_b:

; 1115 : 
; 1116 :     send_code(s, END_BLOCK, ltree);

  006aa	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  006ad	0f b7 82 02 04
	00 00		 movzx	 eax, WORD PTR [edx+1026]
  006b4	89 45 c0	 mov	 DWORD PTR _len$78203[ebp], eax
  006b7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006bc	2b 4d c0	 sub	 ecx, DWORD PTR _len$78203[ebp]
  006bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006c2	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  006c8	0f 8e c3 00 00
	00		 jle	 $LN2@compress_b
  006ce	8b 45 0c	 mov	 eax, DWORD PTR _ltree$[ebp]
  006d1	0f b7 88 00 04
	00 00		 movzx	 ecx, WORD PTR [eax+1024]
  006d8	89 4d bc	 mov	 DWORD PTR _val$78207[ebp], ecx
  006db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006de	8b 45 bc	 mov	 eax, DWORD PTR _val$78207[ebp]
  006e1	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  006e7	d3 e0		 shl	 eax, cl
  006e9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006ec	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  006f3	0b d0		 or	 edx, eax
  006f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006f8	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  006ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00702	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00709	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0070f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00712	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00715	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00718	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0071b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0071e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00721	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00724	83 c2 01	 add	 edx, 1
  00727	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0072a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0072d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00730	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00737	c1 fa 08	 sar	 edx, 8
  0073a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0073d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00740	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00743	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00746	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00749	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0074c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0074f	83 c2 01	 add	 edx, 1
  00752	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00755	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00758	0f b7 55 bc	 movzx	 edx, WORD PTR _val$78207[ebp]
  0075c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0075f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00764	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0076a	d3 fa		 sar	 edx, cl
  0076c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0076f	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00776	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00779	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0077f	8b 4d c0	 mov	 ecx, DWORD PTR _len$78203[ebp]
  00782	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00786	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00789	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0078f	eb 40		 jmp	 SHORT $LN1@compress_b
$LN2@compress_b:
  00791	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  00794	0f b7 91 00 04
	00 00		 movzx	 edx, WORD PTR [ecx+1024]
  0079b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0079e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  007a4	d3 e2		 shl	 edx, cl
  007a6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007a9	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  007b0	0b c2		 or	 eax, edx
  007b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007b5	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  007bc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007bf	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  007c5	03 45 c0	 add	 eax, DWORD PTR _len$78203[ebp]
  007c8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007cb	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@compress_b:

; 1117 :     s->last_eob_len = ltree[END_BLOCK].Len;

  007d1	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  007d4	0f b7 82 02 04
	00 00		 movzx	 eax, WORD PTR [edx+1026]
  007db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007de	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 1118 : }

  007e4	8b e5		 mov	 esp, ebp
  007e6	5d		 pop	 ebp
  007e7	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
PUBLIC	__tr_align
; Function compile flags: /Odtp
;	COMDAT __tr_align
_TEXT	SEGMENT
_val$78058 = -32					; size = 4
_len$78054 = -28					; size = 4
_val$78046 = -24					; size = 4
_len$78042 = -20					; size = 4
_val$78033 = -16					; size = 4
_len$78029 = -12					; size = 4
_val$78021 = -8						; size = 4
_len$78017 = -4						; size = 4
_s$ = 8							; size = 4
__tr_align PROC						; COMDAT

; 894  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 895  :     send_bits(s, STATIC_TREES<<1, 3);

  00006	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _len$78017[ebp], 3
  0000d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00012	2b 45 fc	 sub	 eax, DWORD PTR _len$78017[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00018	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0001e	0f 8e bd 00 00
	00		 jle	 $LN9@tr_align
  00024	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _val$78021[ebp], 2
  0002b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _val$78021[ebp]
  00031	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00037	d3 e0		 shl	 eax, cl
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003c	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00043	0b d0		 or	 edx, eax
  00045	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00048	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00052	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00059	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0005f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00068	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0006b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00071	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00074	83 c2 01	 add	 edx, 1
  00077	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00080	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00087	c1 fa 08	 sar	 edx, 8
  0008a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00090	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00093	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00096	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0009f	83 c2 01	 add	 edx, 1
  000a2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a5	89 50 14	 mov	 DWORD PTR [eax+20], edx
  000a8	0f b7 55 f8	 movzx	 edx, WORD PTR _val$78021[ebp]
  000ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000af	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b4	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  000ba	d3 fa		 sar	 edx, cl
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000bf	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  000c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c9	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _len$78017[ebp]
  000d2	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d9	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000df	eb 3b		 jmp	 SHORT $LN8@tr_align
$LN9@tr_align:
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e4	ba 02 00 00 00	 mov	 edx, 2
  000e9	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  000ef	d3 e2		 shl	 edx, cl
  000f1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f4	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000fb	0b ca		 or	 ecx, edx
  000fd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00100	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00107	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00110	03 4d fc	 add	 ecx, DWORD PTR _len$78017[ebp]
  00113	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00116	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN8@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  0011c	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1026
  00123	89 45 f4	 mov	 DWORD PTR _len$78029[ebp], eax
  00126	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012b	2b 4d f4	 sub	 ecx, DWORD PTR _len$78029[ebp]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00137	0f 8e c2 00 00
	00		 jle	 $LN7@tr_align
  0013d	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1024
  00144	89 45 f0	 mov	 DWORD PTR _val$78033[ebp], eax
  00147	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0014a	8b 55 f0	 mov	 edx, DWORD PTR _val$78033[ebp]
  0014d	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00153	d3 e2		 shl	 edx, cl
  00155	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00158	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0015f	0b ca		 or	 ecx, edx
  00161	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00164	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0016b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016e	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00175	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0017b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00181	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00184	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00187	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0018a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0018d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00190	83 c1 01	 add	 ecx, 1
  00193	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00196	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00199	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019c	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  001a3	c1 f9 08	 sar	 ecx, 8
  001a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001ac	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001af	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  001b2	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  001b5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001bb	83 c1 01	 add	 ecx, 1
  001be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c1	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  001c4	0f b7 45 f0	 movzx	 eax, WORD PTR _val$78033[ebp]
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cb	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001d0	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  001d6	8b ca		 mov	 ecx, edx
  001d8	d3 f8		 sar	 eax, cl
  001da	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001dd	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  001e4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e7	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001ed	8b 4d f4	 mov	 ecx, DWORD PTR _len$78029[ebp]
  001f0	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001f4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001f7	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  001fd	eb 3d		 jmp	 SHORT $LN6@tr_align
$LN7@tr_align:
  001ff	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR _static_ltree+1024
  00206	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00209	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0020f	d3 e2		 shl	 edx, cl
  00211	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00214	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0021b	0b c2		 or	 eax, edx
  0021d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00220	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00227	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00230	03 45 f4	 add	 eax, DWORD PTR _len$78029[ebp]
  00233	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00236	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN6@tr_align:

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  0023c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023f	52		 push	 edx
  00240	e8 00 00 00 00	 call	 _bi_flush
  00245	83 c4 04	 add	 esp, 4

; 901  :     /* Of the 10 bits for the empty block, we have already sent
; 902  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 903  :      * the EOB of the previous block) was thus at least one plus the length
; 904  :      * of the EOB plus what we have just sent of the empty static block.
; 905  :      */
; 906  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

  00248	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0024b	8b 88 b4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5812]
  00251	83 c1 0b	 add	 ecx, 11			; 0000000bH
  00254	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00257	2b 8a bc 16 00
	00		 sub	 ecx, DWORD PTR [edx+5820]
  0025d	83 f9 09	 cmp	 ecx, 9
  00260	0f 8d 42 02 00
	00		 jge	 $LN5@tr_align

; 907  :         send_bits(s, STATIC_TREES<<1, 3);

  00266	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _len$78042[ebp], 3
  0026d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00272	2b 45 ec	 sub	 eax, DWORD PTR _len$78042[ebp]
  00275	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00278	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0027e	0f 8e bd 00 00
	00		 jle	 $LN4@tr_align
  00284	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _val$78046[ebp], 2
  0028b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0028e	8b 45 e8	 mov	 eax, DWORD PTR _val$78046[ebp]
  00291	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00297	d3 e0		 shl	 eax, cl
  00299	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0029c	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  002a3	0b d0		 or	 edx, eax
  002a5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a8	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b2	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  002b9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  002bf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002c5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c8	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002cb	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002d4	83 c2 01	 add	 edx, 1
  002d7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002da	89 50 14	 mov	 DWORD PTR [eax+20], edx
  002dd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e0	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  002e7	c1 fa 08	 sar	 edx, 8
  002ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f3	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002f6	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002f9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002fc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002ff	83 c2 01	 add	 edx, 1
  00302	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00305	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00308	0f b7 55 e8	 movzx	 edx, WORD PTR _val$78046[ebp]
  0030c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00314	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0031a	d3 fa		 sar	 edx, cl
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031f	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00326	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00329	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0032f	8b 4d ec	 mov	 ecx, DWORD PTR _len$78042[ebp]
  00332	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00336	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00339	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0033f	eb 3b		 jmp	 SHORT $LN3@tr_align
$LN4@tr_align:
  00341	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00344	ba 02 00 00 00	 mov	 edx, 2
  00349	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0034f	d3 e2		 shl	 edx, cl
  00351	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00354	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0035b	0b ca		 or	 ecx, edx
  0035d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00360	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00367	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0036a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00370	03 4d ec	 add	 ecx, DWORD PTR _len$78042[ebp]
  00373	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00376	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN3@tr_align:

; 908  :         send_code(s, END_BLOCK, static_ltree);

  0037c	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1026
  00383	89 45 e4	 mov	 DWORD PTR _len$78054[ebp], eax
  00386	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0038b	2b 4d e4	 sub	 ecx, DWORD PTR _len$78054[ebp]
  0038e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00391	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00397	0f 8e c2 00 00
	00		 jle	 $LN2@tr_align
  0039d	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1024
  003a4	89 45 e0	 mov	 DWORD PTR _val$78058[ebp], eax
  003a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003aa	8b 55 e0	 mov	 edx, DWORD PTR _val$78058[ebp]
  003ad	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  003b3	d3 e2		 shl	 edx, cl
  003b5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b8	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003bf	0b ca		 or	 ecx, edx
  003c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c4	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  003cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ce	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003d5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  003db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003de	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e4	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  003e7	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  003ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ed	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003f0	83 c1 01	 add	 ecx, 1
  003f3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003f6	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  003f9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003fc	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00403	c1 f9 08	 sar	 ecx, 8
  00406	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00409	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0040c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0040f	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00412	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00415	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00418	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0041b	83 c1 01	 add	 ecx, 1
  0041e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00421	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00424	0f b7 45 e0	 movzx	 eax, WORD PTR _val$78058[ebp]
  00428	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0042b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00430	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00436	8b ca		 mov	 ecx, edx
  00438	d3 f8		 sar	 eax, cl
  0043a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0043d	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00444	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00447	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0044d	8b 4d e4	 mov	 ecx, DWORD PTR _len$78054[ebp]
  00450	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00454	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00457	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0045d	eb 3d		 jmp	 SHORT $LN1@tr_align
$LN2@tr_align:
  0045f	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR _static_ltree+1024
  00466	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00469	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0046f	d3 e2		 shl	 edx, cl
  00471	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00474	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0047b	0b c2		 or	 eax, edx
  0047d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00480	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00487	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0048a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00490	03 45 e4	 add	 eax, DWORD PTR _len$78054[ebp]
  00493	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00496	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@tr_align:

; 909  : #ifdef DEBUG
; 910  :         s->compressed_len += 10L;
; 911  : #endif
; 912  :         bi_flush(s);

  0049c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0049f	52		 push	 edx
  004a0	e8 00 00 00 00	 call	 _bi_flush
  004a5	83 c4 04	 add	 esp, 4
$LN5@tr_align:

; 913  :     }
; 914  :     s->last_eob_len = 7;

  004a8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004ab	c7 80 b4 16 00
	00 07 00 00 00	 mov	 DWORD PTR [eax+5812], 7

; 915  : }

  004b5	8b e5		 mov	 esp, ebp
  004b7	5d		 pop	 ebp
  004b8	c3		 ret	 0
__tr_align ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _send_tree
_TEXT	SEGMENT
_val$77912 = -92					; size = 4
_len$77908 = -88					; size = 4
_val$77900 = -84					; size = 4
_len$77896 = -80					; size = 4
_val$77887 = -76					; size = 4
_len$77883 = -72					; size = 4
_val$77875 = -68					; size = 4
_len$77871 = -64					; size = 4
_val$77861 = -60					; size = 4
_len$77857 = -56					; size = 4
_val$77849 = -52					; size = 4
_len$77845 = -48					; size = 4
_val$77837 = -44					; size = 4
_len$77833 = -40					; size = 4
_val$77822 = -36					; size = 4
_len$77818 = -32					; size = 4
_max_count$ = -28					; size = 4
_min_count$ = -24					; size = 4
_prevlen$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_n$ = -8						; size = 4
_count$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_send_tree PROC						; COMDAT

; 756  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 757  :     int n;                     /* iterates over all tree elements */
; 758  :     int prevlen = -1;          /* last emitted length */

  00006	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _prevlen$[ebp], -1

; 759  :     int curlen;                /* length of current code */
; 760  :     int nextlen = tree[0].Len; /* length of next code */

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  00010	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00014	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 761  :     int count = 0;             /* repeat count of the current code */

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 762  :     int max_count = 7;         /* max repeat count */

  0001e	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7

; 763  :     int min_count = 4;         /* min repeat count */

  00025	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4

; 764  : 
; 765  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 766  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0002c	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00030	75 0e		 jne	 SHORT $LN36@send_tree
  00032	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00039	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
$LN36@send_tree:

; 767  : 
; 768  :     for (n = 0; n <= max_code; n++) {

  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00047	eb 09		 jmp	 SHORT $LN35@send_tree
$LN34@send_tree:
  00049	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0004c	83 c2 01	 add	 edx, 1
  0004f	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx
$LN35@send_tree:
  00052	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00055	3b 45 10	 cmp	 eax, DWORD PTR _max_code$[ebp]
  00058	0f 8f ff 09 00
	00		 jg	 $LN37@send_tree

; 769  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _nextlen$[ebp]
  00061	89 4d f4	 mov	 DWORD PTR _curlen$[ebp], ecx
  00064	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00067	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  0006a	0f b7 4c 90 06	 movzx	 ecx, WORD PTR [eax+edx*4+6]
  0006f	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 770  :         if (++count < max_count && curlen == nextlen) {

  00072	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00075	83 c2 01	 add	 edx, 1
  00078	89 55 fc	 mov	 DWORD PTR _count$[ebp], edx
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0007e	3b 45 e4	 cmp	 eax, DWORD PTR _max_count$[ebp]
  00081	7d 0f		 jge	 SHORT $LN32@send_tree
  00083	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00086	3b 4d f0	 cmp	 ecx, DWORD PTR _nextlen$[ebp]
  00089	75 07		 jne	 SHORT $LN32@send_tree
  0008b	eb bc		 jmp	 SHORT $LN34@send_tree

; 771  :             continue;

  0008d	e9 7d 09 00 00	 jmp	 $LN31@send_tree
$LN32@send_tree:

; 772  :         } else if (count < min_count) {

  00092	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00095	3b 55 e8	 cmp	 edx, DWORD PTR _min_count$[ebp]
  00098	0f 8d 47 01 00
	00		 jge	 $LN30@send_tree
$LN29@send_tree:

; 773  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a4	0f b7 94 81 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2686]
  000ac	89 55 e0	 mov	 DWORD PTR _len$77818[ebp], edx
  000af	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b4	2b 45 e0	 sub	 eax, DWORD PTR _len$77818[ebp]
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ba	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  000c0	0f 8e c7 00 00
	00		 jle	 $LN26@send_tree
  000c6	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000c9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000cc	0f b7 8c 90 7c
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2684]
  000d4	89 4d dc	 mov	 DWORD PTR _val$77822[ebp], ecx
  000d7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000da	8b 45 dc	 mov	 eax, DWORD PTR _val$77822[ebp]
  000dd	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  000e3	d3 e0		 shl	 eax, cl
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e8	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  000ef	0b d0		 or	 edx, eax
  000f1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f4	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000fe	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00105	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0010b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00111	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00114	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00117	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0011d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00120	83 c2 01	 add	 edx, 1
  00123	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00126	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012c	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00133	c1 fa 08	 sar	 edx, 8
  00136	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00139	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0013c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00142	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00148	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0014b	83 c2 01	 add	 edx, 1
  0014e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00151	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00154	0f b7 55 dc	 movzx	 edx, WORD PTR _val$77822[ebp]
  00158	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0015b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00160	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00166	d3 fa		 sar	 edx, cl
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0016b	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00172	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00175	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0017b	8b 4d e0	 mov	 ecx, DWORD PTR _len$77818[ebp]
  0017e	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00182	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00185	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0018b	eb 44		 jmp	 SHORT $LN28@send_tree
$LN26@send_tree:
  0018d	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00190	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00193	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  0019b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019e	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  001a4	d3 e0		 shl	 eax, cl
  001a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a9	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  001b0	0b c8		 or	 ecx, eax
  001b2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b5	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  001bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001bf	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001c5	03 4d e0	 add	 ecx, DWORD PTR _len$77818[ebp]
  001c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN28@send_tree:
  001d1	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001d4	83 e8 01	 sub	 eax, 1
  001d7	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  001da	0f 85 be fe ff
	ff		 jne	 $LN29@send_tree

; 774  : 
; 775  :         } else if (curlen != 0) {

  001e0	e9 2a 08 00 00	 jmp	 $LN31@send_tree
$LN30@send_tree:
  001e5	83 7d f4 00	 cmp	 DWORD PTR _curlen$[ebp], 0
  001e9	0f 84 91 03 00
	00		 je	 $LN23@send_tree

; 776  :             if (curlen != prevlen) {

  001ef	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  001f2	3b 4d ec	 cmp	 ecx, DWORD PTR _prevlen$[ebp]
  001f5	0f 84 3e 01 00
	00		 je	 $LN22@send_tree

; 777  :                 send_code(s, curlen, s->bl_tree); count--;

  001fb	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  001fe	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00201	0f b7 8c 90 7e
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2686]
  00209	89 4d d8	 mov	 DWORD PTR _len$77833[ebp], ecx
  0020c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00211	2b 55 d8	 sub	 edx, DWORD PTR _len$77833[ebp]
  00214	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00217	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0021d	0f 8e c9 00 00
	00		 jle	 $LN21@send_tree
  00223	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00226	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00229	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  00231	89 45 d4	 mov	 DWORD PTR _val$77837[ebp], eax
  00234	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00237	8b 55 d4	 mov	 edx, DWORD PTR _val$77837[ebp]
  0023a	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00240	d3 e2		 shl	 edx, cl
  00242	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00245	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0024c	0b ca		 or	 ecx, edx
  0024e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00251	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00258	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025b	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00262	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00268	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0026e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00271	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00274	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00277	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0027d	83 c1 01	 add	 ecx, 1
  00280	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00283	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00286	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00289	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00290	c1 f9 08	 sar	 ecx, 8
  00293	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00296	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00299	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029c	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0029f	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  002a2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a8	83 c1 01	 add	 ecx, 1
  002ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ae	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  002b1	0f b7 45 d4	 movzx	 eax, WORD PTR _val$77837[ebp]
  002b5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002bd	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  002c3	8b ca		 mov	 ecx, edx
  002c5	d3 f8		 sar	 eax, cl
  002c7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ca	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  002d1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d4	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  002da	8b 4d d8	 mov	 ecx, DWORD PTR _len$77833[ebp]
  002dd	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  002e1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e4	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  002ea	eb 44		 jmp	 SHORT $LN20@send_tree
$LN21@send_tree:
  002ec	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  002ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f2	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  002fa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002fd	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00303	d3 e0		 shl	 eax, cl
  00305	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00308	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0030f	0b c8		 or	 ecx, eax
  00311	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00314	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0031b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00324	03 4d d8	 add	 ecx, DWORD PTR _len$77833[ebp]
  00327	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0032a	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN20@send_tree:
  00330	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00333	83 e8 01	 sub	 eax, 1
  00336	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN22@send_tree:

; 778  :             }
; 779  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 780  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  00339	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033c	0f b7 91 be 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2750]
  00343	89 55 d0	 mov	 DWORD PTR _len$77845[ebp], edx
  00346	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0034b	2b 45 d0	 sub	 eax, DWORD PTR _len$77845[ebp]
  0034e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00351	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00357	0f 8e c5 00 00
	00		 jle	 $LN19@send_tree
  0035d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00360	0f b7 82 bc 0a
	00 00		 movzx	 eax, WORD PTR [edx+2748]
  00367	89 45 cc	 mov	 DWORD PTR _val$77849[ebp], eax
  0036a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036d	8b 55 cc	 mov	 edx, DWORD PTR _val$77849[ebp]
  00370	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00376	d3 e2		 shl	 edx, cl
  00378	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0037b	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00382	0b ca		 or	 ecx, edx
  00384	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00387	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0038e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00391	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00398	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0039e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003a4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a7	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  003aa	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  003ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003b3	83 c1 01	 add	 ecx, 1
  003b6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003b9	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  003bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003bf	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003c6	c1 f9 08	 sar	 ecx, 8
  003c9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003cc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003cf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003d2	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  003d5	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  003d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003db	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003de	83 c1 01	 add	 ecx, 1
  003e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e4	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  003e7	0f b7 45 cc	 movzx	 eax, WORD PTR _val$77849[ebp]
  003eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ee	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003f3	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  003f9	8b ca		 mov	 ecx, edx
  003fb	d3 f8		 sar	 eax, cl
  003fd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00400	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00407	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0040a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00410	8b 4d d0	 mov	 ecx, DWORD PTR _len$77845[ebp]
  00413	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00417	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0041a	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00420	eb 40		 jmp	 SHORT $LN18@send_tree
$LN19@send_tree:
  00422	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00425	0f b7 91 bc 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2748]
  0042c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0042f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00435	d3 e2		 shl	 edx, cl
  00437	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0043a	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00441	0b c2		 or	 eax, edx
  00443	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00446	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0044d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00450	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00456	03 45 d0	 add	 eax, DWORD PTR _len$77845[ebp]
  00459	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0045c	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN18@send_tree:
  00462	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _len$77857[ebp], 2
  00469	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0046e	2b 55 c8	 sub	 edx, DWORD PTR _len$77857[ebp]
  00471	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00474	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0047a	0f 8e bf 00 00
	00		 jle	 $LN17@send_tree
  00480	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00483	83 e9 03	 sub	 ecx, 3
  00486	89 4d c4	 mov	 DWORD PTR _val$77861[ebp], ecx
  00489	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0048c	8b 45 c4	 mov	 eax, DWORD PTR _val$77861[ebp]
  0048f	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00495	d3 e0		 shl	 eax, cl
  00497	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0049a	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  004a1	0b d0		 or	 edx, eax
  004a3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a6	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  004ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004b0	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  004b7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004bd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c6	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  004c9	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  004cc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004cf	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004d2	83 c2 01	 add	 edx, 1
  004d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004d8	89 50 14	 mov	 DWORD PTR [eax+20], edx
  004db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004de	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  004e5	c1 fa 08	 sar	 edx, 8
  004e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004eb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004ee	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004f1	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  004f4	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  004f7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fa	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004fd	83 c2 01	 add	 edx, 1
  00500	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00503	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00506	0f b7 55 c4	 movzx	 edx, WORD PTR _val$77861[ebp]
  0050a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00512	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00518	d3 fa		 sar	 edx, cl
  0051a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0051d	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00524	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00527	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0052d	8b 4d c8	 mov	 ecx, DWORD PTR _len$77857[ebp]
  00530	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00534	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00537	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0053d	eb 3c		 jmp	 SHORT $LN16@send_tree
$LN17@send_tree:
  0053f	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00542	83 ea 03	 sub	 edx, 3
  00545	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00548	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0054e	d3 e2		 shl	 edx, cl
  00550	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00553	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0055a	0b c2		 or	 eax, edx
  0055c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0055f	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00566	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00569	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0056f	03 45 c8	 add	 eax, DWORD PTR _len$77857[ebp]
  00572	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00575	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN16@send_tree:
  0057b	e9 8f 04 00 00	 jmp	 $LN31@send_tree
$LN23@send_tree:

; 781  : 
; 782  :         } else if (count <= 10) {

  00580	83 7d fc 0a	 cmp	 DWORD PTR _count$[ebp], 10 ; 0000000aH
  00584	0f 8f 45 02 00
	00		 jg	 $LN14@send_tree

; 783  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  0058a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0058d	0f b7 82 c2 0a
	00 00		 movzx	 eax, WORD PTR [edx+2754]
  00594	89 45 c0	 mov	 DWORD PTR _len$77871[ebp], eax
  00597	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0059c	2b 4d c0	 sub	 ecx, DWORD PTR _len$77871[ebp]
  0059f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005a2	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  005a8	0f 8e c3 00 00
	00		 jle	 $LN13@send_tree
  005ae	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b1	0f b7 88 c0 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2752]
  005b8	89 4d bc	 mov	 DWORD PTR _val$77875[ebp], ecx
  005bb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005be	8b 45 bc	 mov	 eax, DWORD PTR _val$77875[ebp]
  005c1	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  005c7	d3 e0		 shl	 eax, cl
  005c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005cc	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  005d3	0b d0		 or	 edx, eax
  005d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005d8	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  005df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005e2	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  005e9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005f2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  005f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005f8	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  005fb	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  005fe	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00601	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00604	83 c2 01	 add	 edx, 1
  00607	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0060a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0060d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00610	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00617	c1 fa 08	 sar	 edx, 8
  0061a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0061d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00620	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00623	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00626	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00629	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0062c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0062f	83 c2 01	 add	 edx, 1
  00632	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00635	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00638	0f b7 55 bc	 movzx	 edx, WORD PTR _val$77875[ebp]
  0063c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0063f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00644	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0064a	d3 fa		 sar	 edx, cl
  0064c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0064f	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00656	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00659	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0065f	8b 4d c0	 mov	 ecx, DWORD PTR _len$77871[ebp]
  00662	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00666	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00669	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0066f	eb 40		 jmp	 SHORT $LN12@send_tree
$LN13@send_tree:
  00671	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00674	0f b7 91 c0 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2752]
  0067b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0067e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00684	d3 e2		 shl	 edx, cl
  00686	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00689	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00690	0b c2		 or	 eax, edx
  00692	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00695	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0069c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0069f	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  006a5	03 45 c0	 add	 eax, DWORD PTR _len$77871[ebp]
  006a8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006ab	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN12@send_tree:
  006b1	c7 45 b8 03 00
	00 00		 mov	 DWORD PTR _len$77883[ebp], 3
  006b8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  006bd	2b 55 b8	 sub	 edx, DWORD PTR _len$77883[ebp]
  006c0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006c3	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  006c9	0f 8e bf 00 00
	00		 jle	 $LN11@send_tree
  006cf	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  006d2	83 e9 03	 sub	 ecx, 3
  006d5	89 4d b4	 mov	 DWORD PTR _val$77887[ebp], ecx
  006d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006db	8b 45 b4	 mov	 eax, DWORD PTR _val$77887[ebp]
  006de	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  006e4	d3 e0		 shl	 eax, cl
  006e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006e9	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  006f0	0b d0		 or	 edx, eax
  006f2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006f5	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  006fc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006ff	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00706	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0070c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0070f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00712	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00715	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00718	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0071b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0071e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00721	83 c2 01	 add	 edx, 1
  00724	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00727	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0072a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0072d	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00734	c1 fa 08	 sar	 edx, 8
  00737	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0073a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0073d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00740	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00743	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00746	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00749	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0074c	83 c2 01	 add	 edx, 1
  0074f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00752	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00755	0f b7 55 b4	 movzx	 edx, WORD PTR _val$77887[ebp]
  00759	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0075c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00761	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00767	d3 fa		 sar	 edx, cl
  00769	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0076c	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00773	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00776	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0077c	8b 4d b8	 mov	 ecx, DWORD PTR _len$77883[ebp]
  0077f	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00783	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00786	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0078c	eb 3c		 jmp	 SHORT $LN10@send_tree
$LN11@send_tree:
  0078e	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00791	83 ea 03	 sub	 edx, 3
  00794	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00797	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0079d	d3 e2		 shl	 edx, cl
  0079f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007a2	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  007a9	0b c2		 or	 eax, edx
  007ab	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007ae	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  007b5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007b8	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  007be	03 45 b8	 add	 eax, DWORD PTR _len$77883[ebp]
  007c1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007c4	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@send_tree:

; 784  : 
; 785  :         } else {

  007ca	e9 40 02 00 00	 jmp	 $LN31@send_tree
$LN14@send_tree:

; 786  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  007cf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007d2	0f b7 82 c6 0a
	00 00		 movzx	 eax, WORD PTR [edx+2758]
  007d9	89 45 b0	 mov	 DWORD PTR _len$77896[ebp], eax
  007dc	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007e1	2b 4d b0	 sub	 ecx, DWORD PTR _len$77896[ebp]
  007e4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007e7	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  007ed	0f 8e c3 00 00
	00		 jle	 $LN8@send_tree
  007f3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007f6	0f b7 88 c4 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2756]
  007fd	89 4d ac	 mov	 DWORD PTR _val$77900[ebp], ecx
  00800	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00803	8b 45 ac	 mov	 eax, DWORD PTR _val$77900[ebp]
  00806	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  0080c	d3 e0		 shl	 eax, cl
  0080e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00811	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00818	0b d0		 or	 edx, eax
  0081a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0081d	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00824	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00827	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0082e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00834	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00837	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0083a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0083d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00840	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00843	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00846	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00849	83 c2 01	 add	 edx, 1
  0084c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0084f	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00852	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00855	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0085c	c1 fa 08	 sar	 edx, 8
  0085f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00862	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00865	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00868	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0086b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0086e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00871	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00874	83 c2 01	 add	 edx, 1
  00877	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0087a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0087d	0f b7 55 ac	 movzx	 edx, WORD PTR _val$77900[ebp]
  00881	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00884	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00889	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0088f	d3 fa		 sar	 edx, cl
  00891	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00894	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  0089b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0089e	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  008a4	8b 4d b0	 mov	 ecx, DWORD PTR _len$77896[ebp]
  008a7	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  008ab	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008ae	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  008b4	eb 40		 jmp	 SHORT $LN7@send_tree
$LN8@send_tree:
  008b6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008b9	0f b7 91 c4 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2756]
  008c0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008c3	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  008c9	d3 e2		 shl	 edx, cl
  008cb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008ce	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  008d5	0b c2		 or	 eax, edx
  008d7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008da	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  008e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008e4	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  008ea	03 45 b0	 add	 eax, DWORD PTR _len$77896[ebp]
  008ed	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008f0	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN7@send_tree:
  008f6	c7 45 a8 07 00
	00 00		 mov	 DWORD PTR _len$77908[ebp], 7
  008fd	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00902	2b 55 a8	 sub	 edx, DWORD PTR _len$77908[ebp]
  00905	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00908	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0090e	0f 8e bf 00 00
	00		 jle	 $LN6@send_tree
  00914	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00917	83 e9 0b	 sub	 ecx, 11			; 0000000bH
  0091a	89 4d a4	 mov	 DWORD PTR _val$77912[ebp], ecx
  0091d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00920	8b 45 a4	 mov	 eax, DWORD PTR _val$77912[ebp]
  00923	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00929	d3 e0		 shl	 eax, cl
  0092b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0092e	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00935	0b d0		 or	 edx, eax
  00937	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0093a	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00941	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00944	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0094b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00951	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00954	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00957	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0095a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0095d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00960	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00963	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00966	83 c2 01	 add	 edx, 1
  00969	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0096c	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0096f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00972	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00979	c1 fa 08	 sar	 edx, 8
  0097c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0097f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00982	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00985	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00988	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0098b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0098e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00991	83 c2 01	 add	 edx, 1
  00994	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00997	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0099a	0f b7 55 a4	 movzx	 edx, WORD PTR _val$77912[ebp]
  0099e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009a1	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  009a6	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  009ac	d3 fa		 sar	 edx, cl
  009ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009b1	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  009b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  009bb	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  009c1	8b 4d a8	 mov	 ecx, DWORD PTR _len$77908[ebp]
  009c4	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  009c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009cb	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  009d1	eb 3c		 jmp	 SHORT $LN31@send_tree
$LN6@send_tree:
  009d3	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  009d6	83 ea 0b	 sub	 edx, 11			; 0000000bH
  009d9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009dc	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  009e2	d3 e2		 shl	 edx, cl
  009e4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009e7	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  009ee	0b c2		 or	 eax, edx
  009f0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009f3	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  009fa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  009fd	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00a03	03 45 a8	 add	 eax, DWORD PTR _len$77908[ebp]
  00a06	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a09	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN31@send_tree:

; 787  :         }
; 788  :         count = 0; prevlen = curlen;

  00a0f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00a16	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  00a19	89 55 ec	 mov	 DWORD PTR _prevlen$[ebp], edx

; 789  :         if (nextlen == 0) {

  00a1c	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00a20	75 10		 jne	 SHORT $LN4@send_tree

; 790  :             max_count = 138, min_count = 3;

  00a22	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00a29	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
  00a30	eb 26		 jmp	 SHORT $LN3@send_tree
$LN4@send_tree:

; 791  :         } else if (curlen == nextlen) {

  00a32	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  00a35	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  00a38	75 10		 jne	 SHORT $LN2@send_tree

; 792  :             max_count = 6, min_count = 3;

  00a3a	c7 45 e4 06 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 6
  00a41	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3

; 793  :         } else {

  00a48	eb 0e		 jmp	 SHORT $LN3@send_tree
$LN2@send_tree:

; 794  :             max_count = 7, min_count = 4;

  00a4a	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7
  00a51	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4
$LN3@send_tree:

; 795  :         }
; 796  :     }

  00a58	e9 ec f5 ff ff	 jmp	 $LN34@send_tree
$LN37@send_tree:

; 797  : }

  00a5d	8b e5		 mov	 esp, ebp
  00a5f	5d		 pop	 ebp
  00a60	c3		 ret	 0
_send_tree ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _scan_tree
_TEXT	SEGMENT
_max_count$ = -28					; size = 4
_min_count$ = -24					; size = 4
_prevlen$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_n$ = -8						; size = 4
_count$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_scan_tree PROC						; COMDAT

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 712  :     int n;                     /* iterates over all tree elements */
; 713  :     int prevlen = -1;          /* last emitted length */

  00006	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _prevlen$[ebp], -1

; 714  :     int curlen;                /* length of current code */
; 715  :     int nextlen = tree[0].Len; /* length of next code */

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  00010	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00014	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 716  :     int count = 0;             /* repeat count of the current code */

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 717  :     int max_count = 7;         /* max repeat count */

  0001e	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7

; 718  :     int min_count = 4;         /* min repeat count */

  00025	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4

; 719  : 
; 720  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0002c	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00030	75 0e		 jne	 SHORT $LN17@scan_tree
  00032	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00039	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
$LN17@scan_tree:

; 721  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00040	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00045	8b 45 10	 mov	 eax, DWORD PTR _max_code$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  0004b	66 89 54 81 06	 mov	 WORD PTR [ecx+eax*4+6], dx

; 722  : 
; 723  :     for (n = 0; n <= max_code; n++) {

  00050	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00057	eb 09		 jmp	 SHORT $LN16@scan_tree
$LN15@scan_tree:
  00059	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0005c	83 c2 01	 add	 edx, 1
  0005f	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx
$LN16@scan_tree:
  00062	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00065	3b 45 10	 cmp	 eax, DWORD PTR _max_code$[ebp]
  00068	0f 8f 2e 01 00
	00		 jg	 $LN18@scan_tree

; 724  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _nextlen$[ebp]
  00071	89 4d f4	 mov	 DWORD PTR _curlen$[ebp], ecx
  00074	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00077	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  0007a	0f b7 4c 90 06	 movzx	 ecx, WORD PTR [eax+edx*4+6]
  0007f	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 725  :         if (++count < max_count && curlen == nextlen) {

  00082	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00085	83 c2 01	 add	 edx, 1
  00088	89 55 fc	 mov	 DWORD PTR _count$[ebp], edx
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008e	3b 45 e4	 cmp	 eax, DWORD PTR _max_count$[ebp]
  00091	7d 0f		 jge	 SHORT $LN13@scan_tree
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00096	3b 4d f0	 cmp	 ecx, DWORD PTR _nextlen$[ebp]
  00099	75 07		 jne	 SHORT $LN13@scan_tree
  0009b	eb bc		 jmp	 SHORT $LN15@scan_tree

; 726  :             continue;

  0009d	e9 ac 00 00 00	 jmp	 $LN12@scan_tree
$LN13@scan_tree:

; 727  :         } else if (count < min_count) {

  000a2	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  000a5	3b 55 e8	 cmp	 edx, DWORD PTR _min_count$[ebp]
  000a8	7d 24		 jge	 SHORT $LN11@scan_tree

; 728  :             s->bl_tree[curlen].Freq += count;

  000aa	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b0	0f b7 94 81 7c
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2684]
  000b8	03 55 fc	 add	 edx, DWORD PTR _count$[ebp]
  000bb	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c1	66 89 94 81 7c
	0a 00 00	 mov	 WORD PTR [ecx+eax*4+2684], dx
  000c9	e9 80 00 00 00	 jmp	 $LN12@scan_tree
$LN11@scan_tree:

; 729  :         } else if (curlen != 0) {

  000ce	83 7d f4 00	 cmp	 DWORD PTR _curlen$[ebp], 0
  000d2	74 42		 je	 SHORT $LN9@scan_tree

; 730  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  000d4	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000d7	3b 55 ec	 cmp	 edx, DWORD PTR _prevlen$[ebp]
  000da	74 20		 je	 SHORT $LN8@scan_tree
  000dc	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e2	66 8b 94 81 7c
	0a 00 00	 mov	 dx, WORD PTR [ecx+eax*4+2684]
  000ea	66 83 c2 01	 add	 dx, 1
  000ee	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f4	66 89 94 81 7c
	0a 00 00	 mov	 WORD PTR [ecx+eax*4+2684], dx
$LN8@scan_tree:

; 731  :             s->bl_tree[REP_3_6].Freq++;

  000fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ff	66 8b 82 bc 0a
	00 00		 mov	 ax, WORD PTR [edx+2748]
  00106	66 83 c0 01	 add	 ax, 1
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010d	66 89 81 bc 0a
	00 00		 mov	 WORD PTR [ecx+2748], ax
  00114	eb 38		 jmp	 SHORT $LN12@scan_tree
$LN9@scan_tree:

; 732  :         } else if (count <= 10) {

  00116	83 7d fc 0a	 cmp	 DWORD PTR _count$[ebp], 10 ; 0000000aH
  0011a	7f 1a		 jg	 SHORT $LN6@scan_tree

; 733  :             s->bl_tree[REPZ_3_10].Freq++;

  0011c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011f	66 8b 82 c0 0a
	00 00		 mov	 ax, WORD PTR [edx+2752]
  00126	66 83 c0 01	 add	 ax, 1
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012d	66 89 81 c0 0a
	00 00		 mov	 WORD PTR [ecx+2752], ax

; 734  :         } else {

  00134	eb 18		 jmp	 SHORT $LN12@scan_tree
$LN6@scan_tree:

; 735  :             s->bl_tree[REPZ_11_138].Freq++;

  00136	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00139	66 8b 82 c4 0a
	00 00		 mov	 ax, WORD PTR [edx+2756]
  00140	66 83 c0 01	 add	 ax, 1
  00144	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00147	66 89 81 c4 0a
	00 00		 mov	 WORD PTR [ecx+2756], ax
$LN12@scan_tree:

; 736  :         }
; 737  :         count = 0; prevlen = curlen;

  0014e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00155	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  00158	89 55 ec	 mov	 DWORD PTR _prevlen$[ebp], edx

; 738  :         if (nextlen == 0) {

  0015b	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  0015f	75 10		 jne	 SHORT $LN4@scan_tree

; 739  :             max_count = 138, min_count = 3;

  00161	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00168	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
  0016f	eb 26		 jmp	 SHORT $LN3@scan_tree
$LN4@scan_tree:

; 740  :         } else if (curlen == nextlen) {

  00171	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  00174	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  00177	75 10		 jne	 SHORT $LN2@scan_tree

; 741  :             max_count = 6, min_count = 3;

  00179	c7 45 e4 06 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 6
  00180	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3

; 742  :         } else {

  00187	eb 0e		 jmp	 SHORT $LN3@scan_tree
$LN2@scan_tree:

; 743  :             max_count = 7, min_count = 4;

  00189	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7
  00190	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4
$LN3@scan_tree:

; 744  :         }
; 745  :     }

  00197	e9 bd fe ff ff	 jmp	 $LN15@scan_tree
$LN18@scan_tree:

; 746  : }

  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
_scan_tree ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _gen_codes
_TEXT	SEGMENT
tv95 = -52						; size = 4
_len$77734 = -48					; size = 4
_next_code$ = -44					; size = 32
_bits$ = -12						; size = 4
_code$ = -8						; size = 2
_n$ = -4						; size = 4
_tree$ = 8						; size = 4
_max_code$ = 12						; size = 4
_bl_count$ = 16						; size = 4
_gen_codes PROC						; COMDAT

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 582  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 583  :     ush code = 0;              /* running code value */

  00006	33 c0		 xor	 eax, eax
  00008	66 89 45 f8	 mov	 WORD PTR _code$[ebp], ax

; 584  :     int bits;                  /* bit index */
; 585  :     int n;                     /* code index */
; 586  : 
; 587  :     /* The distribution counts are first used to generate the code values
; 588  :      * without bit reversal.
; 589  :      */
; 590  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  0000c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bits$[ebp], 1
  00013	eb 09		 jmp	 SHORT $LN7@gen_codes
$LN6@gen_codes:
  00015	8b 4d f4	 mov	 ecx, DWORD PTR _bits$[ebp]
  00018	83 c1 01	 add	 ecx, 1
  0001b	89 4d f4	 mov	 DWORD PTR _bits$[ebp], ecx
$LN7@gen_codes:
  0001e	83 7d f4 0f	 cmp	 DWORD PTR _bits$[ebp], 15 ; 0000000fH
  00022	7f 25		 jg	 SHORT $LN5@gen_codes

; 591  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00024	0f b7 55 f8	 movzx	 edx, WORD PTR _code$[ebp]
  00028	8b 45 f4	 mov	 eax, DWORD PTR _bits$[ebp]
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _bl_count$[ebp]
  0002e	0f b7 44 41 fe	 movzx	 eax, WORD PTR [ecx+eax*2-2]
  00033	03 d0		 add	 edx, eax
  00035	d1 e2		 shl	 edx, 1
  00037	66 89 55 f8	 mov	 WORD PTR _code$[ebp], dx
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _bits$[ebp]
  0003e	66 8b 55 f8	 mov	 dx, WORD PTR _code$[ebp]
  00042	66 89 54 4d d4	 mov	 WORD PTR _next_code$[ebp+ecx*2], dx

; 592  :     }

  00047	eb cc		 jmp	 SHORT $LN6@gen_codes
$LN5@gen_codes:

; 593  :     /* Check that the bit counts in bl_count are consistent. The last code
; 594  :      * must be all ones.
; 595  :      */
; 596  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 597  :             "inconsistent bit counts");
; 598  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 599  : 
; 600  :     for (n = 0;  n <= max_code; n++) {

  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00050	eb 09		 jmp	 SHORT $LN4@gen_codes
$LN3@gen_codes:
  00052	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@gen_codes:
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0005e	3b 4d 0c	 cmp	 ecx, DWORD PTR _max_code$[ebp]
  00061	7f 51		 jg	 SHORT $LN8@gen_codes

; 601  :         int len = tree[n].Len;

  00063	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00066	8b 45 08	 mov	 eax, DWORD PTR _tree$[ebp]
  00069	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  0006e	89 4d d0	 mov	 DWORD PTR _len$77734[ebp], ecx

; 602  :         if (len == 0) continue;

  00071	83 7d d0 00	 cmp	 DWORD PTR _len$77734[ebp], 0
  00075	75 02		 jne	 SHORT $LN1@gen_codes
  00077	eb d9		 jmp	 SHORT $LN3@gen_codes
$LN1@gen_codes:

; 603  :         /* Now reverse the bits */
; 604  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  00079	8b 55 d0	 mov	 edx, DWORD PTR _len$77734[ebp]
  0007c	0f b7 44 55 d4	 movzx	 eax, WORD PTR _next_code$[ebp+edx*2]
  00081	89 45 cc	 mov	 DWORD PTR tv95[ebp], eax
  00084	8b 4d d0	 mov	 ecx, DWORD PTR _len$77734[ebp]
  00087	66 8b 54 4d d4	 mov	 dx, WORD PTR _next_code$[ebp+ecx*2]
  0008c	66 83 c2 01	 add	 dx, 1
  00090	8b 45 d0	 mov	 eax, DWORD PTR _len$77734[ebp]
  00093	66 89 54 45 d4	 mov	 WORD PTR _next_code$[ebp+eax*2], dx
  00098	8b 4d d0	 mov	 ecx, DWORD PTR _len$77734[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 cc	 mov	 edx, DWORD PTR tv95[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 _bi_reverse
  000a5	83 c4 08	 add	 esp, 8
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  000ab	8b 55 08	 mov	 edx, DWORD PTR _tree$[ebp]
  000ae	66 89 04 8a	 mov	 WORD PTR [edx+ecx*4], ax

; 605  : 
; 606  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 607  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 608  :     }

  000b2	eb 9e		 jmp	 SHORT $LN3@gen_codes
$LN8@gen_codes:

; 609  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_gen_codes ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
_stree$ = -52						; size = 4
_m$ = -48						; size = 4
_max_code$ = -44					; size = 4
_tree$ = -40						; size = 4
_xbits$ = -36						; size = 4
_bits$ = -32						; size = 4
_max_length$ = -28					; size = 4
_f$ = -24						; size = 2
_base$ = -20						; size = 4
_overflow$ = -16					; size = 4
_extra$ = -12						; size = 4
_n$ = -8						; size = 4
_h$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_gen_bitlen PROC					; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 494  :     ct_data *tree        = desc->dyn_tree;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d d8	 mov	 DWORD PTR _tree$[ebp], ecx

; 495  :     int max_code         = desc->max_code;

  0000e	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	89 45 d4	 mov	 DWORD PTR _max_code$[ebp], eax

; 496  :     const ct_data *stree = desc->stat_desc->static_tree;

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	89 45 cc	 mov	 DWORD PTR _stree$[ebp], eax

; 497  :     const intf *extra    = desc->stat_desc->extra_bits;

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  00025	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00028	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002b	89 45 f4	 mov	 DWORD PTR _extra$[ebp], eax

; 498  :     int base             = desc->stat_desc->extra_base;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  00031	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00034	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00037	89 45 ec	 mov	 DWORD PTR _base$[ebp], eax

; 499  :     int max_length       = desc->stat_desc->max_length;

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  0003d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00040	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00043	89 45 e4	 mov	 DWORD PTR _max_length$[ebp], eax

; 500  :     int h;              /* heap index */
; 501  :     int n, m;           /* iterate over the tree elements */
; 502  :     int bits;           /* bit length */
; 503  :     int xbits;          /* extra bits */
; 504  :     ush f;              /* frequency */
; 505  :     int overflow = 0;   /* number of elements with bit length too large */

  00046	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _overflow$[ebp], 0

; 506  : 
; 507  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  0004d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bits$[ebp], 0
  00054	eb 09		 jmp	 SHORT $LN23@gen_bitlen
$LN22@gen_bitlen:
  00056	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00059	83 c1 01	 add	 ecx, 1
  0005c	89 4d e0	 mov	 DWORD PTR _bits$[ebp], ecx
$LN23@gen_bitlen:
  0005f	83 7d e0 0f	 cmp	 DWORD PTR _bits$[ebp], 15 ; 0000000fH
  00063	7f 12		 jg	 SHORT $LN21@gen_bitlen
  00065	33 d2		 xor	 edx, edx
  00067	8b 45 e0	 mov	 eax, DWORD PTR _bits$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006d	66 89 94 41 3c
	0b 00 00	 mov	 WORD PTR [ecx+eax*2+2876], dx
  00075	eb df		 jmp	 SHORT $LN22@gen_bitlen
$LN21@gen_bitlen:

; 508  : 
; 509  :     /* In a first pass, compute the optimal bit lengths (which may
; 510  :      * overflow in the case of the bit length tree).
; 511  :      */
; 512  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00077	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007a	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00083	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  0008a	33 c0		 xor	 eax, eax
  0008c	8b 4d d8	 mov	 ecx, DWORD PTR _tree$[ebp]
  0008f	66 89 44 91 02	 mov	 WORD PTR [ecx+edx*4+2], ax

; 513  : 
; 514  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 fc	 mov	 DWORD PTR _h$[ebp], eax
  000a3	eb 09		 jmp	 SHORT $LN20@gen_bitlen
$LN19@gen_bitlen:
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _h$[ebp]
  000a8	83 c1 01	 add	 ecx, 1
  000ab	89 4d fc	 mov	 DWORD PTR _h$[ebp], ecx
$LN20@gen_bitlen:
  000ae	81 7d fc 3d 02
	00 00		 cmp	 DWORD PTR _h$[ebp], 573	; 0000023dH
  000b5	0f 8d f6 00 00
	00		 jge	 $LN18@gen_bitlen

; 515  :         n = s->heap[h];

  000bb	8b 55 fc	 mov	 edx, DWORD PTR _h$[ebp]
  000be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c1	8b 8c 90 5c 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2908]
  000c8	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx

; 516  :         bits = tree[tree[n].Dad].Len + 1;

  000cb	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  000ce	8b 45 d8	 mov	 eax, DWORD PTR _tree$[ebp]
  000d1	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  000d6	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  000d9	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  000de	83 c0 01	 add	 eax, 1
  000e1	89 45 e0	 mov	 DWORD PTR _bits$[ebp], eax

; 517  :         if (bits > max_length) bits = max_length, overflow++;

  000e4	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  000e7	3b 4d e4	 cmp	 ecx, DWORD PTR _max_length$[ebp]
  000ea	7e 0f		 jle	 SHORT $LN17@gen_bitlen
  000ec	8b 55 e4	 mov	 edx, DWORD PTR _max_length$[ebp]
  000ef	89 55 e0	 mov	 DWORD PTR _bits$[ebp], edx
  000f2	8b 45 f0	 mov	 eax, DWORD PTR _overflow$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 f0	 mov	 DWORD PTR _overflow$[ebp], eax
$LN17@gen_bitlen:

; 518  :         tree[n].Len = (ush)bits;

  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000fe	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  00101	66 8b 45 e0	 mov	 ax, WORD PTR _bits$[ebp]
  00105	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax

; 519  :         /* We overwrite tree[n].Dad which is no longer needed */
; 520  : 
; 521  :         if (n > max_code) continue; /* not a leaf node */

  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0010d	3b 4d d4	 cmp	 ecx, DWORD PTR _max_code$[ebp]
  00110	7e 02		 jle	 SHORT $LN16@gen_bitlen
  00112	eb 91		 jmp	 SHORT $LN19@gen_bitlen
$LN16@gen_bitlen:

; 522  : 
; 523  :         s->bl_count[bits]++;

  00114	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  00117	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0011a	66 8b 8c 50 3c
	0b 00 00	 mov	 cx, WORD PTR [eax+edx*2+2876]
  00122	66 83 c1 01	 add	 cx, 1
  00126	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  00129	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0012c	66 89 8c 50 3c
	0b 00 00	 mov	 WORD PTR [eax+edx*2+2876], cx

; 524  :         xbits = 0;

  00134	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _xbits$[ebp], 0

; 525  :         if (n >= base) xbits = extra[n-base];

  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0013e	3b 4d ec	 cmp	 ecx, DWORD PTR _base$[ebp]
  00141	7c 0f		 jl	 SHORT $LN15@gen_bitlen
  00143	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00146	2b 55 ec	 sub	 edx, DWORD PTR _base$[ebp]
  00149	8b 45 f4	 mov	 eax, DWORD PTR _extra$[ebp]
  0014c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0014f	89 4d dc	 mov	 DWORD PTR _xbits$[ebp], ecx
$LN15@gen_bitlen:

; 526  :         f = tree[n].Freq;

  00152	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00155	8b 45 d8	 mov	 eax, DWORD PTR _tree$[ebp]
  00158	66 8b 0c 90	 mov	 cx, WORD PTR [eax+edx*4]
  0015c	66 89 4d e8	 mov	 WORD PTR _f$[ebp], cx

; 527  :         s->opt_len += (ulg)f * (bits + xbits);

  00160	0f b7 55 e8	 movzx	 edx, WORD PTR _f$[ebp]
  00164	8b 45 e0	 mov	 eax, DWORD PTR _bits$[ebp]
  00167	03 45 dc	 add	 eax, DWORD PTR _xbits$[ebp]
  0016a	0f af d0	 imul	 edx, eax
  0016d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00170	03 91 a8 16 00
	00		 add	 edx, DWORD PTR [ecx+5800]
  00176	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00179	89 90 a8 16 00
	00		 mov	 DWORD PTR [eax+5800], edx

; 528  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  0017f	83 7d cc 00	 cmp	 DWORD PTR _stree$[ebp], 0
  00183	74 27		 je	 SHORT $LN14@gen_bitlen
  00185	0f b7 4d e8	 movzx	 ecx, WORD PTR _f$[ebp]
  00189	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0018c	8b 45 cc	 mov	 eax, DWORD PTR _stree$[ebp]
  0018f	0f b7 54 90 02	 movzx	 edx, WORD PTR [eax+edx*4+2]
  00194	03 55 dc	 add	 edx, DWORD PTR _xbits$[ebp]
  00197	0f af ca	 imul	 ecx, edx
  0019a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019d	03 88 ac 16 00
	00		 add	 ecx, DWORD PTR [eax+5804]
  001a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a6	89 8a ac 16 00
	00		 mov	 DWORD PTR [edx+5804], ecx
$LN14@gen_bitlen:

; 529  :     }

  001ac	e9 f4 fe ff ff	 jmp	 $LN19@gen_bitlen
$LN18@gen_bitlen:

; 530  :     if (overflow == 0) return;

  001b1	83 7d f0 00	 cmp	 DWORD PTR _overflow$[ebp], 0
  001b5	75 05		 jne	 SHORT $LN12@gen_bitlen
  001b7	e9 4e 01 00 00	 jmp	 $LN24@gen_bitlen
$LN12@gen_bitlen:

; 531  : 
; 532  :     Trace((stderr,"\nbit length overflow\n"));
; 533  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 534  : 
; 535  :     /* Find the first bit length which could increase: */
; 536  :     do {
; 537  :         bits = max_length-1;

  001bc	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  001bf	83 e8 01	 sub	 eax, 1
  001c2	89 45 e0	 mov	 DWORD PTR _bits$[ebp], eax
$LN9@gen_bitlen:

; 538  :         while (s->bl_count[bits] == 0) bits--;

  001c5	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  001c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	0f b7 84 4a 3c
	0b 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+2876]
  001d3	85 c0		 test	 eax, eax
  001d5	75 0b		 jne	 SHORT $LN8@gen_bitlen
  001d7	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  001da	83 e9 01	 sub	 ecx, 1
  001dd	89 4d e0	 mov	 DWORD PTR _bits$[ebp], ecx
  001e0	eb e3		 jmp	 SHORT $LN9@gen_bitlen
$LN8@gen_bitlen:

; 539  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  001e2	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  001e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e8	66 8b 8c 50 3c
	0b 00 00	 mov	 cx, WORD PTR [eax+edx*2+2876]
  001f0	66 83 e9 01	 sub	 cx, 1
  001f4	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  001f7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fa	66 89 8c 50 3c
	0b 00 00	 mov	 WORD PTR [eax+edx*2+2876], cx

; 540  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  00202	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00205	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00208	0f b7 84 4a 3e
	0b 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+2878]
  00210	83 c0 02	 add	 eax, 2
  00213	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00216	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00219	66 89 84 4a 3e
	0b 00 00	 mov	 WORD PTR [edx+ecx*2+2878], ax

; 541  :         s->bl_count[max_length]--;

  00221	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  00224	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00227	66 8b 94 41 3c
	0b 00 00	 mov	 dx, WORD PTR [ecx+eax*2+2876]
  0022f	66 83 ea 01	 sub	 dx, 1
  00233	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  00236	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00239	66 89 94 41 3c
	0b 00 00	 mov	 WORD PTR [ecx+eax*2+2876], dx

; 542  :         /* The brother of the overflow item also moves one step up,
; 543  :          * but this does not affect bl_count[max_length]
; 544  :          */
; 545  :         overflow -= 2;

  00241	8b 55 f0	 mov	 edx, DWORD PTR _overflow$[ebp]
  00244	83 ea 02	 sub	 edx, 2
  00247	89 55 f0	 mov	 DWORD PTR _overflow$[ebp], edx

; 546  :     } while (overflow > 0);

  0024a	83 7d f0 00	 cmp	 DWORD PTR _overflow$[ebp], 0
  0024e	0f 8f 68 ff ff
	ff		 jg	 $LN12@gen_bitlen

; 547  : 
; 548  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 549  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 550  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 551  :      * from 'ar' written by Haruhiko Okumura.)
; 552  :      */
; 553  :     for (bits = max_length; bits != 0; bits--) {

  00254	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  00257	89 45 e0	 mov	 DWORD PTR _bits$[ebp], eax
  0025a	eb 09		 jmp	 SHORT $LN7@gen_bitlen
$LN6@gen_bitlen:
  0025c	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  0025f	83 e9 01	 sub	 ecx, 1
  00262	89 4d e0	 mov	 DWORD PTR _bits$[ebp], ecx
$LN7@gen_bitlen:
  00265	83 7d e0 00	 cmp	 DWORD PTR _bits$[ebp], 0
  00269	0f 84 9b 00 00
	00		 je	 $LN24@gen_bitlen

; 554  :         n = s->bl_count[bits];

  0026f	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  00272	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00275	0f b7 8c 50 3c
	0b 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+2876]
  0027d	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@gen_bitlen:

; 555  :         while (n != 0) {

  00280	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  00284	74 7f		 je	 SHORT $LN3@gen_bitlen

; 556  :             m = s->heap[--h];

  00286	8b 55 fc	 mov	 edx, DWORD PTR _h$[ebp]
  00289	83 ea 01	 sub	 edx, 1
  0028c	89 55 fc	 mov	 DWORD PTR _h$[ebp], edx
  0028f	8b 45 fc	 mov	 eax, DWORD PTR _h$[ebp]
  00292	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00295	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  0029c	89 55 d0	 mov	 DWORD PTR _m$[ebp], edx

; 557  :             if (m > max_code) continue;

  0029f	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  002a2	3b 45 d4	 cmp	 eax, DWORD PTR _max_code$[ebp]
  002a5	7e 02		 jle	 SHORT $LN2@gen_bitlen
  002a7	eb d7		 jmp	 SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:

; 558  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  002a9	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  002ac	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  002af	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  002b4	3b 45 e0	 cmp	 eax, DWORD PTR _bits$[ebp]
  002b7	74 3e		 je	 SHORT $LN1@gen_bitlen

; 559  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 560  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 561  :                               *(long)tree[m].Freq;

  002b9	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  002bc	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  002bf	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  002c4	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  002c7	2b c8		 sub	 ecx, eax
  002c9	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  002cc	8b 45 d8	 mov	 eax, DWORD PTR _tree$[ebp]
  002cf	0f b7 14 90	 movzx	 edx, WORD PTR [eax+edx*4]
  002d3	0f af ca	 imul	 ecx, edx
  002d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d9	03 88 a8 16 00
	00		 add	 ecx, DWORD PTR [eax+5800]
  002df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e2	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx

; 562  :                 tree[m].Len = (ush)bits;

  002e8	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  002eb	8b 4d d8	 mov	 ecx, DWORD PTR _tree$[ebp]
  002ee	66 8b 55 e0	 mov	 dx, WORD PTR _bits$[ebp]
  002f2	66 89 54 81 02	 mov	 WORD PTR [ecx+eax*4+2], dx
$LN1@gen_bitlen:

; 563  :             }
; 564  :             n--;

  002f7	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  002fa	83 e8 01	 sub	 eax, 1
  002fd	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 565  :         }

  00300	e9 7b ff ff ff	 jmp	 $LN4@gen_bitlen
$LN3@gen_bitlen:

; 566  :     }

  00305	e9 52 ff ff ff	 jmp	 $LN6@gen_bitlen
$LN24@gen_bitlen:

; 567  : }

  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c3		 ret	 0
_gen_bitlen ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _pqdownheap
_TEXT	SEGMENT
_j$ = -8						; size = 4
_v$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_k$ = 16						; size = 4
_pqdownheap PROC					; COMDAT

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 460  :     int v = s->heap[k];

  00007	8b 45 10	 mov	 eax, DWORD PTR _k$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0000d	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  00014	89 55 fc	 mov	 DWORD PTR _v$[ebp], edx

; 461  :     int j = k << 1;  /* left son of k */

  00017	8b 45 10	 mov	 eax, DWORD PTR _k$[ebp]
  0001a	d1 e0		 shl	 eax, 1
  0001c	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN6@pqdownheap:

; 462  :     while (j <= s->heap_len) {

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00022	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00025	3b 91 50 14 00
	00		 cmp	 edx, DWORD PTR [ecx+5200]
  0002b	0f 8f 43 01 00
	00		 jg	 $LN5@pqdownheap

; 463  :         /* Set j to the smallest of the two sons: */
; 464  :         if (j < s->heap_len &&
; 465  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00031	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00037	3b 88 50 14 00
	00		 cmp	 ecx, DWORD PTR [eax+5200]
  0003d	0f 8d 95 00 00
	00		 jge	 $LN4@pqdownheap
  00043	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00046	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00049	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  00050	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00053	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0005a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00064	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00067	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  0006b	3b c1		 cmp	 eax, ecx
  0006d	7c 60		 jl	 SHORT $LN3@pqdownheap
  0006f	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00072	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00075	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  0007c	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  0007f	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00086	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00089	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00090	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00093	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  00097	3b c1		 cmp	 eax, ecx
  00099	75 3d		 jne	 SHORT $LN4@pqdownheap
  0009b	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  0009e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a1	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ab	0f b6 84 0a 58
	14 00 00	 movzx	 eax, BYTE PTR [edx+ecx+5208]
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000b6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b9	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  000c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c3	0f b6 8c 0a 58
	14 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+5208]
  000cb	3b c1		 cmp	 eax, ecx
  000cd	7f 09		 jg	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 466  :             j++;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  000d2	83 c2 01	 add	 edx, 1
  000d5	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx
$LN4@pqdownheap:

; 467  :         }
; 468  :         /* Exit if v is smaller than both sons */
; 469  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  000de	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  000e2	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e8	8b 84 81 5c 0b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2908]
  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  000f2	0f b7 04 81	 movzx	 eax, WORD PTR [ecx+eax*4]
  000f6	3b d0		 cmp	 edx, eax
  000f8	7c 4b		 jl	 SHORT $LN1@pqdownheap
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp]
  000fd	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00100	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00104	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00107	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010a	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00111	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00114	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  00118	3b c1		 cmp	 eax, ecx
  0011a	75 2b		 jne	 SHORT $LN2@pqdownheap
  0011c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011f	03 55 fc	 add	 edx, DWORD PTR _v$[ebp]
  00122	0f b6 82 58 14
	00 00		 movzx	 eax, BYTE PTR [edx+5208]
  00129	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0012c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012f	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00136	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00139	0f b6 8c 0a 58
	14 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+5208]
  00141	3b c1		 cmp	 eax, ecx
  00143	7f 02		 jg	 SHORT $LN2@pqdownheap
$LN1@pqdownheap:
  00145	eb 2d		 jmp	 SHORT $LN5@pqdownheap
$LN2@pqdownheap:

; 470  : 
; 471  :         /* Exchange v with the smallest son */
; 472  :         s->heap[k] = s->heap[j];  k = j;

  00147	8b 55 10	 mov	 edx, DWORD PTR _k$[ebp]
  0014a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00150	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00153	8b 8c 8e 5c 0b
	00 00		 mov	 ecx, DWORD PTR [esi+ecx*4+2908]
  0015a	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx
  00161	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00164	89 55 10	 mov	 DWORD PTR _k$[ebp], edx

; 473  : 
; 474  :         /* And continue down the tree, setting j to the left son of k */
; 475  :         j <<= 1;

  00167	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0016a	d1 e0		 shl	 eax, 1
  0016c	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 476  :     }

  0016f	e9 ab fe ff ff	 jmp	 $LN6@pqdownheap
$LN5@pqdownheap:

; 477  :     s->heap[k] = v;

  00174	8b 4d 10	 mov	 ecx, DWORD PTR _k$[ebp]
  00177	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  0017d	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax

; 478  : }

  00184	5e		 pop	 esi
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
_pqdownheap ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _init_block
_TEXT	SEGMENT
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_init_block PROC					; COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 414  :     int n; /* iterates over tree elements */
; 415  : 
; 416  :     /* Initialize the trees. */
; 417  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0000b	eb 09		 jmp	 SHORT $LN9@init_block
$LN8@init_block:
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00010	83 c0 01	 add	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN9@init_block:
  00016	81 7d fc 1e 01
	00 00		 cmp	 DWORD PTR _n$[ebp], 286	; 0000011eH
  0001d	7d 12		 jge	 SHORT $LN7@init_block
  0001f	33 c9		 xor	 ecx, ecx
  00021	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00027	66 89 8c 90 94
	00 00 00	 mov	 WORD PTR [eax+edx*4+148], cx
  0002f	eb dc		 jmp	 SHORT $LN8@init_block
$LN7@init_block:

; 418  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN6@init_block
$LN5@init_block:
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0003d	83 c1 01	 add	 ecx, 1
  00040	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN6@init_block:
  00043	83 7d fc 1e	 cmp	 DWORD PTR _n$[ebp], 30	; 0000001eH
  00047	7d 12		 jge	 SHORT $LN4@init_block
  00049	33 d2		 xor	 edx, edx
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00051	66 89 94 81 88
	09 00 00	 mov	 WORD PTR [ecx+eax*4+2440], dx
  00059	eb df		 jmp	 SHORT $LN5@init_block
$LN4@init_block:

; 419  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00062	eb 09		 jmp	 SHORT $LN3@init_block
$LN2@init_block:
  00064	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00067	83 c2 01	 add	 edx, 1
  0006a	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx
$LN3@init_block:
  0006d	83 7d fc 13	 cmp	 DWORD PTR _n$[ebp], 19	; 00000013H
  00071	7d 12		 jge	 SHORT $LN1@init_block
  00073	33 c0		 xor	 eax, eax
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00078	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	66 89 84 8a 7c
	0a 00 00	 mov	 WORD PTR [edx+ecx*4+2684], ax
  00083	eb df		 jmp	 SHORT $LN2@init_block
$LN1@init_block:

; 420  : 
; 421  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008d	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax

; 422  :     s->opt_len = s->static_len = 0L;

  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	c7 82 ac 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5804], 0
  000a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a4	c7 80 a8 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5800], 0

; 423  :     s->last_lit = s->matches = 0;

  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b1	c7 81 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5808], 0
  000bb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000be	c7 82 a0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5792], 0

; 424  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_init_block ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : #if defined(GEN_TREES_H) || !defined(STDC)
; 241  :     static int static_init_done = 0;
; 242  :     int n;        /* iterates over tree elements */
; 243  :     int bits;     /* bit counter */
; 244  :     int length;   /* length value */
; 245  :     int code;     /* code value */
; 246  :     int dist;     /* distance index */
; 247  :     ush bl_count[MAX_BITS+1];
; 248  :     /* number of codes at each bit length for an optimal tree */
; 249  : 
; 250  :     if (static_init_done) return;
; 251  : 
; 252  :     /* For some embedded targets, global variables are not initialized: */
; 253  :     static_l_desc.static_tree = static_ltree;
; 254  :     static_l_desc.extra_bits = extra_lbits;
; 255  :     static_d_desc.static_tree = static_dtree;
; 256  :     static_d_desc.extra_bits = extra_dbits;
; 257  :     static_bl_desc.extra_bits = extra_blbits;
; 258  : 
; 259  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 260  :     length = 0;
; 261  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 262  :         base_length[code] = length;
; 263  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 264  :             _length_code[length++] = (uch)code;
; 265  :         }
; 266  :     }
; 267  :     Assert (length == 256, "tr_static_init: length != 256");
; 268  :     /* Note that the length 255 (match length 258) can be represented
; 269  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 270  :      * overwrite length_code[255] to use the best encoding:
; 271  :      */
; 272  :     _length_code[length-1] = (uch)code;
; 273  : 
; 274  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 275  :     dist = 0;
; 276  :     for (code = 0 ; code < 16; code++) {
; 277  :         base_dist[code] = dist;
; 278  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 279  :             _dist_code[dist++] = (uch)code;
; 280  :         }
; 281  :     }
; 282  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 283  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 284  :     for ( ; code < D_CODES; code++) {
; 285  :         base_dist[code] = dist << 7;
; 286  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 287  :             _dist_code[256 + dist++] = (uch)code;
; 288  :         }
; 289  :     }
; 290  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 291  : 
; 292  :     /* Construct the codes of the static literal tree */
; 293  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 294  :     n = 0;
; 295  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 296  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 297  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 298  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 300  :      * tree construction to get a canonical Huffman tree (longest code
; 301  :      * all ones)
; 302  :      */
; 303  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 304  : 
; 305  :     /* The static distance tree is trivial: */
; 306  :     for (n = 0; n < D_CODES; n++) {
; 307  :         static_dtree[n].Len = 5;
; 308  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 309  :     }
; 310  :     static_init_done = 1;
; 311  : 
; 312  : #  ifdef GEN_TREES_H
; 313  :     gen_trees_header();
; 314  : #  endif
; 315  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 316  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_tr_static_init ENDP
; Function compile flags: /Odtp
;	COMDAT _copy_block
_TEXT	SEGMENT
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_header$ = 20						; size = 4
_copy_block PROC					; COMDAT

; 1202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1203 :     bi_windup(s);        /* align on byte boundary */

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _bi_windup
  0000c	83 c4 04	 add	 esp, 4

; 1204 :     s->last_eob_len = 8; /* enough lookahead for inflate */

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	c7 81 b4 16 00
	00 08 00 00 00	 mov	 DWORD PTR [ecx+5812], 8

; 1205 : 
; 1206 :     if (header) {

  0001c	83 7d 14 00	 cmp	 DWORD PTR _header$[ebp], 0
  00020	0f 84 a2 00 00
	00		 je	 $LN2@copy_block

; 1207 :         put_short(s, (ush)len);

  00026	0f b7 55 10	 movzx	 edx, WORD PTR _len$[ebp]
  0002a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00030	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00042	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00045	83 c2 01	 add	 edx, 1
  00048	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	0f b7 4d 10	 movzx	 ecx, WORD PTR _len$[ebp]
  00052	c1 f9 08	 sar	 ecx, 8
  00055	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00058	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00061	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00064	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00067	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006a	83 c1 01	 add	 ecx, 1
  0006d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00070	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1208 :         put_short(s, (ush)~len);

  00073	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00076	f7 d0		 not	 eax
  00078	0f b7 c8	 movzx	 ecx, ax
  0007b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00081	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00084	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00087	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008a	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0008d	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00090	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00093	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00096	83 c1 01	 add	 ecx, 1
  00099	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009c	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0009f	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  000a2	f7 d0		 not	 eax
  000a4	0f b7 c8	 movzx	 ecx, ax
  000a7	c1 f9 08	 sar	 ecx, 8
  000aa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ad	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b3	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000b6	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000bc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000bf	83 c1 01	 add	 ecx, 1
  000c2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c5	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN2@copy_block:

; 1209 : #ifdef DEBUG
; 1210 :         s->bits_sent += 2*16;
; 1211 : #endif
; 1212 :     }
; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent += (ulg)len<<3;
; 1215 : #endif
; 1216 :     while (len--) {

  000c8	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx
  000d4	85 c0		 test	 eax, eax
  000d6	74 2e		 je	 SHORT $LN4@copy_block

; 1217 :         put_byte(s, *buf++);

  000d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000db	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000e7	8a 09		 mov	 cl, BYTE PTR [ecx]
  000e9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000f2	83 c0 01	 add	 eax, 1
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f8	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000fb	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000fe	83 c2 01	 add	 edx, 1
  00101	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx

; 1218 :     }

  00104	eb c2		 jmp	 SHORT $LN2@copy_block
$LN4@copy_block:

; 1219 : }

  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_copy_block ENDP
_TEXT	ENDS
PUBLIC	__tr_stored_block
; Function compile flags: /Odtp
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_val$78005 = -8						; size = 4
_len$78001 = -4						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_eof$ = 20						; size = 4
__tr_stored_block PROC					; COMDAT

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 873  :     send_bits(s, (STORED_BLOCK<<1)+eof, 3);  /* send block type */

  00006	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _len$78001[ebp], 3
  0000d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00012	2b 45 fc	 sub	 eax, DWORD PTR _len$78001[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00018	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0001e	0f 8e be 00 00
	00		 jle	 $LN2@tr_stored_
  00024	8b 55 14	 mov	 edx, DWORD PTR _eof$[ebp]
  00027	89 55 f8	 mov	 DWORD PTR _val$78005[ebp], edx
  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	8b 55 f8	 mov	 edx, DWORD PTR _val$78005[ebp]
  00030	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00036	d3 e2		 shl	 edx, cl
  00038	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00042	0b ca		 or	 ecx, edx
  00044	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00047	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0004e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00051	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00058	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0005e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00067	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0006a	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0006d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00070	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00073	83 c1 01	 add	 ecx, 1
  00076	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00079	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0007c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007f	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00086	c1 f9 08	 sar	 ecx, 8
  00089	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00095	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00098	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0009b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009e	83 c1 01	 add	 ecx, 1
  000a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a4	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000a7	0f b7 45 f8	 movzx	 eax, WORD PTR _val$78005[ebp]
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ae	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b3	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  000b9	8b ca		 mov	 ecx, edx
  000bb	d3 f8		 sar	 eax, cl
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c0	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000c7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ca	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000d0	8b 4d fc	 mov	 ecx, DWORD PTR _len$78001[ebp]
  000d3	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000d7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000da	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000e0	eb 39		 jmp	 SHORT $LN1@tr_stored_
$LN2@tr_stored_:
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e5	8b 55 14	 mov	 edx, DWORD PTR _eof$[ebp]
  000e8	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  000ee	d3 e2		 shl	 edx, cl
  000f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f3	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000fa	0b ca		 or	 ecx, edx
  000fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ff	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00106	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00109	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0010f	03 4d fc	 add	 ecx, DWORD PTR _len$78001[ebp]
  00112	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00115	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN1@tr_stored_:

; 874  : #ifdef DEBUG
; 875  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 876  :     s->compressed_len += (stored_len + 4) << 3;
; 877  : #endif
; 878  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  0011b	6a 01		 push	 1
  0011d	8b 45 10	 mov	 eax, DWORD PTR _stored_len$[ebp]
  00120	50		 push	 eax
  00121	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00124	51		 push	 ecx
  00125	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00128	52		 push	 edx
  00129	e8 00 00 00 00	 call	 _copy_block
  0012e	83 c4 10	 add	 esp, 16			; 00000010H

; 879  : }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
__tr_stored_block ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_val$77985 = -36					; size = 4
_len$77981 = -32					; size = 4
_val$77970 = -28					; size = 4
_len$77966 = -24					; size = 4
_val$77958 = -20					; size = 4
_len$77954 = -16					; size = 4
_val$77946 = -12					; size = 4
_len$77942 = -8						; size = 4
_rank$ = -4						; size = 4
_s$ = 8							; size = 4
_lcodes$ = 12						; size = 4
_dcodes$ = 16						; size = 4
_blcodes$ = 20						; size = 4
_send_all_trees PROC					; COMDAT

; 841  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 842  :     int rank;                    /* index in bl_order */
; 843  : 
; 844  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 845  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 846  :             "too many codes");
; 847  :     Tracev((stderr, "\nbl counts: "));
; 848  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00006	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _len$77942[ebp], 5
  0000d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00012	2b 45 f8	 sub	 eax, DWORD PTR _len$77942[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00018	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0001e	0f 8e c4 00 00
	00		 jle	 $LN11@send_all_t
  00024	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  00027	81 ea 01 01 00
	00		 sub	 edx, 257		; 00000101H
  0002d	89 55 f4	 mov	 DWORD PTR _val$77946[ebp], edx
  00030	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 55 f4	 mov	 edx, DWORD PTR _val$77946[ebp]
  00036	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0003c	d3 e2		 shl	 edx, cl
  0003e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00041	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00048	0b ca		 or	 ecx, edx
  0004a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0004d	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00054	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00057	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0005e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00064	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00067	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006d	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00070	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00073	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00076	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00079	83 c1 01	 add	 ecx, 1
  0007c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007f	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00082	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00085	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0008c	c1 f9 08	 sar	 ecx, 8
  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00095	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00098	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0009b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0009e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a4	83 c1 01	 add	 ecx, 1
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000ad	0f b7 45 f4	 movzx	 eax, WORD PTR _val$77946[ebp]
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b9	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  000bf	8b ca		 mov	 ecx, edx
  000c1	d3 f8		 sar	 eax, cl
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c6	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000cd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d0	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _len$77942[ebp]
  000d9	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000dd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e0	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000e6	eb 3f		 jmp	 SHORT $LN10@send_all_t
$LN11@send_all_t:
  000e8	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  000eb	81 ea 01 01 00
	00		 sub	 edx, 257		; 00000101H
  000f1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f4	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000fa	d3 e2		 shl	 edx, cl
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ff	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00106	0b c2		 or	 eax, edx
  00108	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010b	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00112	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00115	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0011b	03 45 f8	 add	 eax, DWORD PTR _len$77942[ebp]
  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00121	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@send_all_t:

; 849  :     send_bits(s, dcodes-1,   5);

  00127	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _len$77954[ebp], 5
  0012e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00133	2b 55 f0	 sub	 edx, DWORD PTR _len$77954[ebp]
  00136	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00139	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0013f	0f 8e bf 00 00
	00		 jle	 $LN9@send_all_t
  00145	8b 4d 10	 mov	 ecx, DWORD PTR _dcodes$[ebp]
  00148	83 e9 01	 sub	 ecx, 1
  0014b	89 4d ec	 mov	 DWORD PTR _val$77958[ebp], ecx
  0014e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00151	8b 45 ec	 mov	 eax, DWORD PTR _val$77958[ebp]
  00154	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  0015a	d3 e0		 shl	 eax, cl
  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015f	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00166	0b d0		 or	 edx, eax
  00168	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016b	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00172	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00175	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0017c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00182	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00185	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00188	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0018b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0018e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00191	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00194	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00197	83 c2 01	 add	 edx, 1
  0019a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019d	89 50 14	 mov	 DWORD PTR [eax+20], edx
  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a3	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  001aa	c1 fa 08	 sar	 edx, 8
  001ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b6	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  001b9	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001bc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001bf	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001c2	83 c2 01	 add	 edx, 1
  001c5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c8	89 50 14	 mov	 DWORD PTR [eax+20], edx
  001cb	0f b7 55 ec	 movzx	 edx, WORD PTR _val$77958[ebp]
  001cf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001d7	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  001dd	d3 fa		 sar	 edx, cl
  001df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e2	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  001e9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ec	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001f2	8b 4d f0	 mov	 ecx, DWORD PTR _len$77954[ebp]
  001f5	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001f9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fc	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00202	eb 3c		 jmp	 SHORT $LN8@send_all_t
$LN9@send_all_t:
  00204	8b 55 10	 mov	 edx, DWORD PTR _dcodes$[ebp]
  00207	83 ea 01	 sub	 edx, 1
  0020a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00213	d3 e2		 shl	 edx, cl
  00215	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00218	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0021f	0b c2		 or	 eax, edx
  00221	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00224	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0022b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022e	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00234	03 45 f0	 add	 eax, DWORD PTR _len$77954[ebp]
  00237	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0023a	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN8@send_all_t:

; 850  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  00240	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _len$77966[ebp], 4
  00247	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0024c	2b 55 e8	 sub	 edx, DWORD PTR _len$77966[ebp]
  0024f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00252	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00258	0f 8e bf 00 00
	00		 jle	 $LN7@send_all_t
  0025e	8b 4d 14	 mov	 ecx, DWORD PTR _blcodes$[ebp]
  00261	83 e9 04	 sub	 ecx, 4
  00264	89 4d e4	 mov	 DWORD PTR _val$77970[ebp], ecx
  00267	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026a	8b 45 e4	 mov	 eax, DWORD PTR _val$77970[ebp]
  0026d	8b 8a bc 16 00
	00		 mov	 ecx, DWORD PTR [edx+5820]
  00273	d3 e0		 shl	 eax, cl
  00275	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00278	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  0027f	0b d0		 or	 edx, eax
  00281	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00284	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0028b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0028e	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00295	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0029b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a4	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002a7	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ad	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002b0	83 c2 01	 add	 edx, 1
  002b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b6	89 50 14	 mov	 DWORD PTR [eax+20], edx
  002b9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002bc	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  002c3	c1 fa 08	 sar	 edx, 8
  002c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002cc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cf	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002d2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002db	83 c2 01	 add	 edx, 1
  002de	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e1	89 50 14	 mov	 DWORD PTR [eax+20], edx
  002e4	0f b7 55 e4	 movzx	 edx, WORD PTR _val$77970[ebp]
  002e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002eb	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f0	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  002f6	d3 fa		 sar	 edx, cl
  002f8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002fb	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00302	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00305	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0030b	8b 4d e8	 mov	 ecx, DWORD PTR _len$77966[ebp]
  0030e	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00312	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00315	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0031b	eb 3c		 jmp	 SHORT $LN6@send_all_t
$LN7@send_all_t:
  0031d	8b 55 14	 mov	 edx, DWORD PTR _blcodes$[ebp]
  00320	83 ea 04	 sub	 edx, 4
  00323	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00326	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0032c	d3 e2		 shl	 edx, cl
  0032e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00331	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00338	0b c2		 or	 eax, edx
  0033a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033d	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00344	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00347	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0034d	03 45 e8	 add	 eax, DWORD PTR _len$77966[ebp]
  00350	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00353	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN6@send_all_t:

; 851  :     for (rank = 0; rank < blcodes; rank++) {

  00359	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rank$[ebp], 0
  00360	eb 09		 jmp	 SHORT $LN5@send_all_t
$LN4@send_all_t:
  00362	8b 55 fc	 mov	 edx, DWORD PTR _rank$[ebp]
  00365	83 c2 01	 add	 edx, 1
  00368	89 55 fc	 mov	 DWORD PTR _rank$[ebp], edx
$LN5@send_all_t:
  0036b	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  0036e	3b 45 14	 cmp	 eax, DWORD PTR _blcodes$[ebp]
  00371	0f 8d 3e 01 00
	00		 jge	 $LN3@send_all_t

; 852  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 853  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00377	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR _len$77981[ebp], 3
  0037e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00383	2b 4d e0	 sub	 ecx, DWORD PTR _len$77981[ebp]
  00386	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00389	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  0038f	0f 8e d0 00 00
	00		 jle	 $LN2@send_all_t
  00395	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  00398	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bl_order[eax]
  0039f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a2	0f b7 84 8a 7e
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2686]
  003aa	89 45 dc	 mov	 DWORD PTR _val$77985[ebp], eax
  003ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003b0	8b 55 dc	 mov	 edx, DWORD PTR _val$77985[ebp]
  003b3	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  003b9	d3 e2		 shl	 edx, cl
  003bb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003be	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003c5	0b ca		 or	 ecx, edx
  003c7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ca	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  003d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003d4	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003db	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  003e1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003e7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ea	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  003ed	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  003f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003f6	83 c1 01	 add	 ecx, 1
  003f9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fc	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  003ff	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00402	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00409	c1 f9 08	 sar	 ecx, 8
  0040c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0040f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00412	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00415	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00418	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0041b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0041e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00421	83 c1 01	 add	 ecx, 1
  00424	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00427	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0042a	0f b7 45 dc	 movzx	 eax, WORD PTR _val$77985[ebp]
  0042e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00431	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00436	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  0043c	8b ca		 mov	 ecx, edx
  0043e	d3 f8		 sar	 eax, cl
  00440	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00443	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0044a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0044d	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00453	8b 4d e0	 mov	 ecx, DWORD PTR _len$77981[ebp]
  00456	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  0045a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0045d	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00463	eb 4b		 jmp	 SHORT $LN1@send_all_t
$LN2@send_all_t:
  00465	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00468	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _bl_order[ecx]
  0046f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00472	0f b7 94 90 7e
	0a 00 00	 movzx	 edx, WORD PTR [eax+edx*4+2686]
  0047a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0047d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00483	d3 e2		 shl	 edx, cl
  00485	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00488	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0048f	0b c2		 or	 eax, edx
  00491	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00494	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0049b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0049e	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  004a4	03 45 e0	 add	 eax, DWORD PTR _len$77981[ebp]
  004a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004aa	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@send_all_t:

; 854  :     }

  004b0	e9 ad fe ff ff	 jmp	 $LN4@send_all_t
$LN3@send_all_t:

; 855  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 856  : 
; 857  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  004b5	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  004b8	83 ea 01	 sub	 edx, 1
  004bb	52		 push	 edx
  004bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004bf	05 94 00 00 00	 add	 eax, 148		; 00000094H
  004c4	50		 push	 eax
  004c5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004c8	51		 push	 ecx
  004c9	e8 00 00 00 00	 call	 _send_tree
  004ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 858  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 859  : 
; 860  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  004d1	8b 55 10	 mov	 edx, DWORD PTR _dcodes$[ebp]
  004d4	83 ea 01	 sub	 edx, 1
  004d7	52		 push	 edx
  004d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004db	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  004e0	50		 push	 eax
  004e1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e4	51		 push	 ecx
  004e5	e8 00 00 00 00	 call	 _send_tree
  004ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 861  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 862  : }

  004ed	8b e5		 mov	 esp, ebp
  004ef	5d		 pop	 ebp
  004f0	c3		 ret	 0
_send_all_trees ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _build_tree
_TEXT	SEGMENT
tv211 = -36						; size = 4
tv131 = -32						; size = 4
_stree$ = -28						; size = 4
_m$ = -24						; size = 4
_node$ = -20						; size = 4
_max_code$ = -16					; size = 4
_tree$ = -12						; size = 4
_n$ = -8						; size = 4
_elems$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_build_tree PROC					; COMDAT

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 623  :     ct_data *tree         = desc->dyn_tree;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d f4	 mov	 DWORD PTR _tree$[ebp], ecx

; 624  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0000e	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  00011	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	89 4d e4	 mov	 DWORD PTR _stree$[ebp], ecx

; 625  :     int elems             = desc->stat_desc->elems;

  00019	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00022	89 4d fc	 mov	 DWORD PTR _elems$[ebp], ecx

; 626  :     int n, m;          /* iterate over heap elements */
; 627  :     int max_code = -1; /* largest code with non zero frequency */

  00025	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _max_code$[ebp], -1

; 628  :     int node;          /* new node being created */
; 629  : 
; 630  :     /* Construct the initial heap, with least frequent element in
; 631  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 632  :      * heap[0] is not used.
; 633  :      */
; 634  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  0002c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0002f	c7 82 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5200], 0
  00039	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003c	c7 80 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [eax+5204], 573 ; 0000023dH

; 635  : 
; 636  :     for (n = 0; n < elems; n++) {

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN14@build_tree
$LN13@build_tree:
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00052	83 c1 01	 add	 ecx, 1
  00055	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
$LN14@build_tree:
  00058	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0005b	3b 55 fc	 cmp	 edx, DWORD PTR _elems$[ebp]
  0005e	7d 5d		 jge	 SHORT $LN9@build_tree

; 637  :         if (tree[n].Freq != 0) {

  00060	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00066	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  0006a	85 d2		 test	 edx, edx
  0006c	74 40		 je	 SHORT $LN11@build_tree

; 638  :             s->heap[++(s->heap_len)] = max_code = n;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00071	89 45 f0	 mov	 DWORD PTR _max_code$[ebp], eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00077	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  0007d	83 c2 01	 add	 edx, 1
  00080	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00083	89 90 50 14 00
	00		 mov	 DWORD PTR [eax+5200], edx
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008c	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  00092	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _max_code$[ebp]
  00098	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx

; 639  :             s->depth[n] = 0;

  0009f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a2	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  000a5	c6 82 58 14 00
	00 00		 mov	 BYTE PTR [edx+5208], 0

; 640  :         } else {

  000ac	eb 0d		 jmp	 SHORT $LN10@build_tree
$LN11@build_tree:

; 641  :             tree[n].Len = 0;

  000ae	33 c0		 xor	 eax, eax
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000b3	8b 55 f4	 mov	 edx, DWORD PTR _tree$[ebp]
  000b6	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax
$LN10@build_tree:

; 642  :         }
; 643  :     }

  000bb	eb 92		 jmp	 SHORT $LN13@build_tree
$LN9@build_tree:

; 644  : 
; 645  :     /* The pkzip format requires that at least one distance code exists,
; 646  :      * and that at least one bit should be sent even if there is only one
; 647  :      * possible code. So to avoid special checks later on we force at least
; 648  :      * two codes of non zero frequency.
; 649  :      */
; 650  :     while (s->heap_len < 2) {

  000bd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c0	83 b8 50 14 00
	00 02		 cmp	 DWORD PTR [eax+5200], 2
  000c7	0f 8d aa 00 00
	00		 jge	 $LN8@build_tree

; 651  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  000cd	83 7d f0 02	 cmp	 DWORD PTR _max_code$[ebp], 2
  000d1	7d 11		 jge	 SHORT $LN17@build_tree
  000d3	8b 4d f0	 mov	 ecx, DWORD PTR _max_code$[ebp]
  000d6	83 c1 01	 add	 ecx, 1
  000d9	89 4d f0	 mov	 DWORD PTR _max_code$[ebp], ecx
  000dc	8b 55 f0	 mov	 edx, DWORD PTR _max_code$[ebp]
  000df	89 55 e0	 mov	 DWORD PTR tv131[ebp], edx
  000e2	eb 07		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  000e4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN18@build_tree:
  000eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ee	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  000f4	83 c1 01	 add	 ecx, 1
  000f7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000fa	89 8a 50 14 00
	00		 mov	 DWORD PTR [edx+5200], ecx
  00100	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00103	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  00109	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010c	8b 45 e0	 mov	 eax, DWORD PTR tv131[ebp]
  0010f	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax
  00116	8b 4d e0	 mov	 ecx, DWORD PTR tv131[ebp]
  00119	89 4d ec	 mov	 DWORD PTR _node$[ebp], ecx

; 652  :         tree[node].Freq = 1;

  0011c	ba 01 00 00 00	 mov	 edx, 1
  00121	8b 45 ec	 mov	 eax, DWORD PTR _node$[ebp]
  00124	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00127	66 89 14 81	 mov	 WORD PTR [ecx+eax*4], dx

; 653  :         s->depth[node] = 0;

  0012b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012e	03 55 ec	 add	 edx, DWORD PTR _node$[ebp]
  00131	c6 82 58 14 00
	00 00		 mov	 BYTE PTR [edx+5208], 0

; 654  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  00138	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013b	8b 88 a8 16 00
	00		 mov	 ecx, DWORD PTR [eax+5800]
  00141	83 e9 01	 sub	 ecx, 1
  00144	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00147	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx
  0014d	83 7d e4 00	 cmp	 DWORD PTR _stree$[ebp], 0
  00151	74 1f		 je	 SHORT $LN7@build_tree
  00153	8b 45 ec	 mov	 eax, DWORD PTR _node$[ebp]
  00156	8b 4d e4	 mov	 ecx, DWORD PTR _stree$[ebp]
  00159	0f b7 54 81 02	 movzx	 edx, WORD PTR [ecx+eax*4+2]
  0015e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00161	8b 88 ac 16 00
	00		 mov	 ecx, DWORD PTR [eax+5804]
  00167	2b ca		 sub	 ecx, edx
  00169	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016c	89 8a ac 16 00
	00		 mov	 DWORD PTR [edx+5804], ecx
$LN7@build_tree:

; 655  :         /* node is 0 or 1 so it does not have extra bits */
; 656  :     }

  00172	e9 46 ff ff ff	 jmp	 $LN9@build_tree
$LN8@build_tree:

; 657  :     desc->max_code = max_code;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  0017a	8b 4d f0	 mov	 ecx, DWORD PTR _max_code$[ebp]
  0017d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 658  : 
; 659  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 660  :      * establish sub-heaps of increasing lengths:
; 661  :      */
; 662  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  00180	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00183	8b 82 50 14 00
	00		 mov	 eax, DWORD PTR [edx+5200]
  00189	99		 cdq
  0018a	2b c2		 sub	 eax, edx
  0018c	d1 f8		 sar	 eax, 1
  0018e	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00191	eb 09		 jmp	 SHORT $LN6@build_tree
$LN5@build_tree:
  00193	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00196	83 e8 01	 sub	 eax, 1
  00199	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN6@build_tree:
  0019c	83 7d f8 01	 cmp	 DWORD PTR _n$[ebp], 1
  001a0	7c 16		 jl	 SHORT $LN4@build_tree
  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 f4	 mov	 edx, DWORD PTR _tree$[ebp]
  001a9	52		 push	 edx
  001aa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 _pqdownheap
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b6	eb db		 jmp	 SHORT $LN5@build_tree
$LN4@build_tree:

; 663  : 
; 664  :     /* Construct the Huffman tree by repeatedly combining the least two
; 665  :      * frequent nodes.
; 666  :      */
; 667  :     node = elems;              /* next internal node of the tree */

  001b8	8b 4d fc	 mov	 ecx, DWORD PTR _elems$[ebp]
  001bb	89 4d ec	 mov	 DWORD PTR _node$[ebp], ecx
$LN3@build_tree:

; 668  :     do {
; 669  :         pqremove(s, tree, n);  /* n = node of least frequency */

  001be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c1	8b 82 60 0b 00
	00		 mov	 eax, DWORD PTR [edx+2912]
  001c7	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cd	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  001d3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d9	8b 94 91 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+edx*4+2908]
  001e0	89 90 60 0b 00
	00		 mov	 DWORD PTR [eax+2912], edx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e9	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  001ef	83 e9 01	 sub	 ecx, 1
  001f2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f5	89 8a 50 14 00
	00		 mov	 DWORD PTR [edx+5200], ecx
  001fb	6a 01		 push	 1
  001fd	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  00200	50		 push	 eax
  00201	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00204	51		 push	 ecx
  00205	e8 00 00 00 00	 call	 _pqdownheap
  0020a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 670  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  0020d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00210	8b 82 60 0b 00
	00		 mov	 eax, DWORD PTR [edx+2912]
  00216	89 45 e8	 mov	 DWORD PTR _m$[ebp], eax

; 671  : 
; 672  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00219	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021c	8b 91 54 14 00
	00		 mov	 edx, DWORD PTR [ecx+5204]
  00222	83 ea 01	 sub	 edx, 1
  00225	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00228	89 90 54 14 00
	00		 mov	 DWORD PTR [eax+5204], edx
  0022e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00231	8b 91 54 14 00
	00		 mov	 edx, DWORD PTR [ecx+5204]
  00237	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023a	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0023d	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx

; 673  :         s->heap[--(s->heap_max)] = m;

  00244	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00247	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0024d	83 e8 01	 sub	 eax, 1
  00250	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00253	89 81 54 14 00
	00		 mov	 DWORD PTR [ecx+5204], eax
  00259	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025c	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00262	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00265	8b 55 e8	 mov	 edx, DWORD PTR _m$[ebp]
  00268	89 94 81 5c 0b
	00 00		 mov	 DWORD PTR [ecx+eax*4+2908], edx

; 674  : 
; 675  :         /* Create a new node father of n and m */
; 676  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0026f	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00272	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00275	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  00279	8b 45 e8	 mov	 eax, DWORD PTR _m$[ebp]
  0027c	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  0027f	0f b7 04 81	 movzx	 eax, WORD PTR [ecx+eax*4]
  00283	03 d0		 add	 edx, eax
  00285	8b 4d ec	 mov	 ecx, DWORD PTR _node$[ebp]
  00288	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  0028b	66 89 14 88	 mov	 WORD PTR [eax+ecx*4], dx

; 677  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 678  :                                 s->depth[n] : s->depth[m]) + 1);

  0028f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00292	03 4d f8	 add	 ecx, DWORD PTR _n$[ebp]
  00295	0f b6 91 58 14
	00 00		 movzx	 edx, BYTE PTR [ecx+5208]
  0029c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029f	03 45 e8	 add	 eax, DWORD PTR _m$[ebp]
  002a2	0f b6 88 58 14
	00 00		 movzx	 ecx, BYTE PTR [eax+5208]
  002a9	3b d1		 cmp	 edx, ecx
  002ab	7c 12		 jl	 SHORT $LN19@build_tree
  002ad	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b0	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  002b3	0f b6 82 58 14
	00 00		 movzx	 eax, BYTE PTR [edx+5208]
  002ba	89 45 dc	 mov	 DWORD PTR tv211[ebp], eax
  002bd	eb 10		 jmp	 SHORT $LN20@build_tree
$LN19@build_tree:
  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c2	03 4d e8	 add	 ecx, DWORD PTR _m$[ebp]
  002c5	0f b6 91 58 14
	00 00		 movzx	 edx, BYTE PTR [ecx+5208]
  002cc	89 55 dc	 mov	 DWORD PTR tv211[ebp], edx
$LN20@build_tree:
  002cf	8b 45 dc	 mov	 eax, DWORD PTR tv211[ebp]
  002d2	83 c0 01	 add	 eax, 1
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d8	03 4d ec	 add	 ecx, DWORD PTR _node$[ebp]
  002db	88 81 58 14 00
	00		 mov	 BYTE PTR [ecx+5208], al

; 679  :         tree[n].Dad = tree[m].Dad = (ush)node;

  002e1	8b 55 e8	 mov	 edx, DWORD PTR _m$[ebp]
  002e4	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  002e7	66 8b 4d ec	 mov	 cx, WORD PTR _node$[ebp]
  002eb	66 89 4c 90 02	 mov	 WORD PTR [eax+edx*4+2], cx
  002f0	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  002f3	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  002f6	66 8b 4d ec	 mov	 cx, WORD PTR _node$[ebp]
  002fa	66 89 4c 90 02	 mov	 WORD PTR [eax+edx*4+2], cx

; 680  : #ifdef DUMP_BL_TREE
; 681  :         if (tree == s->bl_tree) {
; 682  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 683  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 684  :         }
; 685  : #endif
; 686  :         /* and insert the new node in the heap */
; 687  :         s->heap[SMALLEST] = node++;

  002ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00302	8b 45 ec	 mov	 eax, DWORD PTR _node$[ebp]
  00305	89 82 60 0b 00
	00		 mov	 DWORD PTR [edx+2912], eax
  0030b	8b 4d ec	 mov	 ecx, DWORD PTR _node$[ebp]
  0030e	83 c1 01	 add	 ecx, 1
  00311	89 4d ec	 mov	 DWORD PTR _node$[ebp], ecx

; 688  :         pqdownheap(s, tree, SMALLEST);

  00314	6a 01		 push	 1
  00316	8b 55 f4	 mov	 edx, DWORD PTR _tree$[ebp]
  00319	52		 push	 edx
  0031a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 _pqdownheap
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH

; 689  : 
; 690  :     } while (s->heap_len >= 2);

  00326	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00329	83 b9 50 14 00
	00 02		 cmp	 DWORD PTR [ecx+5200], 2
  00330	0f 8d 88 fe ff
	ff		 jge	 $LN3@build_tree

; 691  : 
; 692  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  00336	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00339	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0033f	83 e8 01	 sub	 eax, 1
  00342	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00345	89 81 54 14 00
	00		 mov	 DWORD PTR [ecx+5204], eax
  0034b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0034e	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00354	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00357	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0035a	8b 92 60 0b 00
	00		 mov	 edx, DWORD PTR [edx+2912]
  00360	89 94 81 5c 0b
	00 00		 mov	 DWORD PTR [ecx+eax*4+2908], edx

; 693  : 
; 694  :     /* At this point, the fields freq and dad are set. We can now
; 695  :      * generate the bit lengths.
; 696  :      */
; 697  :     gen_bitlen(s, (tree_desc *)desc);

  00367	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  0036a	50		 push	 eax
  0036b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 _gen_bitlen
  00374	83 c4 08	 add	 esp, 8

; 698  : 
; 699  :     /* The field len is now set, we can generate the bit codes */
; 700  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00377	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037a	81 c2 3c 0b 00
	00		 add	 edx, 2876		; 00000b3cH
  00380	52		 push	 edx
  00381	8b 45 f0	 mov	 eax, DWORD PTR _max_code$[ebp]
  00384	50		 push	 eax
  00385	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00388	51		 push	 ecx
  00389	e8 00 00 00 00	 call	 _gen_codes
  0038e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  : }

  00391	8b e5		 mov	 esp, ebp
  00393	5d		 pop	 ebp
  00394	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
PUBLIC	__tr_init
; Function compile flags: /Odtp
;	COMDAT __tr_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_init PROC						; COMDAT

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  :     tr_static_init();

  00003	e8 00 00 00 00	 call	 _tr_static_init

; 386  : 
; 387  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00008	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000b	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00013	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 388  :     s->l_desc.stat_desc = &static_l_desc;

  00019	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001c	c7 82 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2848], OFFSET _static_l_desc

; 389  : 
; 390  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00026	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00029	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 391  :     s->d_desc.stat_desc = &static_d_desc;

  00037	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003a	c7 82 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2860], OFFSET _static_d_desc

; 392  : 
; 393  :     s->bl_desc.dyn_tree = s->bl_tree;

  00044	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00047	05 7c 0a 00 00	 add	 eax, 2684		; 00000a7cH
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004f	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 394  :     s->bl_desc.stat_desc = &static_bl_desc;

  00055	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00058	c7 82 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2872], OFFSET _static_bl_desc

; 395  : 
; 396  :     s->bi_buf = 0;

  00062	33 c0		 xor	 eax, eax
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00067	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 397  :     s->bi_valid = 0;

  0006e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00071	c7 82 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5820], 0

; 398  :     s->last_eob_len = 8; /* enough lookahead for inflate */

  0007b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007e	c7 80 b4 16 00
	00 08 00 00 00	 mov	 DWORD PTR [eax+5812], 8

; 399  : #ifdef DEBUG
; 400  :     s->compressed_len = 0L;
; 401  :     s->bits_sent = 0L;
; 402  : #endif
; 403  : 
; 404  :     /* Initialize the first block of the first file: */
; 405  :     init_block(s);

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _init_block
  00091	83 c4 04	 add	 esp, 4

; 406  : }

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
__tr_init ENDP
; Function compile flags: /Odtp
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_max_blindex$ = -4					; size = 4
_s$ = 8							; size = 4
_build_bl_tree PROC					; COMDAT

; 805  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 806  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 807  : 
; 808  :     /* Determine the bit length frequencies for literal and distance trees */
; 809  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00004	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00007	8b 88 1c 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2844]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00011	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00017	52		 push	 edx
  00018	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _scan_tree
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 810  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00024	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00027	8b 91 28 0b 00
	00		 mov	 edx, DWORD PTR [ecx+2856]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00031	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _scan_tree
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 
; 812  :     /* Build the bit length tree: */
; 813  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00043	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00046	81 c2 30 0b 00
	00		 add	 edx, 2864		; 00000b30H
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _build_tree
  00056	83 c4 08	 add	 esp, 8

; 814  :     /* opt_len now includes the length of the tree representations, except
; 815  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 816  :      */
; 817  : 
; 818  :     /* Determine the number of bit length codes to send. The pkzip format
; 819  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 820  :      * 3 but the actual value used is 4.)
; 821  :      */
; 822  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00059	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR _max_blindex$[ebp], 18 ; 00000012H
  00060	eb 09		 jmp	 SHORT $LN4@build_bl_t
$LN3@build_bl_t:
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _max_blindex$[ebp]
  00065	83 e9 01	 sub	 ecx, 1
  00068	89 4d fc	 mov	 DWORD PTR _max_blindex$[ebp], ecx
$LN4@build_bl_t:
  0006b	83 7d fc 03	 cmp	 DWORD PTR _max_blindex$[ebp], 3
  0006f	7c 1d		 jl	 SHORT $LN2@build_bl_t

; 823  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00071	8b 55 fc	 mov	 edx, DWORD PTR _max_blindex$[ebp]
  00074	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[edx]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007e	0f b7 94 81 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2686]
  00086	85 d2		 test	 edx, edx
  00088	74 02		 je	 SHORT $LN1@build_bl_t
  0008a	eb 02		 jmp	 SHORT $LN2@build_bl_t
$LN1@build_bl_t:

; 824  :     }

  0008c	eb d4		 jmp	 SHORT $LN3@build_bl_t
$LN2@build_bl_t:

; 825  :     /* Update opt_len to include the bit length tree and counts */
; 826  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$[ebp]
  00091	83 c0 01	 add	 eax, 1
  00094	6b c0 03	 imul	 eax, 3
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009a	8b 91 a8 16 00
	00		 mov	 edx, DWORD PTR [ecx+5800]
  000a0	8d 44 10 0e	 lea	 eax, DWORD PTR [eax+edx+14]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a7	89 81 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], eax

; 827  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 828  :             s->opt_len, s->static_len));
; 829  : 
; 830  :     return max_blindex;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$[ebp]

; 831  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_build_bl_tree ENDP
PUBLIC	__tr_flush_block
; Function compile flags: /Odtp
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_val$78105 = -28					; size = 4
_len$78101 = -24					; size = 4
_val$78090 = -20					; size = 4
_len$78086 = -16					; size = 4
_opt_lenb$ = -12					; size = 4
_max_blindex$ = -8					; size = 4
_static_lenb$ = -4					; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_eof$ = 20						; size = 4
__tr_flush_block PROC					; COMDAT

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 927  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 928  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _max_blindex$[ebp], 0

; 929  : 
; 930  :     /* Build the Huffman trees unless a stored block is forced */
; 931  :     if (s->level > 0) {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00017	0f 8e 8b 00 00
	00		 jle	 $LN14@tr_flush_b

; 932  : 
; 933  :         /* Check if the file is binary or text */
; 934  :         if (stored_len > 0 && s->strm->data_type == Z_UNKNOWN)

  0001d	83 7d 10 00	 cmp	 DWORD PTR _stored_len$[ebp], 0
  00021	76 17		 jbe	 SHORT $LN13@tr_flush_b
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	83 7a 2c 02	 cmp	 DWORD PTR [edx+44], 2
  0002c	75 0c		 jne	 SHORT $LN13@tr_flush_b

; 935  :             set_data_type(s);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _set_data_type
  00037	83 c4 04	 add	 esp, 4
$LN13@tr_flush_b:

; 936  : 
; 937  :         /* Construct the literal and distance trees */
; 938  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003d	81 c1 18 0b 00
	00		 add	 ecx, 2840		; 00000b18H
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _build_tree
  0004d	83 c4 08	 add	 esp, 8

; 939  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 940  :                 s->static_len));
; 941  : 
; 942  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00050	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00053	05 24 0b 00 00	 add	 eax, 2852		; 00000b24H
  00058	50		 push	 eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 _build_tree
  00062	83 c4 08	 add	 esp, 8

; 943  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  :         /* At this point, opt_len and static_len are the total bit lengths of
; 946  :          * the compressed block data, excluding the tree representations.
; 947  :          */
; 948  : 
; 949  :         /* Build the bit length tree for the above two trees, and get the index
; 950  :          * in bl_order of the last bit length code to send.
; 951  :          */
; 952  :         max_blindex = build_bl_tree(s);

  00065	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _build_bl_tree
  0006e	83 c4 04	 add	 esp, 4
  00071	89 45 f8	 mov	 DWORD PTR _max_blindex$[ebp], eax

; 953  : 
; 954  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 955  :         opt_lenb = (s->opt_len+3+7)>>3;

  00074	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00077	8b 88 a8 16 00
	00		 mov	 ecx, DWORD PTR [eax+5800]
  0007d	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00080	c1 e9 03	 shr	 ecx, 3
  00083	89 4d f4	 mov	 DWORD PTR _opt_lenb$[ebp], ecx

; 956  :         static_lenb = (s->static_len+3+7)>>3;

  00086	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00089	8b 82 ac 16 00
	00		 mov	 eax, DWORD PTR [edx+5804]
  0008f	83 c0 0a	 add	 eax, 10			; 0000000aH
  00092	c1 e8 03	 shr	 eax, 3
  00095	89 45 fc	 mov	 DWORD PTR _static_lenb$[ebp], eax

; 957  : 
; 958  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 959  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 960  :                 s->last_lit));
; 961  : 
; 962  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  00098	8b 4d fc	 mov	 ecx, DWORD PTR _static_lenb$[ebp]
  0009b	3b 4d f4	 cmp	 ecx, DWORD PTR _opt_lenb$[ebp]
  0009e	77 06		 ja	 SHORT $LN12@tr_flush_b
  000a0	8b 55 fc	 mov	 edx, DWORD PTR _static_lenb$[ebp]
  000a3	89 55 f4	 mov	 DWORD PTR _opt_lenb$[ebp], edx
$LN12@tr_flush_b:

; 963  : 
; 964  :     } else {

  000a6	eb 0f		 jmp	 SHORT $LN11@tr_flush_b
$LN14@tr_flush_b:

; 965  :         Assert(buf != (char*)0, "lost buf");
; 966  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000a8	8b 45 10	 mov	 eax, DWORD PTR _stored_len$[ebp]
  000ab	83 c0 05	 add	 eax, 5
  000ae	89 45 fc	 mov	 DWORD PTR _static_lenb$[ebp], eax
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _static_lenb$[ebp]
  000b4	89 4d f4	 mov	 DWORD PTR _opt_lenb$[ebp], ecx
$LN11@tr_flush_b:

; 967  :     }
; 968  : 
; 969  : #ifdef FORCE_STORED
; 970  :     if (buf != (char*)0) { /* force stored block */
; 971  : #else
; 972  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  000b7	8b 55 10	 mov	 edx, DWORD PTR _stored_len$[ebp]
  000ba	83 c2 04	 add	 edx, 4
  000bd	3b 55 f4	 cmp	 edx, DWORD PTR _opt_lenb$[ebp]
  000c0	77 23		 ja	 SHORT $LN10@tr_flush_b
  000c2	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000c6	74 1d		 je	 SHORT $LN10@tr_flush_b

; 973  :                        /* 4: two words for the lengths */
; 974  : #endif
; 975  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 976  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 977  :          * the last block flush, because compression would have been
; 978  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 979  :          * transform a block into a stored block.
; 980  :          */
; 981  :         _tr_stored_block(s, buf, stored_len, eof);

  000c8	8b 45 14	 mov	 eax, DWORD PTR _eof$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000d3	52		 push	 edx
  000d4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 __tr_stored_block
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
  000e0	e9 b5 02 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 982  : 
; 983  : #ifdef FORCE_STATIC
; 984  :     } else if (static_lenb >= 0) { /* force static trees */
; 985  : #else
; 986  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e8	83 b9 88 00 00
	00 04		 cmp	 DWORD PTR [ecx+136], 4
  000ef	74 0c		 je	 SHORT $LN7@tr_flush_b
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _static_lenb$[ebp]
  000f4	3b 55 f4	 cmp	 edx, DWORD PTR _opt_lenb$[ebp]
  000f7	0f 85 36 01 00
	00		 jne	 $LN8@tr_flush_b
$LN7@tr_flush_b:

; 987  : #endif
; 988  :         send_bits(s, (STATIC_TREES<<1)+eof, 3);

  000fd	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _len$78086[ebp], 3
  00104	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00109	2b 45 f0	 sub	 eax, DWORD PTR _len$78086[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010f	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00115	0f 8e c1 00 00
	00		 jle	 $LN6@tr_flush_b
  0011b	8b 55 14	 mov	 edx, DWORD PTR _eof$[ebp]
  0011e	83 c2 02	 add	 edx, 2
  00121	89 55 ec	 mov	 DWORD PTR _val$78090[ebp], edx
  00124	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00127	8b 55 ec	 mov	 edx, DWORD PTR _val$78090[ebp]
  0012a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00130	d3 e2		 shl	 edx, cl
  00132	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00135	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0013c	0b ca		 or	 ecx, edx
  0013e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00141	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00148	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014b	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00152	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00158	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0015b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0015e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00161	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00164	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00167	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0016d	83 c1 01	 add	 ecx, 1
  00170	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00173	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00176	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00179	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00180	c1 f9 08	 sar	 ecx, 8
  00183	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00186	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00189	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0018c	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0018f	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00192	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00195	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00198	83 c1 01	 add	 ecx, 1
  0019b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0019e	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  001a1	0f b7 45 ec	 movzx	 eax, WORD PTR _val$78090[ebp]
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001ad	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  001b3	8b ca		 mov	 ecx, edx
  001b5	d3 f8		 sar	 eax, cl
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ba	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  001c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c4	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001ca	8b 4d f0	 mov	 ecx, DWORD PTR _len$78086[ebp]
  001cd	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d4	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  001da	eb 3c		 jmp	 SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
  001dc	8b 55 14	 mov	 edx, DWORD PTR _eof$[ebp]
  001df	83 c2 02	 add	 edx, 2
  001e2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e5	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001eb	d3 e2		 shl	 edx, cl
  001ed	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f0	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  001f7	0b c2		 or	 eax, edx
  001f9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001fc	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00203	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00206	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0020c	03 45 f0	 add	 eax, DWORD PTR _len$78086[ebp]
  0020f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00212	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN5@tr_flush_b:

; 989  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  00218	68 00 00 00 00	 push	 OFFSET _static_dtree
  0021d	68 00 00 00 00	 push	 OFFSET _static_ltree
  00222	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00225	52		 push	 edx
  00226	e8 00 00 00 00	 call	 _compress_block
  0022b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 990  : #ifdef DEBUG
; 991  :         s->compressed_len += 3 + s->static_len;
; 992  : #endif
; 993  :     } else {

  0022e	e9 67 01 00 00	 jmp	 $LN9@tr_flush_b
$LN8@tr_flush_b:

; 994  :         send_bits(s, (DYN_TREES<<1)+eof, 3);

  00233	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _len$78101[ebp], 3
  0023a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0023f	2b 45 e8	 sub	 eax, DWORD PTR _len$78101[ebp]
  00242	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00245	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0024b	0f 8e c1 00 00
	00		 jle	 $LN3@tr_flush_b
  00251	8b 55 14	 mov	 edx, DWORD PTR _eof$[ebp]
  00254	83 c2 04	 add	 edx, 4
  00257	89 55 e4	 mov	 DWORD PTR _val$78105[ebp], edx
  0025a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025d	8b 55 e4	 mov	 edx, DWORD PTR _val$78105[ebp]
  00260	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00266	d3 e2		 shl	 edx, cl
  00268	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0026b	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00272	0b ca		 or	 ecx, edx
  00274	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00277	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0027e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00281	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00288	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0028e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00291	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00294	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00297	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0029a	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0029d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a3	83 c1 01	 add	 ecx, 1
  002a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002a9	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  002ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002af	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  002b6	c1 f9 08	 sar	 ecx, 8
  002b9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002bc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c2	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  002c5	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  002c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002ce	83 c1 01	 add	 ecx, 1
  002d1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d4	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  002d7	0f b7 45 e4	 movzx	 eax, WORD PTR _val$78105[ebp]
  002db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002de	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002e3	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  002e9	8b ca		 mov	 ecx, edx
  002eb	d3 f8		 sar	 eax, cl
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f0	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  002f7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002fa	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00300	8b 4d e8	 mov	 ecx, DWORD PTR _len$78101[ebp]
  00303	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00307	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030a	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00310	eb 3c		 jmp	 SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
  00312	8b 55 14	 mov	 edx, DWORD PTR _eof$[ebp]
  00315	83 c2 04	 add	 edx, 4
  00318	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031b	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00321	d3 e2		 shl	 edx, cl
  00323	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00326	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0032d	0b c2		 or	 eax, edx
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00332	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00339	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0033c	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00342	03 45 e8	 add	 eax, DWORD PTR _len$78101[ebp]
  00345	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00348	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN2@tr_flush_b:

; 995  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 996  :                        max_blindex+1);

  0034e	8b 55 f8	 mov	 edx, DWORD PTR _max_blindex$[ebp]
  00351	83 c2 01	 add	 edx, 1
  00354	52		 push	 edx
  00355	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00358	8b 88 28 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2856]
  0035e	83 c1 01	 add	 ecx, 1
  00361	51		 push	 ecx
  00362	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00365	8b 82 1c 0b 00
	00		 mov	 eax, DWORD PTR [edx+2844]
  0036b	83 c0 01	 add	 eax, 1
  0036e	50		 push	 eax
  0036f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00372	51		 push	 ecx
  00373	e8 00 00 00 00	 call	 _send_all_trees
  00378	83 c4 10	 add	 esp, 16			; 00000010H

; 997  :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  0037b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037e	81 c2 88 09 00
	00		 add	 edx, 2440		; 00000988H
  00384	52		 push	 edx
  00385	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00388	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0038d	50		 push	 eax
  0038e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00391	51		 push	 ecx
  00392	e8 00 00 00 00	 call	 _compress_block
  00397	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@tr_flush_b:

; 998  : #ifdef DEBUG
; 999  :         s->compressed_len += 3 + s->opt_len;
; 1000 : #endif
; 1001 :     }
; 1002 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1003 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1004 :      * and uLong implemented on 32 bits.
; 1005 :      */
; 1006 :     init_block(s);

  0039a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0039d	52		 push	 edx
  0039e	e8 00 00 00 00	 call	 _init_block
  003a3	83 c4 04	 add	 esp, 4

; 1007 : 
; 1008 :     if (eof) {

  003a6	83 7d 14 00	 cmp	 DWORD PTR _eof$[ebp], 0
  003aa	74 0c		 je	 SHORT $LN15@tr_flush_b

; 1009 :         bi_windup(s);

  003ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003af	50		 push	 eax
  003b0	e8 00 00 00 00	 call	 _bi_windup
  003b5	83 c4 04	 add	 esp, 4
$LN15@tr_flush_b:

; 1010 : #ifdef DEBUG
; 1011 :         s->compressed_len += 7;  /* align on byte boundary */
; 1012 : #endif
; 1013 :     }
; 1014 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1015 :            s->compressed_len-7*eof));
; 1016 : }

  003b8	8b e5		 mov	 esp, ebp
  003ba	5d		 pop	 ebp
  003bb	c3		 ret	 0
__tr_flush_block ENDP
END
