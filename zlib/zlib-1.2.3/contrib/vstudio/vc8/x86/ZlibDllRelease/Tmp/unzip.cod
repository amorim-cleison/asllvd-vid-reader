; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_unz_copyright
EXTRN	_strcmp:PROC
	ORG $+1
_unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:'
	DB	'//www.winimage.com/zLibDll', 00H
PUBLIC	_unzGetGlobalComment@12
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
;	COMDAT _unzGetGlobalComment@12
_TEXT	SEGMENT
_err$ = -12						; size = 4
_uReadThis$ = -8					; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_szComment$ = 12					; size = 4
_uSizeBuf$ = 16						; size = 4
_unzGetGlobalComment@12 PROC				; COMDAT

; 1536 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1537 :     int err=UNZ_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1538 :     unz_s* s;
; 1539 :     uLong uReadThis ;
; 1540 :     if (file==NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 0a		 jne	 SHORT $LN6@unzGetGlob

; 1541 :         return UNZ_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	e9 a6 00 00 00	 jmp	 $LN7@unzGetGlob
$LN6@unzGetGlob:

; 1542 :     s=(unz_s*)file;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1543 : 
; 1544 :     uReadThis = uSizeBuf;

  00023	8b 4d 10	 mov	 ecx, DWORD PTR _uSizeBuf$[ebp]
  00026	89 4d f8	 mov	 DWORD PTR _uReadThis$[ebp], ecx

; 1545 :     if (uReadThis>s->gi.size_comment)

  00029	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
  0002f	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  00032	76 09		 jbe	 SHORT $LN5@unzGetGlob

; 1546 :         uReadThis = s->gi.size_comment;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00037	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0003a	89 55 f8	 mov	 DWORD PTR _uReadThis$[ebp], edx
$LN5@unzGetGlob:

; 1547 : 
; 1548 :     if (ZSEEK(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0003d	6a 00		 push	 0
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00042	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00045	83 c1 16	 add	 ecx, 22			; 00000016H
  00048	51		 push	 ecx
  00049	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0004c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00053	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00056	52		 push	 edx
  00057	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0005a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005d	ff d1		 call	 ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	85 c0		 test	 eax, eax
  00064	74 05		 je	 SHORT $LN4@unzGetGlob

; 1549 :         return UNZ_ERRNO;

  00066	83 c8 ff	 or	 eax, -1
  00069	eb 58		 jmp	 SHORT $LN7@unzGetGlob
$LN4@unzGetGlob:

; 1550 : 
; 1551 :     if (uReadThis>0)

  0006b	83 7d f8 00	 cmp	 DWORD PTR _uReadThis$[ebp], 0
  0006f	76 31		 jbe	 SHORT $LN3@unzGetGlob

; 1552 :     {
; 1553 :       *szComment='\0';

  00071	8b 55 0c	 mov	 edx, DWORD PTR _szComment$[ebp]
  00074	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1554 :       if (ZREAD(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  00077	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _szComment$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00082	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00085	50		 push	 eax
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00089	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0008c	52		 push	 edx
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00090	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00093	ff d1		 call	 ecx
  00095	83 c4 10	 add	 esp, 16			; 00000010H
  00098	3b 45 f8	 cmp	 eax, DWORD PTR _uReadThis$[ebp]
  0009b	74 05		 je	 SHORT $LN3@unzGetGlob

; 1555 :         return UNZ_ERRNO;

  0009d	83 c8 ff	 or	 eax, -1
  000a0	eb 21		 jmp	 SHORT $LN7@unzGetGlob
$LN3@unzGetGlob:

; 1556 :     }
; 1557 : 
; 1558 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  000a2	83 7d 0c 00	 cmp	 DWORD PTR _szComment$[ebp], 0
  000a6	74 18		 je	 SHORT $LN1@unzGetGlob
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000ab	8b 45 10	 mov	 eax, DWORD PTR _uSizeBuf$[ebp]
  000ae	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  000b1	76 0d		 jbe	 SHORT $LN1@unzGetGlob

; 1559 :         *(szComment+s->gi.size_comment)='\0';

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000b6	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000b9	8b 45 0c	 mov	 eax, DWORD PTR _szComment$[ebp]
  000bc	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
$LN1@unzGetGlob:

; 1560 :     return (int)uReadThis;

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _uReadThis$[ebp]
$LN7@unzGetGlob:

; 1561 : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 0c 00	 ret	 12			; 0000000cH
_unzGetGlobalComment@12 ENDP
_TEXT	ENDS
PUBLIC	_unzGetLocalExtrafield@12
; Function compile flags: /Odtp
;	COMDAT _unzGetLocalExtrafield@12
_TEXT	SEGMENT
_read_now$ = -16					; size = 4
_pfile_in_zip_read_info$ = -12				; size = 4
_s$ = -8						; size = 4
_size_to_read$ = -4					; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzGetLocalExtrafield@12 PROC				; COMDAT

; 1442 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1443 :     unz_s* s;
; 1444 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1445 :     uInt read_now;
; 1446 :     uLong size_to_read;
; 1447 : 
; 1448 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN8@unzGetLoca

; 1449 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	e9 c4 00 00 00	 jmp	 $LN9@unzGetLoca
$LN8@unzGetLoca:

; 1450 :     s=(unz_s*)file;

  00016	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00019	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 1451 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0001f	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00025	89 55 f4	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1452 : 
; 1453 :     if (pfile_in_zip_read_info==NULL)

  00028	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0002c	75 0a		 jne	 SHORT $LN7@unzGetLoca

; 1454 :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 a2 00 00 00	 jmp	 $LN9@unzGetLoca
$LN7@unzGetLoca:

; 1455 : 
; 1456 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -
; 1457 :                 pfile_in_zip_read_info->pos_local_extrafield);

  00038	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0003e	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00041	2b 51 4c	 sub	 edx, DWORD PTR [ecx+76]
  00044	89 55 fc	 mov	 DWORD PTR _size_to_read$[ebp], edx

; 1458 : 
; 1459 :     if (buf==NULL)

  00047	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0004b	75 08		 jne	 SHORT $LN6@unzGetLoca

; 1460 :         return (int)size_to_read;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _size_to_read$[ebp]
  00050	e9 85 00 00 00	 jmp	 $LN9@unzGetLoca
$LN6@unzGetLoca:

; 1461 : 
; 1462 :     if (len>size_to_read)

  00055	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00058	3b 45 fc	 cmp	 eax, DWORD PTR _size_to_read$[ebp]
  0005b	76 08		 jbe	 SHORT $LN5@unzGetLoca

; 1463 :         read_now = (uInt)size_to_read;

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _size_to_read$[ebp]
  00060	89 4d f0	 mov	 DWORD PTR _read_now$[ebp], ecx

; 1464 :     else

  00063	eb 06		 jmp	 SHORT $LN4@unzGetLoca
$LN5@unzGetLoca:

; 1465 :         read_now = (uInt)len ;

  00065	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00068	89 55 f0	 mov	 DWORD PTR _read_now$[ebp], edx
$LN4@unzGetLoca:

; 1466 : 
; 1467 :     if (read_now==0)

  0006b	83 7d f0 00	 cmp	 DWORD PTR _read_now$[ebp], 0
  0006f	75 04		 jne	 SHORT $LN3@unzGetLoca

; 1468 :         return 0;

  00071	33 c0		 xor	 eax, eax
  00073	eb 65		 jmp	 SHORT $LN9@unzGetLoca
$LN3@unzGetLoca:

; 1469 : 
; 1470 :     if (ZSEEK(pfile_in_zip_read_info->z_filefunc,
; 1471 :               pfile_in_zip_read_info->filestream,
; 1472 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1473 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1474 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00075	6a 00		 push	 0
  00077	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0007a	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00080	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  00083	51		 push	 ecx
  00084	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00087	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0008d	51		 push	 ecx
  0008e	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00091	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00094	50		 push	 eax
  00095	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00098	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0009b	ff d2		 call	 edx
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	85 c0		 test	 eax, eax
  000a2	74 05		 je	 SHORT $LN2@unzGetLoca

; 1475 :         return UNZ_ERRNO;

  000a4	83 c8 ff	 or	 eax, -1
  000a7	eb 31		 jmp	 SHORT $LN9@unzGetLoca
$LN2@unzGetLoca:

; 1476 : 
; 1477 :     if (ZREAD(pfile_in_zip_read_info->z_filefunc,
; 1478 :               pfile_in_zip_read_info->filestream,
; 1479 :               buf,read_now)!=read_now)

  000a9	8b 45 f0	 mov	 eax, DWORD PTR _read_now$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b4	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000be	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  000c1	52		 push	 edx
  000c2	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c5	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  000c8	ff d1		 call	 ecx
  000ca	83 c4 10	 add	 esp, 16			; 00000010H
  000cd	3b 45 f0	 cmp	 eax, DWORD PTR _read_now$[ebp]
  000d0	74 05		 je	 SHORT $LN1@unzGetLoca

; 1480 :         return UNZ_ERRNO;

  000d2	83 c8 ff	 or	 eax, -1
  000d5	eb 03		 jmp	 SHORT $LN9@unzGetLoca
$LN1@unzGetLoca:

; 1481 : 
; 1482 :     return (int)read_now;

  000d7	8b 45 f0	 mov	 eax, DWORD PTR _read_now$[ebp]
$LN9@unzGetLoca:

; 1483 : }

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
_unzGetLocalExtrafield@12 ENDP
_TEXT	ENDS
PUBLIC	_unzeof@4
; Function compile flags: /Odtp
;	COMDAT _unzeof@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzeof@4 PROC						; COMDAT

; 1407 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1408 :     unz_s* s;
; 1409 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1410 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 07		 jne	 SHORT $LN4@unzeof

; 1411 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	eb 33		 jmp	 SHORT $LN5@unzeof
$LN4@unzeof:

; 1412 :     s=(unz_s*)file;

  00013	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1413 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00022	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1414 : 
; 1415 :     if (pfile_in_zip_read_info==NULL)

  00025	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00029	75 07		 jne	 SHORT $LN3@unzeof

; 1416 :         return UNZ_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00030	eb 14		 jmp	 SHORT $LN5@unzeof
$LN3@unzeof:

; 1417 : 
; 1418 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00032	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00035	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00039	75 09		 jne	 SHORT $LN2@unzeof

; 1419 :         return 1;

  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	eb 04		 jmp	 SHORT $LN5@unzeof

; 1420 :     else

  00042	eb 02		 jmp	 SHORT $LN5@unzeof
$LN2@unzeof:

; 1421 :         return 0;

  00044	33 c0		 xor	 eax, eax
$LN5@unzeof:

; 1422 : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
_unzeof@4 ENDP
_TEXT	ENDS
PUBLIC	_unztell@4
; Function compile flags: /Odtp
;	COMDAT _unztell@4
_TEXT	SEGMENT
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unztell@4 PROC						; COMDAT

; 1387 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1388 :     unz_s* s;
; 1389 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1390 :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 07		 jne	 SHORT $LN2@unztell

; 1391 :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	eb 25		 jmp	 SHORT $LN3@unztell
$LN2@unztell:

; 1392 :     s=(unz_s*)file;

  00013	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00016	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1393 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001c	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00022	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1394 : 
; 1395 :     if (pfile_in_zip_read_info==NULL)

  00025	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00029	75 07		 jne	 SHORT $LN1@unztell

; 1396 :         return UNZ_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00030	eb 06		 jmp	 SHORT $LN3@unztell
$LN1@unztell:

; 1397 : 
; 1398 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
$LN3@unztell:

; 1399 : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
_unztell@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGetFilePos@8
; Function compile flags: /Odtp
;	COMDAT _unzGetFilePos@8
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGetFilePos@8 PROC					; COMDAT

; 906  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 907  :     unz_s* s;
; 908  : 
; 909  :     if (file==NULL || file_pos==NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00008	74 06		 je	 SHORT $LN2@unzGetFile
  0000a	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  0000e	75 07		 jne	 SHORT $LN3@unzGetFile
$LN2@unzGetFile:

; 910  :         return UNZ_PARAMERROR;

  00010	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00015	eb 2f		 jmp	 SHORT $LN4@unzGetFile
$LN3@unzGetFile:

; 911  :     s=(unz_s*)file;

  00017	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 912  :     if (!s->current_file_ok)

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00020	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00024	75 07		 jne	 SHORT $LN1@unzGetFile

; 913  :         return UNZ_END_OF_LIST_OF_FILE;

  00026	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0002b	eb 19		 jmp	 SHORT $LN4@unzGetFile
$LN1@unzGetFile:

; 914  : 
; 915  :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00030	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00036	89 0a		 mov	 DWORD PTR [edx], ecx

; 916  :     file_pos->num_of_file           = s->num_file;

  00038	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0003e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00041	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 917  : 
; 918  :     return UNZ_OK;

  00044	33 c0		 xor	 eax, eax
$LN4@unzGetFile:

; 919  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
_unzGetFilePos@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_DosDateToTmuDate
_TEXT	SEGMENT
_uDate$ = -4						; size = 4
_ulDosDate$ = 8						; size = 4
_ptm$ = 12						; size = 4
_unzlocal_DosDateToTmuDate PROC				; COMDAT

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 552  :     uLong uDate;
; 553  :     uDate = (uLong)(ulDosDate>>16);

  00004	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  00007	c1 e8 10	 shr	 eax, 16			; 00000010H
  0000a	89 45 fc	 mov	 DWORD PTR _uDate$[ebp], eax

; 554  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _uDate$[ebp]
  00010	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00013	8b 55 0c	 mov	 edx, DWORD PTR _ptm$[ebp]
  00016	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 555  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _uDate$[ebp]
  0001c	25 e0 01 00 00	 and	 eax, 480		; 000001e0H
  00021	c1 e8 05	 shr	 eax, 5
  00024	83 e8 01	 sub	 eax, 1
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 556  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _uDate$[ebp]
  00030	81 e2 00 fe 00
	00		 and	 edx, 65024		; 0000fe00H
  00036	c1 ea 09	 shr	 edx, 9
  00039	81 c2 bc 07 00
	00		 add	 edx, 1980		; 000007bcH
  0003f	8b 45 0c	 mov	 eax, DWORD PTR _ptm$[ebp]
  00042	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 557  : 
; 558  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _ulDosDate$[ebp]
  00048	81 e1 00 f8 00
	00		 and	 ecx, 63488		; 0000f800H
  0004e	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00051	8b 55 0c	 mov	 edx, DWORD PTR _ptm$[ebp]
  00054	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 559  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  00057	8b 45 08	 mov	 eax, DWORD PTR _ulDosDate$[ebp]
  0005a	25 e0 07 00 00	 and	 eax, 2016		; 000007e0H
  0005f	c1 e8 05	 shr	 eax, 5
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 560  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  00068	8b 55 08	 mov	 edx, DWORD PTR _ulDosDate$[ebp]
  0006b	83 e2 1f	 and	 edx, 31			; 0000001fH
  0006e	d1 e2		 shl	 edx, 1
  00070	8b 45 0c	 mov	 eax, DWORD PTR _ptm$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx

; 561  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_unzlocal_DosDateToTmuDate ENDP
_TEXT	ENDS
PUBLIC	_unzGetGlobalInfo@8
; Function compile flags: /Odtp
;	COMDAT _unzGetGlobalInfo@8
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pglobal_info$ = 12					; size = 4
_unzGetGlobalInfo@8 PROC				; COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 536  :     unz_s* s;
; 537  :     if (file==NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00008	75 07		 jne	 SHORT $LN1@unzGetGlob@2

; 538  :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0000f	eb 19		 jmp	 SHORT $LN2@unzGetGlob@2
$LN1@unzGetGlob@2:

; 539  :     s=(unz_s*)file;

  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 540  :     *pglobal_info=s->gi;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0001d	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _pglobal_info$[ebp]
  00023	89 11		 mov	 DWORD PTR [ecx], edx
  00025	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 541  :     return UNZ_OK;

  00028	33 c0		 xor	 eax, eax
$LN2@unzGetGlob@2:

; 542  : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
_unzGetGlobalInfo@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_SearchCentralDir
_TEXT	SEGMENT
tv89 = -36						; size = 4
_uReadSize$79386 = -32					; size = 4
_uReadPos$79387 = -28					; size = 4
_i$79388 = -24						; size = 4
_buf$ = -20						; size = 4
_uMaxBack$ = -16					; size = 4
_uBackRead$ = -12					; size = 4
_uPosFound$ = -8					; size = 4
_uSizeFile$ = -4					; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_unzlocal_SearchCentralDir PROC				; COMDAT

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 335  :     unsigned char* buf;
; 336  :     uLong uSizeFile;
; 337  :     uLong uBackRead;
; 338  :     uLong uMaxBack=0xffff; /* maximum size of global comment */

  00006	c7 45 f0 ff ff
	00 00		 mov	 DWORD PTR _uMaxBack$[ebp], 65535 ; 0000ffffH

; 339  :     uLong uPosFound=0;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _uPosFound$[ebp], 0

; 340  : 
; 341  :     if (ZSEEK(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00014	6a 02		 push	 2
  00016	6a 00		 push	 0
  00018	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0001f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00022	52		 push	 edx
  00023	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00026	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00029	ff d1		 call	 ecx
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN14@unzlocal_S

; 342  :         return 0;

  00032	33 c0		 xor	 eax, eax
  00034	e9 76 01 00 00	 jmp	 $LN15@unzlocal_S
$LN14@unzlocal_S:

; 343  : 
; 344  : 
; 345  :     uSizeFile = ZTELL(*pzlib_filefunc_def,filestream);

  00039	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0003c	52		 push	 edx
  0003d	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00040	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00047	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0004a	ff d0		 call	 eax
  0004c	83 c4 08	 add	 esp, 8
  0004f	89 45 fc	 mov	 DWORD PTR _uSizeFile$[ebp], eax

; 346  : 
; 347  :     if (uMaxBack>uSizeFile)

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _uMaxBack$[ebp]
  00055	3b 4d fc	 cmp	 ecx, DWORD PTR _uSizeFile$[ebp]
  00058	76 06		 jbe	 SHORT $LN13@unzlocal_S

; 348  :         uMaxBack = uSizeFile;

  0005a	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  0005d	89 55 f0	 mov	 DWORD PTR _uMaxBack$[ebp], edx
$LN13@unzlocal_S:

; 349  : 
; 350  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00060	68 04 04 00 00	 push	 1028			; 00000404H
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 45 ec	 mov	 DWORD PTR _buf$[ebp], eax

; 351  :     if (buf==NULL)

  00071	83 7d ec 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00075	75 07		 jne	 SHORT $LN12@unzlocal_S

; 352  :         return 0;

  00077	33 c0		 xor	 eax, eax
  00079	e9 31 01 00 00	 jmp	 $LN15@unzlocal_S
$LN12@unzlocal_S:

; 353  : 
; 354  :     uBackRead = 4;

  0007e	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _uBackRead$[ebp], 4
$LN11@unzlocal_S:

; 355  :     while (uBackRead<uMaxBack)

  00085	8b 45 f4	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  00088	3b 45 f0	 cmp	 eax, DWORD PTR _uMaxBack$[ebp]
  0008b	0f 83 08 01 00
	00		 jae	 $LN10@unzlocal_S

; 356  :     {
; 357  :         uLong uReadSize,uReadPos ;
; 358  :         int i;
; 359  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00091	8b 4d f4	 mov	 ecx, DWORD PTR _uBackRead$[ebp]
  00094	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  0009a	3b 4d f0	 cmp	 ecx, DWORD PTR _uMaxBack$[ebp]
  0009d	76 08		 jbe	 SHORT $LN9@unzlocal_S

; 360  :             uBackRead = uMaxBack;

  0009f	8b 55 f0	 mov	 edx, DWORD PTR _uMaxBack$[ebp]
  000a2	89 55 f4	 mov	 DWORD PTR _uBackRead$[ebp], edx

; 361  :         else

  000a5	eb 0b		 jmp	 SHORT $LN8@unzlocal_S
$LN9@unzlocal_S:

; 362  :             uBackRead+=BUFREADCOMMENT;

  000a7	8b 45 f4	 mov	 eax, DWORD PTR _uBackRead$[ebp]
  000aa	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000af	89 45 f4	 mov	 DWORD PTR _uBackRead$[ebp], eax
$LN8@unzlocal_S:

; 363  :         uReadPos = uSizeFile-uBackRead ;

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _uSizeFile$[ebp]
  000b5	2b 4d f4	 sub	 ecx, DWORD PTR _uBackRead$[ebp]
  000b8	89 4d e4	 mov	 DWORD PTR _uReadPos$79387[ebp], ecx

; 364  : 
; 365  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 366  :                      (BUFREADCOMMENT+4) : (uSizeFile-uReadPos);

  000bb	8b 55 fc	 mov	 edx, DWORD PTR _uSizeFile$[ebp]
  000be	2b 55 e4	 sub	 edx, DWORD PTR _uReadPos$79387[ebp]
  000c1	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  000c7	76 09		 jbe	 SHORT $LN17@unzlocal_S
  000c9	c7 45 dc 04 04
	00 00		 mov	 DWORD PTR tv89[ebp], 1028 ; 00000404H
  000d0	eb 09		 jmp	 SHORT $LN18@unzlocal_S
$LN17@unzlocal_S:
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _uSizeFile$[ebp]
  000d5	2b 45 e4	 sub	 eax, DWORD PTR _uReadPos$79387[ebp]
  000d8	89 45 dc	 mov	 DWORD PTR tv89[ebp], eax
$LN18@unzlocal_S:
  000db	8b 4d dc	 mov	 ecx, DWORD PTR tv89[ebp]
  000de	89 4d e0	 mov	 DWORD PTR _uReadSize$79386[ebp], ecx

; 367  :         if (ZSEEK(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000e1	6a 00		 push	 0
  000e3	8b 55 e4	 mov	 edx, DWORD PTR _uReadPos$79387[ebp]
  000e6	52		 push	 edx
  000e7	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  000ee	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000f1	52		 push	 edx
  000f2	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  000f5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f8	ff d1		 call	 ecx
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	85 c0		 test	 eax, eax
  000ff	74 05		 je	 SHORT $LN7@unzlocal_S

; 368  :             break;

  00101	e9 93 00 00 00	 jmp	 $LN10@unzlocal_S
$LN7@unzlocal_S:

; 369  : 
; 370  :         if (ZREAD(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00106	8b 55 e0	 mov	 edx, DWORD PTR _uReadSize$79386[ebp]
  00109	52		 push	 edx
  0010a	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00111	51		 push	 ecx
  00112	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00115	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00118	50		 push	 eax
  00119	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0011c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0011f	ff d2		 call	 edx
  00121	83 c4 10	 add	 esp, 16			; 00000010H
  00124	3b 45 e0	 cmp	 eax, DWORD PTR _uReadSize$79386[ebp]
  00127	74 02		 je	 SHORT $LN6@unzlocal_S

; 371  :             break;

  00129	eb 6e		 jmp	 SHORT $LN10@unzlocal_S
$LN6@unzlocal_S:

; 372  : 
; 373  :         for (i=(int)uReadSize-3; (i--)>0;)

  0012b	8b 45 e0	 mov	 eax, DWORD PTR _uReadSize$79386[ebp]
  0012e	83 e8 03	 sub	 eax, 3
  00131	89 45 e8	 mov	 DWORD PTR _i$79388[ebp], eax
$LN5@unzlocal_S:
  00134	8b 4d e8	 mov	 ecx, DWORD PTR _i$79388[ebp]
  00137	8b 55 e8	 mov	 edx, DWORD PTR _i$79388[ebp]
  0013a	83 ea 01	 sub	 edx, 1
  0013d	89 55 e8	 mov	 DWORD PTR _i$79388[ebp], edx
  00140	85 c9		 test	 ecx, ecx
  00142	7e 48		 jle	 SHORT $LN4@unzlocal_S

; 374  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 375  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00144	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  00147	03 45 e8	 add	 eax, DWORD PTR _i$79388[ebp]
  0014a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0014d	83 f9 50	 cmp	 ecx, 80			; 00000050H
  00150	75 38		 jne	 SHORT $LN3@unzlocal_S
  00152	8b 55 ec	 mov	 edx, DWORD PTR _buf$[ebp]
  00155	03 55 e8	 add	 edx, DWORD PTR _i$79388[ebp]
  00158	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0015c	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0015f	75 29		 jne	 SHORT $LN3@unzlocal_S
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _buf$[ebp]
  00164	03 4d e8	 add	 ecx, DWORD PTR _i$79388[ebp]
  00167	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  0016b	83 fa 05	 cmp	 edx, 5
  0016e	75 1a		 jne	 SHORT $LN3@unzlocal_S
  00170	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  00173	03 45 e8	 add	 eax, DWORD PTR _i$79388[ebp]
  00176	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0017a	83 f9 06	 cmp	 ecx, 6
  0017d	75 0b		 jne	 SHORT $LN3@unzlocal_S

; 376  :             {
; 377  :                 uPosFound = uReadPos+i;

  0017f	8b 55 e4	 mov	 edx, DWORD PTR _uReadPos$79387[ebp]
  00182	03 55 e8	 add	 edx, DWORD PTR _i$79388[ebp]
  00185	89 55 f8	 mov	 DWORD PTR _uPosFound$[ebp], edx

; 378  :                 break;

  00188	eb 02		 jmp	 SHORT $LN4@unzlocal_S
$LN3@unzlocal_S:

; 379  :             }

  0018a	eb a8		 jmp	 SHORT $LN5@unzlocal_S
$LN4@unzlocal_S:

; 380  : 
; 381  :         if (uPosFound!=0)

  0018c	83 7d f8 00	 cmp	 DWORD PTR _uPosFound$[ebp], 0
  00190	74 02		 je	 SHORT $LN2@unzlocal_S

; 382  :             break;

  00192	eb 05		 jmp	 SHORT $LN10@unzlocal_S
$LN2@unzlocal_S:

; 383  :     }

  00194	e9 ec fe ff ff	 jmp	 $LN11@unzlocal_S
$LN10@unzlocal_S:

; 384  :     TRYFREE(buf);

  00199	83 7d ec 00	 cmp	 DWORD PTR _buf$[ebp], 0
  0019d	74 0d		 je	 SHORT $LN1@unzlocal_S
  0019f	8b 45 ec	 mov	 eax, DWORD PTR _buf$[ebp]
  001a2	50		 push	 eax
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001a9	83 c4 04	 add	 esp, 4
$LN1@unzlocal_S:

; 385  :     return uPosFound;

  001ac	8b 45 f8	 mov	 eax, DWORD PTR _uPosFound$[ebp]
$LN15@unzlocal_S:

; 386  : }

  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c3		 ret	 0
_unzlocal_SearchCentralDir ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _strcmpcasenosensitive_internal
_TEXT	SEGMENT
_c2$79350 = -2						; size = 1
_c1$79349 = -1						; size = 1
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_strcmpcasenosensitive_internal PROC			; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN8@strcmpcase:

; 266  :     for (;;)
; 267  :     {
; 268  :         char c1=*(fileName1++);

  00004	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	88 4d ff	 mov	 BYTE PTR _c1$79349[ebp], cl
  0000c	8b 55 08	 mov	 edx, DWORD PTR _fileName1$[ebp]
  0000f	83 c2 01	 add	 edx, 1
  00012	89 55 08	 mov	 DWORD PTR _fileName1$[ebp], edx

; 269  :         char c2=*(fileName2++);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00018	8a 08		 mov	 cl, BYTE PTR [eax]
  0001a	88 4d fe	 mov	 BYTE PTR _c2$79350[ebp], cl
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  00020	83 c2 01	 add	 edx, 1
  00023	89 55 0c	 mov	 DWORD PTR _fileName2$[ebp], edx

; 270  :         if ((c1>='a') && (c1<='z'))

  00026	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$79349[ebp]
  0002a	83 f8 61	 cmp	 eax, 97			; 00000061H
  0002d	7c 13		 jl	 SHORT $LN6@strcmpcase
  0002f	0f be 4d ff	 movsx	 ecx, BYTE PTR _c1$79349[ebp]
  00033	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00036	7f 0a		 jg	 SHORT $LN6@strcmpcase

; 271  :             c1 -= 0x20;

  00038	0f be 55 ff	 movsx	 edx, BYTE PTR _c1$79349[ebp]
  0003c	83 ea 20	 sub	 edx, 32			; 00000020H
  0003f	88 55 ff	 mov	 BYTE PTR _c1$79349[ebp], dl
$LN6@strcmpcase:

; 272  :         if ((c2>='a') && (c2<='z'))

  00042	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$79350[ebp]
  00046	83 f8 61	 cmp	 eax, 97			; 00000061H
  00049	7c 13		 jl	 SHORT $LN5@strcmpcase
  0004b	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$79350[ebp]
  0004f	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00052	7f 0a		 jg	 SHORT $LN5@strcmpcase

; 273  :             c2 -= 0x20;

  00054	0f be 55 fe	 movsx	 edx, BYTE PTR _c2$79350[ebp]
  00058	83 ea 20	 sub	 edx, 32			; 00000020H
  0005b	88 55 fe	 mov	 BYTE PTR _c2$79350[ebp], dl
$LN5@strcmpcase:

; 274  :         if (c1=='\0')

  0005e	0f be 45 ff	 movsx	 eax, BYTE PTR _c1$79349[ebp]
  00062	85 c0		 test	 eax, eax
  00064	75 0a		 jne	 SHORT $LN4@strcmpcase

; 275  :             return ((c2=='\0') ? 0 : -1);

  00066	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$79350[ebp]
  0006a	f7 d8		 neg	 eax
  0006c	1b c0		 sbb	 eax, eax
  0006e	eb 38		 jmp	 SHORT $LN9@strcmpcase
$LN4@strcmpcase:

; 276  :         if (c2=='\0')

  00070	0f be 4d fe	 movsx	 ecx, BYTE PTR _c2$79350[ebp]
  00074	85 c9		 test	 ecx, ecx
  00076	75 07		 jne	 SHORT $LN3@strcmpcase

; 277  :             return 1;

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	eb 29		 jmp	 SHORT $LN9@strcmpcase
$LN3@strcmpcase:

; 278  :         if (c1<c2)

  0007f	0f be 55 ff	 movsx	 edx, BYTE PTR _c1$79349[ebp]
  00083	0f be 45 fe	 movsx	 eax, BYTE PTR _c2$79350[ebp]
  00087	3b d0		 cmp	 edx, eax
  00089	7d 05		 jge	 SHORT $LN2@strcmpcase

; 279  :             return -1;

  0008b	83 c8 ff	 or	 eax, -1
  0008e	eb 18		 jmp	 SHORT $LN9@strcmpcase
$LN2@strcmpcase:

; 280  :         if (c1>c2)

  00090	0f be 4d ff	 movsx	 ecx, BYTE PTR _c1$79349[ebp]
  00094	0f be 55 fe	 movsx	 edx, BYTE PTR _c2$79350[ebp]
  00098	3b ca		 cmp	 ecx, edx
  0009a	7e 07		 jle	 SHORT $LN1@strcmpcase

; 281  :             return 1;

  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	eb 05		 jmp	 SHORT $LN9@strcmpcase
$LN1@strcmpcase:

; 282  :     }

  000a3	e9 5c ff ff ff	 jmp	 $LN8@strcmpcase
$LN9@strcmpcase:

; 283  : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_strcmpcasenosensitive_internal ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_getByte
_TEXT	SEGMENT
_c$ = -5						; size = 1
_err$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pi$ = 16						; size = 4
_unzlocal_getByte PROC					; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 176  :     unsigned char c;
; 177  :     int err = (int)ZREAD(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8d 45 fb	 lea	 eax, DWORD PTR _c$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00013	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	ff d2		 call	 edx
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	89 45 fc	 mov	 DWORD PTR _err$[ebp], eax

; 178  :     if (err==1)

  00025	83 7d fc 01	 cmp	 DWORD PTR _err$[ebp], 1
  00029	75 0f		 jne	 SHORT $LN4@unzlocal_g

; 179  :     {
; 180  :         *pi = (int)c;

  0002b	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _pi$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 181  :         return UNZ_OK;

  00034	33 c0		 xor	 eax, eax
  00036	eb 25		 jmp	 SHORT $LN5@unzlocal_g

; 182  :     }
; 183  :     else

  00038	eb 23		 jmp	 SHORT $LN5@unzlocal_g
$LN4@unzlocal_g:

; 184  :     {
; 185  :         if (ZERROR(*pzlib_filefunc_def,filestream))

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00048	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0004b	ff d0		 call	 eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN2@unzlocal_g

; 186  :             return UNZ_ERRNO;

  00054	83 c8 ff	 or	 eax, -1
  00057	eb 04		 jmp	 SHORT $LN5@unzlocal_g

; 187  :         else

  00059	eb 02		 jmp	 SHORT $LN5@unzlocal_g
$LN2@unzlocal_g:

; 188  :             return UNZ_EOF;

  0005b	33 c0		 xor	 eax, eax
$LN5@unzlocal_g:

; 189  :     }
; 190  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_unzlocal_getByte ENDP
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _update_keys
_TEXT	SEGMENT
_keyshift$79262 = -4					; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_c$ = 16						; size = 4
_update_keys PROC					; COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00004	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	33 4d 10	 xor	 ecx, DWORD PTR _c$[ebp]
  0000c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00012	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	c1 e8 08	 shr	 eax, 8
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0001d	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00025	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  00032	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00035	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00038	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	69 c9 05 84 08
	08		 imul	 ecx, 134775813		; 08088405H
  00047	83 c1 01	 add	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0004d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00050	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00059	89 4d fc	 mov	 DWORD PTR _keyshift$79262[ebp], ecx

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0005c	8b 55 08	 mov	 edx, DWORD PTR _pkeys$[ebp]
  0005f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00062	33 45 fc	 xor	 eax, DWORD PTR _keyshift$79262[ebp]
  00065	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0006d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00070	c1 ea 08	 shr	 edx, 8
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00076	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  00079	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  0007c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 56   :     }
; 57   :     return c;

  0007f	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]

; 58   : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_update_keys ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_temp$ = -4						; size = 4
_pkeys$ = 8						; size = 4
_pcrc_32_tab$ = 12					; size = 4
_decrypt_byte PROC					; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00007	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00010	83 c9 02	 or	 ecx, 2
  00013	89 4d fc	 mov	 DWORD PTR _temp$[ebp], ecx

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00016	8b 55 fc	 mov	 edx, DWORD PTR _temp$[ebp]
  00019	83 f2 01	 xor	 edx, 1
  0001c	8b c2		 mov	 eax, edx
  0001e	0f af 45 fc	 imul	 eax, DWORD PTR _temp$[ebp]
  00022	c1 e8 08	 shr	 eax, 8
  00025	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_decrypt_byte ENDP
PUBLIC	_unzCloseCurrentFile@4
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
;	COMDAT _unzCloseCurrentFile@4
_TEXT	SEGMENT
_err$ = -12						; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzCloseCurrentFile@4 PROC				; COMDAT

; 1491 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1492 :     int err=UNZ_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1493 : 
; 1494 :     unz_s* s;
; 1495 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1496 :     if (file==NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 0a		 jne	 SHORT $LN7@unzCloseCu

; 1497 :         return UNZ_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	e9 ae 00 00 00	 jmp	 $LN8@unzCloseCu
$LN7@unzCloseCu:

; 1498 :     s=(unz_s*)file;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1499 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00026	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  0002c	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1500 : 
; 1501 :     if (pfile_in_zip_read_info==NULL)

  0002f	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00033	75 0a		 jne	 SHORT $LN6@unzCloseCu

; 1502 :         return UNZ_PARAMERROR;

  00035	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0003a	e9 8c 00 00 00	 jmp	 $LN8@unzCloseCu
$LN6@unzCloseCu:

; 1503 : 
; 1504 : 
; 1505 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&
; 1506 :         (!pfile_in_zip_read_info->raw))

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00042	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00046	75 21		 jne	 SHORT $LN5@unzCloseCu
  00048	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004b	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  00052	75 15		 jne	 SHORT $LN5@unzCloseCu

; 1507 :     {
; 1508 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  00054	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00057	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0005a	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0005d	3b 48 54	 cmp	 ecx, DWORD PTR [eax+84]
  00060	74 07		 je	 SHORT $LN5@unzCloseCu

; 1509 :             err=UNZ_CRCERROR;

  00062	c7 45 f4 97 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -105 ; ffffff97H
$LN5@unzCloseCu:

; 1510 :     }
; 1511 : 
; 1512 : 
; 1513 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  00069	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0006c	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0006f	74 0f		 je	 SHORT $LN3@unzCloseCu
  00071	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	51		 push	 ecx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0007d	83 c4 04	 add	 esp, 4
$LN3@unzCloseCu:

; 1514 :     pfile_in_zip_read_info->read_buffer = NULL;

  00080	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00083	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1515 :     if (pfile_in_zip_read_info->stream_initialised)

  00089	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0008c	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00090	74 0c		 je	 SHORT $LN2@unzCloseCu

; 1516 :         inflateEnd(&pfile_in_zip_read_info->stream);

  00092	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00095	83 c1 04	 add	 ecx, 4
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _inflateEnd@4
$LN2@unzCloseCu:

; 1517 : 
; 1518 :     pfile_in_zip_read_info->stream_initialised = 0;

  0009e	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000a1	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 1519 :     TRYFREE(pfile_in_zip_read_info);

  000a8	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  000ac	74 0d		 je	 SHORT $LN1@unzCloseCu
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000b8	83 c4 04	 add	 esp, 4
$LN1@unzCloseCu:

; 1520 : 
; 1521 :     s->pfile_in_zip_read=NULL;

  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000be	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0

; 1522 : 
; 1523 :     return err;

  000c8	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]
$LN8@unzCloseCu:

; 1524 : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 04 00	 ret	 4
_unzCloseCurrentFile@4 ENDP
_TEXT	ENDS
PUBLIC	_unzClose@4
; Function compile flags: /Odtp
;	COMDAT _unzClose@4
_TEXT	SEGMENT
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzClose@4 PROC					; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 514  :     unz_s* s;
; 515  :     if (file==NULL)

  00004	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00008	75 07		 jne	 SHORT $LN3@unzClose

; 516  :         return UNZ_PARAMERROR;

  0000a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0000f	eb 49		 jmp	 SHORT $LN4@unzClose
$LN3@unzClose:

; 517  :     s=(unz_s*)file;

  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 518  : 
; 519  :     if (s->pfile_in_zip_read!=NULL)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001a	83 b9 9c 00 00
	00 00		 cmp	 DWORD PTR [ecx+156], 0
  00021	74 09		 je	 SHORT $LN2@unzClose

; 520  :         unzCloseCurrentFile(file);

  00023	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN2@unzClose:

; 521  : 
; 522  :     ZCLOSE(s->z_filefunc, s->filestream);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0002f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00032	51		 push	 ecx
  00033	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00036	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00040	ff d2		 call	 edx
  00042	83 c4 08	 add	 esp, 8

; 523  :     TRYFREE(s);

  00045	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00049	74 0d		 je	 SHORT $LN1@unzClose
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00055	83 c4 04	 add	 esp, 4
$LN1@unzClose:

; 524  :     return UNZ_OK;

  00058	33 c0		 xor	 eax, eax
$LN4@unzClose:

; 525  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
_unzClose@4 ENDP
_TEXT	ENDS
PUBLIC	_unzStringFileNameCompare@12
; Function compile flags: /Odtp
;	COMDAT _unzStringFileNameCompare@12
_TEXT	SEGMENT
_fileName1$ = 8						; size = 4
_fileName2$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzStringFileNameCompare@12 PROC			; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  :     if (iCaseSensitivity==0)

  00003	83 7d 10 00	 cmp	 DWORD PTR _iCaseSensitivity$[ebp], 0
  00007	75 07		 jne	 SHORT $LN2@unzStringF

; 311  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;

  00009	c7 45 10 02 00
	00 00		 mov	 DWORD PTR _iCaseSensitivity$[ebp], 2
$LN2@unzStringF:

; 312  : 
; 313  :     if (iCaseSensitivity==1)

  00010	83 7d 10 01	 cmp	 DWORD PTR _iCaseSensitivity$[ebp], 1
  00014	75 12		 jne	 SHORT $LN1@unzStringF

; 314  :         return strcmp(fileName1,fileName2);

  00016	8b 45 0c	 mov	 eax, DWORD PTR _fileName2$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _fileName1$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _strcmp
  00023	83 c4 08	 add	 esp, 8
  00026	eb 10		 jmp	 SHORT $LN3@unzStringF
$LN1@unzStringF:

; 315  : 
; 316  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  00028	8b 55 0c	 mov	 edx, DWORD PTR _fileName2$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _fileName1$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _strcmpcasenosensitive_internal
  00035	83 c4 08	 add	 esp, 8
$LN3@unzStringF:

; 317  : }

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
_unzStringFileNameCompare@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_getLong
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unzlocal_getLong PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 234  :     uLong x ;
; 235  :     int i;
; 236  :     int err;
; 237  : 
; 238  :     err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00011	52		 push	 edx
  00012	e8 00 00 00 00	 call	 _unzlocal_getByte
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 239  :     x = (uLong)i;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 240  : 
; 241  :     if (err==UNZ_OK)

  00023	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00027	75 17		 jne	 SHORT $LN5@unzlocal_g@2

; 242  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _unzlocal_getByte
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN5@unzlocal_g@2:

; 243  :     x += ((uLong)i)<<8;

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00049	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 244  : 
; 245  :     if (err==UNZ_OK)

  0004c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00050	75 17		 jne	 SHORT $LN4@unzlocal_g@2

; 246  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00052	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  00055	52		 push	 edx
  00056	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _unzlocal_getByte
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unzlocal_g@2:

; 247  :     x += ((uLong)i)<<16;

  00069	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0006c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0006f	03 55 fc	 add	 edx, DWORD PTR _x$[ebp]
  00072	89 55 fc	 mov	 DWORD PTR _x$[ebp], edx

; 248  : 
; 249  :     if (err==UNZ_OK)

  00075	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00079	75 17		 jne	 SHORT $LN3@unzlocal_g@2

; 250  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  0007b	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _unzlocal_getByte
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unzlocal_g@2:

; 251  :     x += ((uLong)i)<<24;

  00092	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00095	c1 e0 18	 shl	 eax, 24			; 00000018H
  00098	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  0009b	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 252  : 
; 253  :     if (err==UNZ_OK)

  0009e	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  000a2	75 0a		 jne	 SHORT $LN2@unzlocal_g@2

; 254  :         *pX = x;

  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  000aa	89 11		 mov	 DWORD PTR [ecx], edx

; 255  :     else

  000ac	eb 09		 jmp	 SHORT $LN1@unzlocal_g@2
$LN2@unzlocal_g@2:

; 256  :         *pX = 0;

  000ae	8b 45 10	 mov	 eax, DWORD PTR _pX$[ebp]
  000b1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@unzlocal_g@2:

; 257  :     return err;

  000b7	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 258  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_unzlocal_getLong ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_getShort
_TEXT	SEGMENT
_err$ = -12						; size = 4
_i$ = -8						; size = 4
_x$ = -4						; size = 4
_pzlib_filefunc_def$ = 8				; size = 4
_filestream$ = 12					; size = 4
_pX$ = 16						; size = 4
_unzlocal_getShort PROC					; COMDAT

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 206  :     uLong x ;
; 207  :     int i;
; 208  :     int err;
; 209  : 
; 210  :     err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00011	52		 push	 edx
  00012	e8 00 00 00 00	 call	 _unzlocal_getByte
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax

; 211  :     x = (uLong)i;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 212  : 
; 213  :     if (err==UNZ_OK)

  00023	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00027	75 17		 jne	 SHORT $LN3@unzlocal_g@3

; 214  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 4d f8	 lea	 ecx, DWORD PTR _i$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _filestream$[ebp]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _unzlocal_getByte
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	89 45 f4	 mov	 DWORD PTR _err$[ebp], eax
$LN3@unzlocal_g@3:

; 215  :     x += ((uLong)i)<<8;

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	03 4d fc	 add	 ecx, DWORD PTR _x$[ebp]
  00049	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 216  : 
; 217  :     if (err==UNZ_OK)

  0004c	83 7d f4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00050	75 0a		 jne	 SHORT $LN2@unzlocal_g@3

; 218  :         *pX = x;

  00052	8b 55 10	 mov	 edx, DWORD PTR _pX$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00058	89 02		 mov	 DWORD PTR [edx], eax

; 219  :     else

  0005a	eb 09		 jmp	 SHORT $LN1@unzlocal_g@3
$LN2@unzlocal_g@3:

; 220  :         *pX = 0;

  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _pX$[ebp]
  0005f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@unzlocal_g@3:

; 221  :     return err;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _err$[ebp]

; 222  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_unzlocal_getShort ENDP
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
_TEXT	ENDS
;	COMDAT _init_keys
_TEXT	SEGMENT
_passwd$ = 8						; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_init_keys PROC						; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     *(pkeys+0) = 305419896L;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pkeys$[ebp]
  00006	c7 00 78 56 34
	12		 mov	 DWORD PTR [eax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pkeys$[ebp]
  0000f	c7 41 04 89 67
	45 23		 mov	 DWORD PTR [ecx+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  00016	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00019	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [edx+8], 878082192 ; 34567890H
$LN2@init_keys@2:

; 70   :     while (*passwd != '\0') {

  00020	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00023	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00026	85 c9		 test	 ecx, ecx
  00028	74 22		 je	 SHORT $LN3@init_keys@2

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  0002a	8b 55 08	 mov	 edx, DWORD PTR _passwd$[ebp]
  0002d	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00030	50		 push	 eax
  00031	8b 4d 10	 mov	 ecx, DWORD PTR _pcrc_32_tab$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR _pkeys$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _update_keys
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   :         passwd++;

  00041	8b 45 08	 mov	 eax, DWORD PTR _passwd$[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 08	 mov	 DWORD PTR _passwd$[ebp], eax

; 73   :     }

  0004a	eb d4		 jmp	 SHORT $LN2@init_keys@2
$LN3@init_keys@2:

; 74   : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_init_keys ENDP
PUBLIC	_unzReadCurrentFile@12
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
;	COMDAT _unzReadCurrentFile@12
_TEXT	SEGMENT
_uTotalOutBefore$79825 = -52				; size = 4
_uTotalOutAfter$79826 = -48				; size = 4
_flush$79829 = -44					; size = 4
_uOutThis$79828 = -40					; size = 4
_bufBefore$79827 = -36					; size = 4
_uDoCopy$79816 = -32					; size = 4
_i$79817 = -28						; size = 4
_i$79808 = -24						; size = 4
_uReadThis$79801 = -20					; size = 4
_err$ = -16						; size = 4
_iRead$ = -12						; size = 4
_pfile_in_zip_read_info$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_unzReadCurrentFile@12 PROC				; COMDAT

; 1228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi

; 1229 :     int err=UNZ_OK;

  00007	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1230 :     uInt iRead = 0;

  0000e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iRead$[ebp], 0

; 1231 :     unz_s* s;
; 1232 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1233 :     if (file==NULL)

  00015	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00019	75 0a		 jne	 SHORT $LN30@unzReadCur

; 1234 :         return UNZ_PARAMERROR;

  0001b	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00020	e9 f6 03 00 00	 jmp	 $LN31@unzReadCur
$LN30@unzReadCur:

; 1235 :     s=(unz_s*)file;

  00025	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00028	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1236 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002e	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00034	89 55 f8	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], edx

; 1237 : 
; 1238 :     if (pfile_in_zip_read_info==NULL)

  00037	83 7d f8 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  0003b	75 0a		 jne	 SHORT $LN29@unzReadCur

; 1239 :         return UNZ_PARAMERROR;

  0003d	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00042	e9 d4 03 00 00	 jmp	 $LN31@unzReadCur
$LN29@unzReadCur:

; 1240 : 
; 1241 : 
; 1242 :     if ((pfile_in_zip_read_info->read_buffer == NULL))

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0004a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004d	75 0a		 jne	 SHORT $LN28@unzReadCur

; 1243 :         return UNZ_END_OF_LIST_OF_FILE;

  0004f	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00054	e9 c2 03 00 00	 jmp	 $LN31@unzReadCur
$LN28@unzReadCur:

; 1244 :     if (len==0)

  00059	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0005d	75 07		 jne	 SHORT $LN27@unzReadCur

; 1245 :         return 0;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 b5 03 00 00	 jmp	 $LN31@unzReadCur
$LN27@unzReadCur:

; 1246 : 
; 1247 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  00066	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00069	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0006c	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1248 : 
; 1249 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00075	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1250 : 
; 1251 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&
; 1252 :         (!(pfile_in_zip_read_info->raw)))

  00078	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0007b	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0007e	3b 42 5c	 cmp	 eax, DWORD PTR [edx+92]
  00081	76 18		 jbe	 SHORT $LN26@unzReadCur
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00086	83 b9 8c 00 00
	00 00		 cmp	 DWORD PTR [ecx+140], 0
  0008d	75 0c		 jne	 SHORT $LN26@unzReadCur

; 1253 :         pfile_in_zip_read_info->stream.avail_out =
; 1254 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;

  0008f	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00092	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00095	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00098	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN26@unzReadCur:

; 1255 : 
; 1256 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1257 :            pfile_in_zip_read_info->stream.avail_in) &&
; 1258 :          (pfile_in_zip_read_info->raw))

  0009b	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0009e	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000a4	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  000a7	39 45 10	 cmp	 DWORD PTR _len$[ebp], eax
  000aa	76 1e		 jbe	 SHORT $LN24@unzReadCur
  000ac	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000af	83 ba 8c 00 00
	00 00		 cmp	 DWORD PTR [edx+140], 0
  000b6	74 12		 je	 SHORT $LN24@unzReadCur

; 1259 :         pfile_in_zip_read_info->stream.avail_out =
; 1260 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1261 :             pfile_in_zip_read_info->stream.avail_in;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000bb	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  000be	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c1	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c7	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN24@unzReadCur:

; 1262 : 
; 1263 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  000ca	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000cd	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  000d1	0f 86 36 03 00
	00		 jbe	 $LN23@unzReadCur

; 1264 :     {
; 1265 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&
; 1266 :             (pfile_in_zip_read_info->rest_read_compressed>0))

  000d7	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000da	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000de	0f 85 69 01 00
	00		 jne	 $LN22@unzReadCur
  000e4	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000e7	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  000eb	0f 86 5c 01 00
	00		 jbe	 $LN22@unzReadCur

; 1267 :         {
; 1268 :             uInt uReadThis = UNZ_BUFSIZE;

  000f1	c7 45 ec 00 40
	00 00		 mov	 DWORD PTR _uReadThis$79801[ebp], 16384 ; 00004000H

; 1269 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  000f8	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000fb	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  000fe	3b 55 ec	 cmp	 edx, DWORD PTR _uReadThis$79801[ebp]
  00101	73 09		 jae	 SHORT $LN21@unzReadCur

; 1270 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  00103	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00106	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00109	89 4d ec	 mov	 DWORD PTR _uReadThis$79801[ebp], ecx
$LN21@unzReadCur:

; 1271 :             if (uReadThis == 0)

  0010c	83 7d ec 00	 cmp	 DWORD PTR _uReadThis$79801[ebp], 0
  00110	75 07		 jne	 SHORT $LN20@unzReadCur

; 1272 :                 return UNZ_EOF;

  00112	33 c0		 xor	 eax, eax
  00114	e9 02 03 00 00	 jmp	 $LN31@unzReadCur
$LN20@unzReadCur:

; 1273 :             if (ZSEEK(pfile_in_zip_read_info->z_filefunc,
; 1274 :                       pfile_in_zip_read_info->filestream,
; 1275 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1276 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1277 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  00119	6a 00		 push	 0
  0011b	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0011e	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00121	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00124	03 81 88 00 00
	00		 add	 eax, DWORD PTR [ecx+136]
  0012a	50		 push	 eax
  0012b	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0012e	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00134	50		 push	 eax
  00135	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00138	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0013b	52		 push	 edx
  0013c	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0013f	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00142	ff d1		 call	 ecx
  00144	83 c4 10	 add	 esp, 16			; 00000010H
  00147	85 c0		 test	 eax, eax
  00149	74 08		 je	 SHORT $LN19@unzReadCur

; 1278 :                 return UNZ_ERRNO;

  0014b	83 c8 ff	 or	 eax, -1
  0014e	e9 c8 02 00 00	 jmp	 $LN31@unzReadCur
$LN19@unzReadCur:

; 1279 :             if (ZREAD(pfile_in_zip_read_info->z_filefunc,
; 1280 :                       pfile_in_zip_read_info->filestream,
; 1281 :                       pfile_in_zip_read_info->read_buffer,
; 1282 :                       uReadThis)!=uReadThis)

  00153	8b 55 ec	 mov	 edx, DWORD PTR _uReadThis$79801[ebp]
  00156	52		 push	 edx
  00157	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0015a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015c	51		 push	 ecx
  0015d	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00160	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00166	50		 push	 eax
  00167	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0016a	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0016d	52		 push	 edx
  0016e	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00171	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00174	ff d1		 call	 ecx
  00176	83 c4 10	 add	 esp, 16			; 00000010H
  00179	3b 45 ec	 cmp	 eax, DWORD PTR _uReadThis$79801[ebp]
  0017c	74 08		 je	 SHORT $LN18@unzReadCur

; 1283 :                 return UNZ_ERRNO;

  0017e	83 c8 ff	 or	 eax, -1
  00181	e9 95 02 00 00	 jmp	 $LN31@unzReadCur
$LN18@unzReadCur:

; 1284 : 
; 1285 : 
; 1286 : #            ifndef NOUNCRYPT
; 1287 :             if(s->encrypted)

  00186	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00189	83 ba a0 00 00
	00 00		 cmp	 DWORD PTR [edx+160], 0
  00190	0f 84 85 00 00
	00		 je	 $LN17@unzReadCur

; 1288 :             {
; 1289 :                 uInt i;
; 1290 :                 for(i=0;i<uReadThis;i++)

  00196	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$79808[ebp], 0
  0019d	eb 09		 jmp	 SHORT $LN16@unzReadCur
$LN15@unzReadCur:
  0019f	8b 45 e8	 mov	 eax, DWORD PTR _i$79808[ebp]
  001a2	83 c0 01	 add	 eax, 1
  001a5	89 45 e8	 mov	 DWORD PTR _i$79808[ebp], eax
$LN16@unzReadCur:
  001a8	8b 4d e8	 mov	 ecx, DWORD PTR _i$79808[ebp]
  001ab	3b 4d ec	 cmp	 ecx, DWORD PTR _uReadThis$79801[ebp]
  001ae	73 6b		 jae	 SHORT $LN17@unzReadCur

; 1291 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1292 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1293 :                               pfile_in_zip_read_info->read_buffer[i]);

  001b0	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001b3	8b 32		 mov	 esi, DWORD PTR [edx]
  001b5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001b8	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001be	51		 push	 ecx
  001bf	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001c2	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  001c8	52		 push	 edx
  001c9	e8 00 00 00 00	 call	 _decrypt_byte
  001ce	83 c4 08	 add	 esp, 8
  001d1	8b 4d e8	 mov	 ecx, DWORD PTR _i$79808[ebp]
  001d4	0f be 14 0e	 movsx	 edx, BYTE PTR [esi+ecx]
  001d8	33 d0		 xor	 edx, eax
  001da	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001df	8b 45 e8	 mov	 eax, DWORD PTR _i$79808[ebp]
  001e2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ea	8b 45 e8	 mov	 eax, DWORD PTR _i$79808[ebp]
  001ed	0f be 0c 02	 movsx	 ecx, BYTE PTR [edx+eax]
  001f1	51		 push	 ecx
  001f2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001f5	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  001fb	50		 push	 eax
  001fc	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001ff	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 _update_keys
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020e	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00211	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00213	8b 55 e8	 mov	 edx, DWORD PTR _i$79808[ebp]
  00216	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00219	eb 84		 jmp	 SHORT $LN15@unzReadCur
$LN17@unzReadCur:

; 1294 :             }
; 1295 : #            endif
; 1296 : 
; 1297 : 
; 1298 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  0021b	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0021e	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00221	03 4d ec	 add	 ecx, DWORD PTR _uReadThis$79801[ebp]
  00224	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00227	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1299 : 
; 1300 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;

  0022a	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0022d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00230	2b 4d ec	 sub	 ecx, DWORD PTR _uReadThis$79801[ebp]
  00233	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00236	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 1301 : 
; 1302 :             pfile_in_zip_read_info->stream.next_in =
; 1303 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;

  00239	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0023c	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0023f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00241	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1304 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  00244	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00247	8b 4d ec	 mov	 ecx, DWORD PTR _uReadThis$79801[ebp]
  0024a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN22@unzReadCur:

; 1305 :         }
; 1306 : 
; 1307 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  0024d	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00250	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  00257	74 10		 je	 SHORT $LN12@unzReadCur
  00259	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0025c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00263	0f 84 fc 00 00
	00		 je	 $LN13@unzReadCur
$LN12@unzReadCur:

; 1308 :         {
; 1309 :             uInt uDoCopy,i ;
; 1310 : 
; 1311 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&
; 1312 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))

  00269	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0026c	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00270	75 18		 jne	 SHORT $LN11@unzReadCur
  00272	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00275	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  00279	75 0f		 jne	 SHORT $LN11@unzReadCur

; 1313 :                 return (iRead==0) ? UNZ_EOF : iRead;

  0027b	8b 45 f4	 mov	 eax, DWORD PTR _iRead$[ebp]
  0027e	f7 d8		 neg	 eax
  00280	1b c0		 sbb	 eax, eax
  00282	23 45 f4	 and	 eax, DWORD PTR _iRead$[ebp]
  00285	e9 91 01 00 00	 jmp	 $LN31@unzReadCur
$LN11@unzReadCur:

; 1314 : 
; 1315 :             if (pfile_in_zip_read_info->stream.avail_out <
; 1316 :                             pfile_in_zip_read_info->stream.avail_in)

  0028a	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0028d	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00290	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00293	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00296	73 0b		 jae	 SHORT $LN10@unzReadCur

; 1317 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;

  00298	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0029b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0029e	89 4d e0	 mov	 DWORD PTR _uDoCopy$79816[ebp], ecx

; 1318 :             else

  002a1	eb 09		 jmp	 SHORT $LN9@unzReadCur
$LN10@unzReadCur:

; 1319 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;

  002a3	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002a6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002a9	89 45 e0	 mov	 DWORD PTR _uDoCopy$79816[ebp], eax
$LN9@unzReadCur:

; 1320 : 
; 1321 :             for (i=0;i<uDoCopy;i++)

  002ac	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$79817[ebp], 0
  002b3	eb 09		 jmp	 SHORT $LN8@unzReadCur
$LN7@unzReadCur:
  002b5	8b 4d e4	 mov	 ecx, DWORD PTR _i$79817[ebp]
  002b8	83 c1 01	 add	 ecx, 1
  002bb	89 4d e4	 mov	 DWORD PTR _i$79817[ebp], ecx
$LN8@unzReadCur:
  002be	8b 55 e4	 mov	 edx, DWORD PTR _i$79817[ebp]
  002c1	3b 55 e0	 cmp	 edx, DWORD PTR _uDoCopy$79816[ebp]
  002c4	73 1a		 jae	 SHORT $LN6@unzReadCur

; 1322 :                 *(pfile_in_zip_read_info->stream.next_out+i) =
; 1323 :                         *(pfile_in_zip_read_info->stream.next_in+i);

  002c6	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002cc	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002cf	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002d2	8b 55 e4	 mov	 edx, DWORD PTR _i$79817[ebp]
  002d5	8b 75 e4	 mov	 esi, DWORD PTR _i$79817[ebp]
  002d8	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  002db	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  002de	eb d5		 jmp	 SHORT $LN7@unzReadCur
$LN6@unzReadCur:

; 1324 : 
; 1325 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,
; 1326 :                                 pfile_in_zip_read_info->stream.next_out,
; 1327 :                                 uDoCopy);

  002e0	8b 55 e0	 mov	 edx, DWORD PTR _uDoCopy$79816[ebp]
  002e3	52		 push	 edx
  002e4	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002e7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002ea	51		 push	 ecx
  002eb	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002ee	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 _crc32@12
  002f7	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  002fa	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 1328 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  002fd	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00300	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00303	2b 45 e0	 sub	 eax, DWORD PTR _uDoCopy$79816[ebp]
  00306	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00309	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 1329 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  0030c	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0030f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00312	2b 45 e0	 sub	 eax, DWORD PTR _uDoCopy$79816[ebp]
  00315	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00318	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1330 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  0031b	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0031e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00321	2b 45 e0	 sub	 eax, DWORD PTR _uDoCopy$79816[ebp]
  00324	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00327	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1331 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  0032a	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0032d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00330	03 45 e0	 add	 eax, DWORD PTR _uDoCopy$79816[ebp]
  00333	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00336	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1332 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  00339	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0033c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0033f	03 45 e0	 add	 eax, DWORD PTR _uDoCopy$79816[ebp]
  00342	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00345	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1333 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  00348	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0034b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0034e	03 45 e0	 add	 eax, DWORD PTR _uDoCopy$79816[ebp]
  00351	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00354	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1334 :             iRead += uDoCopy;

  00357	8b 55 f4	 mov	 edx, DWORD PTR _iRead$[ebp]
  0035a	03 55 e0	 add	 edx, DWORD PTR _uDoCopy$79816[ebp]
  0035d	89 55 f4	 mov	 DWORD PTR _iRead$[ebp], edx

; 1335 :         }
; 1336 :         else

  00360	e9 a3 00 00 00	 jmp	 $LN5@unzReadCur
$LN13@unzReadCur:

; 1337 :         {
; 1338 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1339 :             const Bytef *bufBefore;
; 1340 :             uLong uOutThis;
; 1341 :             int flush=Z_SYNC_FLUSH;

  00365	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR _flush$79829[ebp], 2

; 1342 : 
; 1343 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  0036c	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0036f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00372	89 4d cc	 mov	 DWORD PTR _uTotalOutBefore$79825[ebp], ecx

; 1344 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  00375	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00378	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0037b	89 45 dc	 mov	 DWORD PTR _bufBefore$79827[ebp], eax

; 1345 : 
; 1346 :             /*
; 1347 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1348 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1349 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1350 :                 flush = Z_FINISH;
; 1351 :             */
; 1352 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  0037e	8b 4d d4	 mov	 ecx, DWORD PTR _flush$79829[ebp]
  00381	51		 push	 ecx
  00382	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00385	83 c2 04	 add	 edx, 4
  00388	52		 push	 edx
  00389	e8 00 00 00 00	 call	 _inflate@8
  0038e	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 1353 : 
; 1354 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  00391	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00395	7c 10		 jl	 SHORT $LN4@unzReadCur
  00397	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0039a	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0039e	74 07		 je	 SHORT $LN4@unzReadCur

; 1355 :               err = Z_DATA_ERROR;

  003a0	c7 45 f0 fd ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -3 ; fffffffdH
$LN4@unzReadCur:

; 1356 : 
; 1357 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  003a7	8b 4d f8	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003aa	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  003ad	89 55 d0	 mov	 DWORD PTR _uTotalOutAfter$79826[ebp], edx

; 1358 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  003b0	8b 45 d0	 mov	 eax, DWORD PTR _uTotalOutAfter$79826[ebp]
  003b3	2b 45 cc	 sub	 eax, DWORD PTR _uTotalOutBefore$79825[ebp]
  003b6	89 45 d8	 mov	 DWORD PTR _uOutThis$79828[ebp], eax

; 1359 : 
; 1360 :             pfile_in_zip_read_info->crc32 =
; 1361 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1362 :                         (uInt)(uOutThis));

  003b9	8b 4d d8	 mov	 ecx, DWORD PTR _uOutThis$79828[ebp]
  003bc	51		 push	 ecx
  003bd	8b 55 dc	 mov	 edx, DWORD PTR _bufBefore$79827[ebp]
  003c0	52		 push	 edx
  003c1	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003c4	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  003c7	51		 push	 ecx
  003c8	e8 00 00 00 00	 call	 _crc32@12
  003cd	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003d0	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 1363 : 
; 1364 :             pfile_in_zip_read_info->rest_read_uncompressed -=
; 1365 :                 uOutThis;

  003d3	8b 45 f8	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003d6	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  003d9	2b 4d d8	 sub	 ecx, DWORD PTR _uOutThis$79828[ebp]
  003dc	8b 55 f8	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  003df	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1366 : 
; 1367 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  003e2	8b 45 d0	 mov	 eax, DWORD PTR _uTotalOutAfter$79826[ebp]
  003e5	2b 45 cc	 sub	 eax, DWORD PTR _uTotalOutBefore$79825[ebp]
  003e8	03 45 f4	 add	 eax, DWORD PTR _iRead$[ebp]
  003eb	89 45 f4	 mov	 DWORD PTR _iRead$[ebp], eax

; 1368 : 
; 1369 :             if (err==Z_STREAM_END)

  003ee	83 7d f0 01	 cmp	 DWORD PTR _err$[ebp], 1
  003f2	75 0c		 jne	 SHORT $LN3@unzReadCur

; 1370 :                 return (iRead==0) ? UNZ_EOF : iRead;

  003f4	8b 45 f4	 mov	 eax, DWORD PTR _iRead$[ebp]
  003f7	f7 d8		 neg	 eax
  003f9	1b c0		 sbb	 eax, eax
  003fb	23 45 f4	 and	 eax, DWORD PTR _iRead$[ebp]
  003fe	eb 1b		 jmp	 SHORT $LN31@unzReadCur
$LN3@unzReadCur:

; 1371 :             if (err!=Z_OK)

  00400	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00404	74 02		 je	 SHORT $LN5@unzReadCur

; 1372 :                 break;

  00406	eb 05		 jmp	 SHORT $LN23@unzReadCur
$LN5@unzReadCur:

; 1373 :         }
; 1374 :     }

  00408	e9 bd fc ff ff	 jmp	 $LN24@unzReadCur
$LN23@unzReadCur:

; 1375 : 
; 1376 :     if (err==Z_OK)

  0040d	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00411	75 05		 jne	 SHORT $LN1@unzReadCur

; 1377 :         return iRead;

  00413	8b 45 f4	 mov	 eax, DWORD PTR _iRead$[ebp]
  00416	eb 03		 jmp	 SHORT $LN31@unzReadCur
$LN1@unzReadCur:

; 1378 :     return err;

  00418	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]
$LN31@unzReadCur:

; 1379 : }

  0041b	5e		 pop	 esi
  0041c	8b e5		 mov	 esp, ebp
  0041e	5d		 pop	 ebp
  0041f	c2 0c 00	 ret	 12			; 0000000cH
_unzReadCurrentFile@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
_uFlags$ = -24						; size = 4
_size_filename$ = -20					; size = 4
_err$ = -16						; size = 4
_uMagic$ = -12						; size = 4
_size_extra_field$ = -8					; size = 4
_uData$ = -4						; size = 4
_s$ = 8							; size = 4
_piSizeVar$ = 12					; size = 4
_poffset_local_extrafield$ = 16				; size = 4
_psize_local_extrafield$ = 20				; size = 4
_unzlocal_CheckCurrentFileCoherencyHeader PROC		; COMDAT

; 964  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 965  :     uLong uMagic,uData,uFlags;
; 966  :     uLong size_filename;
; 967  :     uLong size_extra_field;
; 968  :     int err=UNZ_OK;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 969  : 
; 970  :     *piSizeVar = 0;

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 971  :     *poffset_local_extrafield = 0;

  00016	8b 4d 10	 mov	 ecx, DWORD PTR _poffset_local_extrafield$[ebp]
  00019	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 972  :     *psize_local_extrafield = 0;

  0001f	8b 55 14	 mov	 edx, DWORD PTR _psize_local_extrafield$[ebp]
  00022	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 973  : 
; 974  :     if (ZSEEK(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 975  :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00028	6a 00		 push	 0
  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00033	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00036	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  00039	51		 push	 ecx
  0003a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00044	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004e	ff d2		 call	 edx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN25@unzlocal_C

; 976  :         return UNZ_ERRNO;

  00057	83 c8 ff	 or	 eax, -1
  0005a	e9 5f 02 00 00	 jmp	 $LN26@unzlocal_C
$LN25@unzlocal_C:

; 977  : 
; 978  : 
; 979  :     if (err==UNZ_OK)

  0005f	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00063	75 34		 jne	 SHORT $LN24@unzlocal_C

; 980  :         if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00065	8d 45 f4	 lea	 eax, DWORD PTR _uMagic$[ebp]
  00068	50		 push	 eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0006f	52		 push	 edx
  00070	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _unzlocal_getLong
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	85 c0		 test	 eax, eax
  0007e	74 09		 je	 SHORT $LN23@unzlocal_C

; 981  :             err=UNZ_ERRNO;

  00080	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00087	eb 10		 jmp	 SHORT $LN24@unzlocal_C
$LN23@unzlocal_C:

; 982  :         else if (uMagic!=0x04034b50)

  00089	81 7d f4 50 4b
	03 04		 cmp	 DWORD PTR _uMagic$[ebp], 67324752 ; 04034b50H
  00090	74 07		 je	 SHORT $LN24@unzlocal_C

; 983  :             err=UNZ_BADZIPFILE;

  00092	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN24@unzlocal_C:

; 984  : 
; 985  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  00099	8d 4d fc	 lea	 ecx, DWORD PTR _uData$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a0	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000a3	50		 push	 eax
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 _unzlocal_getShort
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	85 c0		 test	 eax, eax
  000b2	74 07		 je	 SHORT $LN20@unzlocal_C

; 986  :         err=UNZ_ERRNO;

  000b4	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN20@unzlocal_C:

; 987  : /*
; 988  :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 989  :         err=UNZ_BADZIPFILE;
; 990  : */
; 991  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  000bb	8d 55 e8	 lea	 edx, DWORD PTR _uFlags$[ebp]
  000be	52		 push	 edx
  000bf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c2	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000c5	51		 push	 ecx
  000c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 _unzlocal_getShort
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	85 c0		 test	 eax, eax
  000d4	74 07		 je	 SHORT $LN19@unzlocal_C

; 992  :         err=UNZ_ERRNO;

  000d6	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN19@unzlocal_C:

; 993  : 
; 994  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000dd	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e4	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e7	52		 push	 edx
  000e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 _unzlocal_getShort
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f4	85 c0		 test	 eax, eax
  000f6	74 09		 je	 SHORT $LN18@unzlocal_C

; 995  :         err=UNZ_ERRNO;

  000f8	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  000ff	eb 18		 jmp	 SHORT $LN17@unzlocal_C
$LN18@unzlocal_C:

; 996  :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  00101	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00105	75 12		 jne	 SHORT $LN17@unzlocal_C
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _uData$[ebp]
  0010d	3b 51 54	 cmp	 edx, DWORD PTR [ecx+84]
  00110	74 07		 je	 SHORT $LN17@unzlocal_C

; 997  :         err=UNZ_BADZIPFILE;

  00112	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN17@unzlocal_C:

; 998  : 
; 999  :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1000 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))

  00119	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0011d	75 19		 jne	 SHORT $LN15@unzlocal_C
  0011f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00122	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00126	74 10		 je	 SHORT $LN15@unzlocal_C
  00128	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012b	83 79 54 08	 cmp	 DWORD PTR [ecx+84], 8
  0012f	74 07		 je	 SHORT $LN15@unzlocal_C

; 1001 :         err=UNZ_BADZIPFILE;

  00131	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN15@unzlocal_C:

; 1002 : 
; 1003 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  00138	8d 55 fc	 lea	 edx, DWORD PTR _uData$[ebp]
  0013b	52		 push	 edx
  0013c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00142	51		 push	 ecx
  00143	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 _unzlocal_getLong
  0014c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014f	85 c0		 test	 eax, eax
  00151	74 07		 je	 SHORT $LN14@unzlocal_C

; 1004 :         err=UNZ_ERRNO;

  00153	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@unzlocal_C:

; 1005 : 
; 1006 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  0015a	8d 45 fc	 lea	 eax, DWORD PTR _uData$[ebp]
  0015d	50		 push	 eax
  0015e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00161	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00164	52		 push	 edx
  00165	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 _unzlocal_getLong
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00171	85 c0		 test	 eax, eax
  00173	74 09		 je	 SHORT $LN13@unzlocal_C

; 1007 :         err=UNZ_ERRNO;

  00175	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 1008 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) &&

  0017c	eb 20		 jmp	 SHORT $LN12@unzlocal_C
$LN13@unzlocal_C:

; 1009 :                               ((uFlags & 8)==0))

  0017e	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00182	75 1a		 jne	 SHORT $LN12@unzlocal_C
  00184	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00187	8b 55 fc	 mov	 edx, DWORD PTR _uData$[ebp]
  0018a	3b 51 5c	 cmp	 edx, DWORD PTR [ecx+92]
  0018d	74 0f		 je	 SHORT $LN12@unzlocal_C
  0018f	8b 45 e8	 mov	 eax, DWORD PTR _uFlags$[ebp]
  00192	83 e0 08	 and	 eax, 8
  00195	75 07		 jne	 SHORT $LN12@unzlocal_C

; 1010 :         err=UNZ_BADZIPFILE;

  00197	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN12@unzlocal_C:

; 1011 : 
; 1012 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  0019e	8d 4d fc	 lea	 ecx, DWORD PTR _uData$[ebp]
  001a1	51		 push	 ecx
  001a2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a5	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001a8	50		 push	 eax
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ac	51		 push	 ecx
  001ad	e8 00 00 00 00	 call	 _unzlocal_getLong
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b5	85 c0		 test	 eax, eax
  001b7	74 09		 je	 SHORT $LN10@unzlocal_C

; 1013 :         err=UNZ_ERRNO;

  001b9	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 1014 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) &&

  001c0	eb 20		 jmp	 SHORT $LN9@unzlocal_C
$LN10@unzlocal_C:

; 1015 :                               ((uFlags & 8)==0))

  001c2	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001c6	75 1a		 jne	 SHORT $LN9@unzlocal_C
  001c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	8b 45 fc	 mov	 eax, DWORD PTR _uData$[ebp]
  001ce	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  001d1	74 0f		 je	 SHORT $LN9@unzlocal_C
  001d3	8b 4d e8	 mov	 ecx, DWORD PTR _uFlags$[ebp]
  001d6	83 e1 08	 and	 ecx, 8
  001d9	75 07		 jne	 SHORT $LN9@unzlocal_C

; 1016 :         err=UNZ_BADZIPFILE;

  001db	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN9@unzlocal_C:

; 1017 : 
; 1018 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  001e2	8d 55 fc	 lea	 edx, DWORD PTR _uData$[ebp]
  001e5	52		 push	 edx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ec	51		 push	 ecx
  001ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f0	52		 push	 edx
  001f1	e8 00 00 00 00	 call	 _unzlocal_getLong
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f9	85 c0		 test	 eax, eax
  001fb	74 09		 je	 SHORT $LN7@unzlocal_C

; 1019 :         err=UNZ_ERRNO;

  001fd	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1

; 1020 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) &&

  00204	eb 20		 jmp	 SHORT $LN6@unzlocal_C
$LN7@unzlocal_C:

; 1021 :                               ((uFlags & 8)==0))

  00206	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0020a	75 1a		 jne	 SHORT $LN6@unzlocal_C
  0020c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _uData$[ebp]
  00212	3b 48 64	 cmp	 ecx, DWORD PTR [eax+100]
  00215	74 0f		 je	 SHORT $LN6@unzlocal_C
  00217	8b 55 e8	 mov	 edx, DWORD PTR _uFlags$[ebp]
  0021a	83 e2 08	 and	 edx, 8
  0021d	75 07		 jne	 SHORT $LN6@unzlocal_C

; 1022 :         err=UNZ_BADZIPFILE;

  0021f	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN6@unzlocal_C:

; 1023 : 
; 1024 : 
; 1025 :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  00226	8d 45 ec	 lea	 eax, DWORD PTR _size_filename$[ebp]
  00229	50		 push	 eax
  0022a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0022d	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00230	52		 push	 edx
  00231	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 _unzlocal_getShort
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023d	85 c0		 test	 eax, eax
  0023f	74 09		 je	 SHORT $LN4@unzlocal_C

; 1026 :         err=UNZ_ERRNO;

  00241	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00248	eb 18		 jmp	 SHORT $LN3@unzlocal_C
$LN4@unzlocal_C:

; 1027 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  0024a	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0024e	75 12		 jne	 SHORT $LN3@unzlocal_C
  00250	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00253	8b 55 ec	 mov	 edx, DWORD PTR _size_filename$[ebp]
  00256	3b 51 68	 cmp	 edx, DWORD PTR [ecx+104]
  00259	74 07		 je	 SHORT $LN3@unzlocal_C

; 1028 :         err=UNZ_BADZIPFILE;

  0025b	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN3@unzlocal_C:

; 1029 : 
; 1030 :     *piSizeVar += (uInt)size_filename;

  00262	8b 45 0c	 mov	 eax, DWORD PTR _piSizeVar$[ebp]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	03 4d ec	 add	 ecx, DWORD PTR _size_filename$[ebp]
  0026a	8b 55 0c	 mov	 edx, DWORD PTR _piSizeVar$[ebp]
  0026d	89 0a		 mov	 DWORD PTR [edx], ecx

; 1031 : 
; 1032 :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  0026f	8d 45 f8	 lea	 eax, DWORD PTR _size_extra_field$[ebp]
  00272	50		 push	 eax
  00273	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00276	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00279	52		 push	 edx
  0027a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _unzlocal_getShort
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH
  00286	85 c0		 test	 eax, eax
  00288	74 07		 je	 SHORT $LN1@unzlocal_C

; 1033 :         err=UNZ_ERRNO;

  0028a	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN1@unzlocal_C:

; 1034 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
; 1035 :                                     SIZEZIPLOCALHEADER + size_filename;

  00291	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00294	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0029a	8b 45 ec	 mov	 eax, DWORD PTR _size_filename$[ebp]
  0029d	8d 4c 02 1e	 lea	 ecx, DWORD PTR [edx+eax+30]
  002a1	8b 55 10	 mov	 edx, DWORD PTR _poffset_local_extrafield$[ebp]
  002a4	89 0a		 mov	 DWORD PTR [edx], ecx

; 1036 :     *psize_local_extrafield = (uInt)size_extra_field;

  002a6	8b 45 14	 mov	 eax, DWORD PTR _psize_local_extrafield$[ebp]
  002a9	8b 4d f8	 mov	 ecx, DWORD PTR _size_extra_field$[ebp]
  002ac	89 08		 mov	 DWORD PTR [eax], ecx

; 1037 : 
; 1038 :     *piSizeVar += (uInt)size_extra_field;

  002ae	8b 55 0c	 mov	 edx, DWORD PTR _piSizeVar$[ebp]
  002b1	8b 02		 mov	 eax, DWORD PTR [edx]
  002b3	03 45 f8	 add	 eax, DWORD PTR _size_extra_field$[ebp]
  002b6	8b 4d 0c	 mov	 ecx, DWORD PTR _piSizeVar$[ebp]
  002b9	89 01		 mov	 DWORD PTR [ecx], eax

; 1039 : 
; 1040 :     return err;

  002bb	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]
$LN26@unzlocal_C:

; 1041 : }

  002be	8b e5		 mov	 esp, ebp
  002c0	5d		 pop	 ebp
  002c1	c3		 ret	 0
_unzlocal_CheckCurrentFileCoherencyHeader ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _unzlocal_GetCurrentFileInfoInternal
_TEXT	SEGMENT
_uSizeRead$79554 = -112					; size = 4
_uSizeRead$79543 = -108					; size = 4
_uSizeRead$79536 = -104					; size = 4
_err$ = -100						; size = 4
_file_info_internal$ = -96				; size = 4
_lSeek$ = -92						; size = 4
_file_info$ = -88					; size = 80
_uMagic$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_pfile_info_internal$ = 16				; size = 4
_szFileName$ = 20					; size = 4
_fileNameBufferSize$ = 24				; size = 4
_extraField$ = 28					; size = 4
_extraFieldBufferSize$ = 32				; size = 4
_szComment$ = 36					; size = 4
_commentBufferSize$ = 40				; size = 4
_unzlocal_GetCurrentFileInfoInternal PROC		; COMDAT

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 593  :     unz_s* s;
; 594  :     unz_file_info file_info;
; 595  :     unz_file_info_internal file_info_internal;
; 596  :     int err=UNZ_OK;

  00008	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 597  :     uLong uMagic;
; 598  :     long lSeek=0;

  0000f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 599  : 
; 600  :     if (file==NULL)

  00016	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0001a	75 0a		 jne	 SHORT $LN46@unzlocal_G@2

; 601  :         return UNZ_PARAMERROR;

  0001c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00021	e9 96 04 00 00	 jmp	 $LN47@unzlocal_G@2
$LN46@unzlocal_G@2:

; 602  :     s=(unz_s*)file;

  00026	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00029	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 603  :     if (ZSEEK(s->z_filefunc, s->filestream,
; 604  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 605  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  0002c	6a 00		 push	 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00034	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00037	03 50 2c	 add	 edx, DWORD PTR [eax+44]
  0003a	52		 push	 edx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00041	52		 push	 edx
  00042	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00045	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00048	51		 push	 ecx
  00049	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0004c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004f	ff d0		 call	 eax
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	74 07		 je	 SHORT $LN45@unzlocal_G@2

; 606  :         err=UNZ_ERRNO;

  00058	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN45@unzlocal_G@2:

; 607  : 
; 608  : 
; 609  :     /* we check the magic */
; 610  :     if (err==UNZ_OK)

  0005f	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  00063	75 34		 jne	 SHORT $LN44@unzlocal_G@2

; 611  :         if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00065	8d 4d f8	 lea	 ecx, DWORD PTR _uMagic$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0006f	50		 push	 eax
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _unzlocal_getLong
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	85 c0		 test	 eax, eax
  0007e	74 09		 je	 SHORT $LN43@unzlocal_G@2

; 612  :             err=UNZ_ERRNO;

  00080	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
  00087	eb 10		 jmp	 SHORT $LN44@unzlocal_G@2
$LN43@unzlocal_G@2:

; 613  :         else if (uMagic!=0x02014b50)

  00089	81 7d f8 50 4b
	01 02		 cmp	 DWORD PTR _uMagic$[ebp], 33639248 ; 02014b50H
  00090	74 07		 je	 SHORT $LN44@unzlocal_G@2

; 614  :             err=UNZ_BADZIPFILE;

  00092	c7 45 9c 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN44@unzlocal_G@2:

; 615  : 
; 616  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  00099	8d 55 a8	 lea	 edx, DWORD PTR _file_info$[ebp]
  0009c	52		 push	 edx
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000a0	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000a3	51		 push	 ecx
  000a4	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 _unzlocal_getShort
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	85 c0		 test	 eax, eax
  000b2	74 07		 je	 SHORT $LN40@unzlocal_G@2

; 617  :         err=UNZ_ERRNO;

  000b4	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN40@unzlocal_G@2:

; 618  : 
; 619  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  000bb	8d 45 ac	 lea	 eax, DWORD PTR _file_info$[ebp+4]
  000be	50		 push	 eax
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c2	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000c5	52		 push	 edx
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _unzlocal_getShort
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	85 c0		 test	 eax, eax
  000d4	74 07		 je	 SHORT $LN39@unzlocal_G@2

; 620  :         err=UNZ_ERRNO;

  000d6	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN39@unzlocal_G@2:

; 621  : 
; 622  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  000dd	8d 4d b0	 lea	 ecx, DWORD PTR _file_info$[ebp+8]
  000e0	51		 push	 ecx
  000e1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000e4	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000e7	50		 push	 eax
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _unzlocal_getShort
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f4	85 c0		 test	 eax, eax
  000f6	74 07		 je	 SHORT $LN38@unzlocal_G@2

; 623  :         err=UNZ_ERRNO;

  000f8	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN38@unzlocal_G@2:

; 624  : 
; 625  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  000ff	8d 55 b4	 lea	 edx, DWORD PTR _file_info$[ebp+12]
  00102	52		 push	 edx
  00103	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00106	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00109	51		 push	 ecx
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 _unzlocal_getShort
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
  00116	85 c0		 test	 eax, eax
  00118	74 07		 je	 SHORT $LN37@unzlocal_G@2

; 626  :         err=UNZ_ERRNO;

  0011a	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN37@unzlocal_G@2:

; 627  : 
; 628  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  00121	8d 45 b8	 lea	 eax, DWORD PTR _file_info$[ebp+16]
  00124	50		 push	 eax
  00125	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00128	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0012b	52		 push	 edx
  0012c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _unzlocal_getLong
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
  00138	85 c0		 test	 eax, eax
  0013a	74 07		 je	 SHORT $LN36@unzlocal_G@2

; 629  :         err=UNZ_ERRNO;

  0013c	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN36@unzlocal_G@2:

; 630  : 
; 631  :     unzlocal_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  00143	8d 4d e0	 lea	 ecx, DWORD PTR _file_info$[ebp+56]
  00146	51		 push	 ecx
  00147	8b 55 b8	 mov	 edx, DWORD PTR _file_info$[ebp+16]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 _unzlocal_DosDateToTmuDate
  00150	83 c4 08	 add	 esp, 8

; 632  : 
; 633  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  00153	8d 45 bc	 lea	 eax, DWORD PTR _file_info$[ebp+20]
  00156	50		 push	 eax
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0015a	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0015d	52		 push	 edx
  0015e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _unzlocal_getLong
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016a	85 c0		 test	 eax, eax
  0016c	74 07		 je	 SHORT $LN35@unzlocal_G@2

; 634  :         err=UNZ_ERRNO;

  0016e	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN35@unzlocal_G@2:

; 635  : 
; 636  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  00175	8d 4d c0	 lea	 ecx, DWORD PTR _file_info$[ebp+24]
  00178	51		 push	 ecx
  00179	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0017c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0017f	50		 push	 eax
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 _unzlocal_getLong
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018c	85 c0		 test	 eax, eax
  0018e	74 07		 je	 SHORT $LN34@unzlocal_G@2

; 637  :         err=UNZ_ERRNO;

  00190	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN34@unzlocal_G@2:

; 638  : 
; 639  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  00197	8d 55 c4	 lea	 edx, DWORD PTR _file_info$[ebp+28]
  0019a	52		 push	 edx
  0019b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0019e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001a1	51		 push	 ecx
  001a2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 _unzlocal_getLong
  001ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ae	85 c0		 test	 eax, eax
  001b0	74 07		 je	 SHORT $LN33@unzlocal_G@2

; 640  :         err=UNZ_ERRNO;

  001b2	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN33@unzlocal_G@2:

; 641  : 
; 642  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  001b9	8d 45 c8	 lea	 eax, DWORD PTR _file_info$[ebp+32]
  001bc	50		 push	 eax
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001c0	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001c3	52		 push	 edx
  001c4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 _unzlocal_getShort
  001cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d0	85 c0		 test	 eax, eax
  001d2	74 07		 je	 SHORT $LN32@unzlocal_G@2

; 643  :         err=UNZ_ERRNO;

  001d4	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN32@unzlocal_G@2:

; 644  : 
; 645  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  001db	8d 4d cc	 lea	 ecx, DWORD PTR _file_info$[ebp+36]
  001de	51		 push	 ecx
  001df	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001e2	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001e5	50		 push	 eax
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001e9	51		 push	 ecx
  001ea	e8 00 00 00 00	 call	 _unzlocal_getShort
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f2	85 c0		 test	 eax, eax
  001f4	74 07		 je	 SHORT $LN31@unzlocal_G@2

; 646  :         err=UNZ_ERRNO;

  001f6	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN31@unzlocal_G@2:

; 647  : 
; 648  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  001fd	8d 55 d0	 lea	 edx, DWORD PTR _file_info$[ebp+40]
  00200	52		 push	 edx
  00201	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00204	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00207	51		 push	 ecx
  00208	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0020b	52		 push	 edx
  0020c	e8 00 00 00 00	 call	 _unzlocal_getShort
  00211	83 c4 0c	 add	 esp, 12			; 0000000cH
  00214	85 c0		 test	 eax, eax
  00216	74 07		 je	 SHORT $LN30@unzlocal_G@2

; 649  :         err=UNZ_ERRNO;

  00218	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN30@unzlocal_G@2:

; 650  : 
; 651  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  0021f	8d 45 d4	 lea	 eax, DWORD PTR _file_info$[ebp+44]
  00222	50		 push	 eax
  00223	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00226	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00229	52		 push	 edx
  0022a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _unzlocal_getShort
  00233	83 c4 0c	 add	 esp, 12			; 0000000cH
  00236	85 c0		 test	 eax, eax
  00238	74 07		 je	 SHORT $LN29@unzlocal_G@2

; 652  :         err=UNZ_ERRNO;

  0023a	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN29@unzlocal_G@2:

; 653  : 
; 654  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  00241	8d 4d d8	 lea	 ecx, DWORD PTR _file_info$[ebp+48]
  00244	51		 push	 ecx
  00245	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00248	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0024b	50		 push	 eax
  0024c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0024f	51		 push	 ecx
  00250	e8 00 00 00 00	 call	 _unzlocal_getShort
  00255	83 c4 0c	 add	 esp, 12			; 0000000cH
  00258	85 c0		 test	 eax, eax
  0025a	74 07		 je	 SHORT $LN28@unzlocal_G@2

; 655  :         err=UNZ_ERRNO;

  0025c	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN28@unzlocal_G@2:

; 656  : 
; 657  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  00263	8d 55 dc	 lea	 edx, DWORD PTR _file_info$[ebp+52]
  00266	52		 push	 edx
  00267	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0026a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0026d	51		 push	 ecx
  0026e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00271	52		 push	 edx
  00272	e8 00 00 00 00	 call	 _unzlocal_getLong
  00277	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027a	85 c0		 test	 eax, eax
  0027c	74 07		 je	 SHORT $LN27@unzlocal_G@2

; 658  :         err=UNZ_ERRNO;

  0027e	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN27@unzlocal_G@2:

; 659  : 
; 660  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  00285	8d 45 a0	 lea	 eax, DWORD PTR _file_info_internal$[ebp]
  00288	50		 push	 eax
  00289	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0028c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0028f	52		 push	 edx
  00290	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 _unzlocal_getLong
  00299	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029c	85 c0		 test	 eax, eax
  0029e	74 07		 je	 SHORT $LN26@unzlocal_G@2

; 661  :         err=UNZ_ERRNO;

  002a0	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN26@unzlocal_G@2:

; 662  : 
; 663  :     lSeek+=file_info.size_filename;

  002a7	8b 4d a4	 mov	 ecx, DWORD PTR _lSeek$[ebp]
  002aa	03 4d c8	 add	 ecx, DWORD PTR _file_info$[ebp+32]
  002ad	89 4d a4	 mov	 DWORD PTR _lSeek$[ebp], ecx

; 664  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  002b0	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  002b4	75 67		 jne	 SHORT $LN25@unzlocal_G@2
  002b6	83 7d 14 00	 cmp	 DWORD PTR _szFileName$[ebp], 0
  002ba	74 61		 je	 SHORT $LN25@unzlocal_G@2

; 665  :     {
; 666  :         uLong uSizeRead ;
; 667  :         if (file_info.size_filename<fileNameBufferSize)

  002bc	8b 55 c8	 mov	 edx, DWORD PTR _file_info$[ebp+32]
  002bf	3b 55 18	 cmp	 edx, DWORD PTR _fileNameBufferSize$[ebp]
  002c2	73 11		 jae	 SHORT $LN24@unzlocal_G@2

; 668  :         {
; 669  :             *(szFileName+file_info.size_filename)='\0';

  002c4	8b 45 14	 mov	 eax, DWORD PTR _szFileName$[ebp]
  002c7	03 45 c8	 add	 eax, DWORD PTR _file_info$[ebp+32]
  002ca	c6 00 00	 mov	 BYTE PTR [eax], 0

; 670  :             uSizeRead = file_info.size_filename;

  002cd	8b 4d c8	 mov	 ecx, DWORD PTR _file_info$[ebp+32]
  002d0	89 4d 98	 mov	 DWORD PTR _uSizeRead$79536[ebp], ecx

; 671  :         }
; 672  :         else

  002d3	eb 06		 jmp	 SHORT $LN23@unzlocal_G@2
$LN24@unzlocal_G@2:

; 673  :             uSizeRead = fileNameBufferSize;

  002d5	8b 55 18	 mov	 edx, DWORD PTR _fileNameBufferSize$[ebp]
  002d8	89 55 98	 mov	 DWORD PTR _uSizeRead$79536[ebp], edx
$LN23@unzlocal_G@2:

; 674  : 
; 675  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  002db	83 7d c8 00	 cmp	 DWORD PTR _file_info$[ebp+32], 0
  002df	76 33		 jbe	 SHORT $LN22@unzlocal_G@2
  002e1	83 7d 18 00	 cmp	 DWORD PTR _fileNameBufferSize$[ebp], 0
  002e5	76 2d		 jbe	 SHORT $LN22@unzlocal_G@2

; 676  :             if (ZREAD(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  002e7	8b 45 98	 mov	 eax, DWORD PTR _uSizeRead$79536[ebp]
  002ea	50		 push	 eax
  002eb	8b 4d 14	 mov	 ecx, DWORD PTR _szFileName$[ebp]
  002ee	51		 push	 ecx
  002ef	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002f2	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  002f5	50		 push	 eax
  002f6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002f9	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  002fc	52		 push	 edx
  002fd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00300	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00303	ff d1		 call	 ecx
  00305	83 c4 10	 add	 esp, 16			; 00000010H
  00308	3b 45 98	 cmp	 eax, DWORD PTR _uSizeRead$79536[ebp]
  0030b	74 07		 je	 SHORT $LN22@unzlocal_G@2

; 677  :                 err=UNZ_ERRNO;

  0030d	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN22@unzlocal_G@2:

; 678  :         lSeek -= uSizeRead;

  00314	8b 55 a4	 mov	 edx, DWORD PTR _lSeek$[ebp]
  00317	2b 55 98	 sub	 edx, DWORD PTR _uSizeRead$79536[ebp]
  0031a	89 55 a4	 mov	 DWORD PTR _lSeek$[ebp], edx
$LN25@unzlocal_G@2:

; 679  :     }
; 680  : 
; 681  : 
; 682  :     if ((err==UNZ_OK) && (extraField!=NULL))

  0031d	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  00321	0f 85 a0 00 00
	00		 jne	 $LN20@unzlocal_G@2
  00327	83 7d 1c 00	 cmp	 DWORD PTR _extraField$[ebp], 0
  0032b	0f 84 96 00 00
	00		 je	 $LN20@unzlocal_G@2

; 683  :     {
; 684  :         uLong uSizeRead ;
; 685  :         if (file_info.size_file_extra<extraFieldBufferSize)

  00331	8b 45 cc	 mov	 eax, DWORD PTR _file_info$[ebp+36]
  00334	3b 45 20	 cmp	 eax, DWORD PTR _extraFieldBufferSize$[ebp]
  00337	73 08		 jae	 SHORT $LN19@unzlocal_G@2

; 686  :             uSizeRead = file_info.size_file_extra;

  00339	8b 4d cc	 mov	 ecx, DWORD PTR _file_info$[ebp+36]
  0033c	89 4d 94	 mov	 DWORD PTR _uSizeRead$79543[ebp], ecx

; 687  :         else

  0033f	eb 06		 jmp	 SHORT $LN18@unzlocal_G@2
$LN19@unzlocal_G@2:

; 688  :             uSizeRead = extraFieldBufferSize;

  00341	8b 55 20	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  00344	89 55 94	 mov	 DWORD PTR _uSizeRead$79543[ebp], edx
$LN18@unzlocal_G@2:

; 689  : 
; 690  :         if (lSeek!=0)

  00347	83 7d a4 00	 cmp	 DWORD PTR _lSeek$[ebp], 0
  0034b	74 33		 je	 SHORT $LN17@unzlocal_G@2

; 691  :             if (ZSEEK(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  0034d	6a 01		 push	 1
  0034f	8b 45 a4	 mov	 eax, DWORD PTR _lSeek$[ebp]
  00352	50		 push	 eax
  00353	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00356	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00359	52		 push	 edx
  0035a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0035d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00360	51		 push	 ecx
  00361	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00364	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00367	ff d0		 call	 eax
  00369	83 c4 10	 add	 esp, 16			; 00000010H
  0036c	85 c0		 test	 eax, eax
  0036e	75 09		 jne	 SHORT $LN16@unzlocal_G@2

; 692  :                 lSeek=0;

  00370	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 693  :             else

  00377	eb 07		 jmp	 SHORT $LN17@unzlocal_G@2
$LN16@unzlocal_G@2:

; 694  :                 err=UNZ_ERRNO;

  00379	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN17@unzlocal_G@2:

; 695  :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00380	83 7d cc 00	 cmp	 DWORD PTR _file_info$[ebp+36], 0
  00384	76 33		 jbe	 SHORT $LN14@unzlocal_G@2
  00386	83 7d 20 00	 cmp	 DWORD PTR _extraFieldBufferSize$[ebp], 0
  0038a	76 2d		 jbe	 SHORT $LN14@unzlocal_G@2

; 696  :             if (ZREAD(s->z_filefunc, s->filestream,extraField,uSizeRead)!=uSizeRead)

  0038c	8b 4d 94	 mov	 ecx, DWORD PTR _uSizeRead$79543[ebp]
  0038f	51		 push	 ecx
  00390	8b 55 1c	 mov	 edx, DWORD PTR _extraField$[ebp]
  00393	52		 push	 edx
  00394	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00397	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0039a	51		 push	 ecx
  0039b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0039e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  003a1	50		 push	 eax
  003a2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  003a5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003a8	ff d2		 call	 edx
  003aa	83 c4 10	 add	 esp, 16			; 00000010H
  003ad	3b 45 94	 cmp	 eax, DWORD PTR _uSizeRead$79543[ebp]
  003b0	74 07		 je	 SHORT $LN14@unzlocal_G@2

; 697  :                 err=UNZ_ERRNO;

  003b2	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@unzlocal_G@2:

; 698  :         lSeek += file_info.size_file_extra - uSizeRead;

  003b9	8b 45 cc	 mov	 eax, DWORD PTR _file_info$[ebp+36]
  003bc	2b 45 94	 sub	 eax, DWORD PTR _uSizeRead$79543[ebp]
  003bf	03 45 a4	 add	 eax, DWORD PTR _lSeek$[ebp]
  003c2	89 45 a4	 mov	 DWORD PTR _lSeek$[ebp], eax

; 699  :     }
; 700  :     else

  003c5	eb 09		 jmp	 SHORT $LN12@unzlocal_G@2
$LN20@unzlocal_G@2:

; 701  :         lSeek+=file_info.size_file_extra;

  003c7	8b 4d a4	 mov	 ecx, DWORD PTR _lSeek$[ebp]
  003ca	03 4d cc	 add	 ecx, DWORD PTR _file_info$[ebp+36]
  003cd	89 4d a4	 mov	 DWORD PTR _lSeek$[ebp], ecx
$LN12@unzlocal_G@2:

; 702  : 
; 703  : 
; 704  :     if ((err==UNZ_OK) && (szComment!=NULL))

  003d0	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  003d4	0f 85 a9 00 00
	00		 jne	 $LN11@unzlocal_G@2
  003da	83 7d 24 00	 cmp	 DWORD PTR _szComment$[ebp], 0
  003de	0f 84 9f 00 00
	00		 je	 $LN11@unzlocal_G@2

; 705  :     {
; 706  :         uLong uSizeRead ;
; 707  :         if (file_info.size_file_comment<commentBufferSize)

  003e4	8b 55 d0	 mov	 edx, DWORD PTR _file_info$[ebp+40]
  003e7	3b 55 28	 cmp	 edx, DWORD PTR _commentBufferSize$[ebp]
  003ea	73 11		 jae	 SHORT $LN10@unzlocal_G@2

; 708  :         {
; 709  :             *(szComment+file_info.size_file_comment)='\0';

  003ec	8b 45 24	 mov	 eax, DWORD PTR _szComment$[ebp]
  003ef	03 45 d0	 add	 eax, DWORD PTR _file_info$[ebp+40]
  003f2	c6 00 00	 mov	 BYTE PTR [eax], 0

; 710  :             uSizeRead = file_info.size_file_comment;

  003f5	8b 4d d0	 mov	 ecx, DWORD PTR _file_info$[ebp+40]
  003f8	89 4d 90	 mov	 DWORD PTR _uSizeRead$79554[ebp], ecx

; 711  :         }
; 712  :         else

  003fb	eb 06		 jmp	 SHORT $LN9@unzlocal_G@2
$LN10@unzlocal_G@2:

; 713  :             uSizeRead = commentBufferSize;

  003fd	8b 55 28	 mov	 edx, DWORD PTR _commentBufferSize$[ebp]
  00400	89 55 90	 mov	 DWORD PTR _uSizeRead$79554[ebp], edx
$LN9@unzlocal_G@2:

; 714  : 
; 715  :         if (lSeek!=0)

  00403	83 7d a4 00	 cmp	 DWORD PTR _lSeek$[ebp], 0
  00407	74 33		 je	 SHORT $LN8@unzlocal_G@2

; 716  :             if (ZSEEK(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00409	6a 01		 push	 1
  0040b	8b 45 a4	 mov	 eax, DWORD PTR _lSeek$[ebp]
  0040e	50		 push	 eax
  0040f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00412	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00415	52		 push	 edx
  00416	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00419	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0041c	51		 push	 ecx
  0041d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00420	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00423	ff d0		 call	 eax
  00425	83 c4 10	 add	 esp, 16			; 00000010H
  00428	85 c0		 test	 eax, eax
  0042a	75 09		 jne	 SHORT $LN7@unzlocal_G@2

; 717  :                 lSeek=0;

  0042c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _lSeek$[ebp], 0

; 718  :             else

  00433	eb 07		 jmp	 SHORT $LN8@unzlocal_G@2
$LN7@unzlocal_G@2:

; 719  :                 err=UNZ_ERRNO;

  00435	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@unzlocal_G@2:

; 720  :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  0043c	83 7d d0 00	 cmp	 DWORD PTR _file_info$[ebp+40], 0
  00440	76 33		 jbe	 SHORT $LN5@unzlocal_G@2
  00442	83 7d 28 00	 cmp	 DWORD PTR _commentBufferSize$[ebp], 0
  00446	76 2d		 jbe	 SHORT $LN5@unzlocal_G@2

; 721  :             if (ZREAD(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  00448	8b 4d 90	 mov	 ecx, DWORD PTR _uSizeRead$79554[ebp]
  0044b	51		 push	 ecx
  0044c	8b 55 24	 mov	 edx, DWORD PTR _szComment$[ebp]
  0044f	52		 push	 edx
  00450	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00453	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00456	51		 push	 ecx
  00457	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0045a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0045d	50		 push	 eax
  0045e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00461	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00464	ff d2		 call	 edx
  00466	83 c4 10	 add	 esp, 16			; 00000010H
  00469	3b 45 90	 cmp	 eax, DWORD PTR _uSizeRead$79554[ebp]
  0046c	74 07		 je	 SHORT $LN5@unzlocal_G@2

; 722  :                 err=UNZ_ERRNO;

  0046e	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@unzlocal_G@2:

; 723  :         lSeek+=file_info.size_file_comment - uSizeRead;

  00475	8b 45 d0	 mov	 eax, DWORD PTR _file_info$[ebp+40]
  00478	2b 45 90	 sub	 eax, DWORD PTR _uSizeRead$79554[ebp]
  0047b	03 45 a4	 add	 eax, DWORD PTR _lSeek$[ebp]
  0047e	89 45 a4	 mov	 DWORD PTR _lSeek$[ebp], eax

; 724  :     }
; 725  :     else

  00481	eb 09		 jmp	 SHORT $LN3@unzlocal_G@2
$LN11@unzlocal_G@2:

; 726  :         lSeek+=file_info.size_file_comment;

  00483	8b 4d a4	 mov	 ecx, DWORD PTR _lSeek$[ebp]
  00486	03 4d d0	 add	 ecx, DWORD PTR _file_info$[ebp+40]
  00489	89 4d a4	 mov	 DWORD PTR _lSeek$[ebp], ecx
$LN3@unzlocal_G@2:

; 727  : 
; 728  :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  0048c	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  00490	75 13		 jne	 SHORT $LN2@unzlocal_G@2
  00492	83 7d 0c 00	 cmp	 DWORD PTR _pfile_info$[ebp], 0
  00496	74 0d		 je	 SHORT $LN2@unzlocal_G@2

; 729  :         *pfile_info=file_info;

  00498	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0049d	8d 75 a8	 lea	 esi, DWORD PTR _file_info$[ebp]
  004a0	8b 7d 0c	 mov	 edi, DWORD PTR _pfile_info$[ebp]
  004a3	f3 a5		 rep movsd
$LN2@unzlocal_G@2:

; 730  : 
; 731  :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  004a5	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  004a9	75 0e		 jne	 SHORT $LN1@unzlocal_G@2
  004ab	83 7d 10 00	 cmp	 DWORD PTR _pfile_info_internal$[ebp], 0
  004af	74 08		 je	 SHORT $LN1@unzlocal_G@2

; 732  :         *pfile_info_internal=file_info_internal;

  004b1	8b 55 10	 mov	 edx, DWORD PTR _pfile_info_internal$[ebp]
  004b4	8b 45 a0	 mov	 eax, DWORD PTR _file_info_internal$[ebp]
  004b7	89 02		 mov	 DWORD PTR [edx], eax
$LN1@unzlocal_G@2:

; 733  : 
; 734  :     return err;

  004b9	8b 45 9c	 mov	 eax, DWORD PTR _err$[ebp]
$LN47@unzlocal_G@2:

; 735  : }

  004bc	5f		 pop	 edi
  004bd	5e		 pop	 esi
  004be	8b e5		 mov	 esp, ebp
  004c0	5d		 pop	 ebp
  004c1	c3		 ret	 0
_unzlocal_GetCurrentFileInfoInternal ENDP
PUBLIC	_unzOpenCurrentFile3@20
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFile3@20
_TEXT	SEGMENT
tv94 = -44						; size = 4
_i$79749 = -40						; size = 4
_source$ = -36						; size = 12
_offset_local_extrafield$ = -24				; size = 4
_err$ = -20						; size = 4
_iSizeVar$ = -16					; size = 4
_pfile_in_zip_read_info$ = -12				; size = 4
_size_local_extrafield$ = -8				; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_password$ = 24						; size = 4
_unzOpenCurrentFile3@20 PROC				; COMDAT

; 1053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1054 :     int err=UNZ_OK;

  00008	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 1055 :     uInt iSizeVar;
; 1056 :     unz_s* s;
; 1057 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1058 :     uLong offset_local_extrafield;  /* offset of the local extra field */
; 1059 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1060 : #    ifndef NOUNCRYPT
; 1061 :     char source[12];
; 1062 : #    else
; 1063 :     if (password != NULL)
; 1064 :         return UNZ_PARAMERROR;
; 1065 : #    endif
; 1066 : 
; 1067 :     if (file==NULL)

  0000f	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00013	75 0a		 jne	 SHORT $LN25@unzOpenCur

; 1068 :         return UNZ_PARAMERROR;

  00015	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0001a	e9 be 03 00 00	 jmp	 $LN26@unzOpenCur
$LN25@unzOpenCur:

; 1069 :     s=(unz_s*)file;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00022	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1070 :     if (!s->current_file_ok)

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00028	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0002c	75 0a		 jne	 SHORT $LN24@unzOpenCur

; 1071 :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 a5 03 00 00	 jmp	 $LN26@unzOpenCur
$LN24@unzOpenCur:

; 1072 : 
; 1073 :     if (s->pfile_in_zip_read != NULL)

  00038	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0003b	83 ba 9c 00 00
	00 00		 cmp	 DWORD PTR [edx+156], 0
  00042	74 09		 je	 SHORT $LN23@unzOpenCur

; 1074 :         unzCloseCurrentFile(file);

  00044	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _unzCloseCurrentFile@4
$LN23@unzOpenCur:

; 1075 : 
; 1076 :     if (unzlocal_CheckCurrentFileCoherencyHeader(s,&iSizeVar,
; 1077 :                 &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  0004d	8d 4d f8	 lea	 ecx, DWORD PTR _size_local_extrafield$[ebp]
  00050	51		 push	 ecx
  00051	8d 55 e8	 lea	 edx, DWORD PTR _offset_local_extrafield$[ebp]
  00054	52		 push	 edx
  00055	8d 45 f0	 lea	 eax, DWORD PTR _iSizeVar$[ebp]
  00058	50		 push	 eax
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 _unzlocal_CheckCurrentFileCoherencyHeader
  00062	83 c4 10	 add	 esp, 16			; 00000010H
  00065	85 c0		 test	 eax, eax
  00067	74 0a		 je	 SHORT $LN22@unzOpenCur

; 1078 :         return UNZ_BADZIPFILE;

  00069	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H
  0006e	e9 6a 03 00 00	 jmp	 $LN26@unzOpenCur
$LN22@unzOpenCur:

; 1079 : 
; 1080 :     pfile_in_zip_read_info = (file_in_zip_read_info_s*)
; 1081 :                                         ALLOC(sizeof(file_in_zip_read_info_s));

  00073	68 90 00 00 00	 push	 144			; 00000090H
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0007e	83 c4 04	 add	 esp, 4
  00081	89 45 f4	 mov	 DWORD PTR _pfile_in_zip_read_info$[ebp], eax

; 1082 :     if (pfile_in_zip_read_info==NULL)

  00084	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00088	75 0a		 jne	 SHORT $LN21@unzOpenCur

; 1083 :         return UNZ_INTERNALERROR;

  0008a	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  0008f	e9 49 03 00 00	 jmp	 $LN26@unzOpenCur
$LN21@unzOpenCur:

; 1084 : 
; 1085 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  00094	68 00 40 00 00	 push	 16384			; 00004000H
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0009f	83 c4 04	 add	 esp, 4
  000a2	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000a5	89 02		 mov	 DWORD PTR [edx], eax

; 1086 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  000a7	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000aa	8b 4d e8	 mov	 ecx, DWORD PTR _offset_local_extrafield$[ebp]
  000ad	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 1087 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;

  000b0	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _size_local_extrafield$[ebp]
  000b6	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 1088 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  000b9	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000bc	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 1089 :     pfile_in_zip_read_info->raw=raw;

  000c3	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000c6	8b 45 14	 mov	 eax, DWORD PTR _raw$[ebp]
  000c9	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 1090 : 
; 1091 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  000cf	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000d2	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000d5	75 1d		 jne	 SHORT $LN20@unzOpenCur

; 1092 :     {
; 1093 :         TRYFREE(pfile_in_zip_read_info);

  000d7	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  000db	74 0d		 je	 SHORT $LN19@unzOpenCur
  000dd	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000e0	52		 push	 edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000e7	83 c4 04	 add	 esp, 4
$LN19@unzOpenCur:

; 1094 :         return UNZ_INTERNALERROR;

  000ea	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000ef	e9 e9 02 00 00	 jmp	 $LN26@unzOpenCur
$LN20@unzOpenCur:

; 1095 :     }
; 1096 : 
; 1097 :     pfile_in_zip_read_info->stream_initialised=0;

  000f4	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  000f7	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 1098 : 
; 1099 :     if (method!=NULL)

  000fe	83 7d 0c 00	 cmp	 DWORD PTR _method$[ebp], 0
  00102	74 0b		 je	 SHORT $LN18@unzOpenCur

; 1100 :         *method = (int)s->cur_file_info.compression_method;

  00104	8b 4d 0c	 mov	 ecx, DWORD PTR _method$[ebp]
  00107	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0010a	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0010d	89 01		 mov	 DWORD PTR [ecx], eax
$LN18@unzOpenCur:

; 1101 : 
; 1102 :     if (level!=NULL)

  0010f	83 7d 10 00	 cmp	 DWORD PTR _level$[ebp], 0
  00113	74 48		 je	 SHORT $LN17@unzOpenCur

; 1103 :     {
; 1104 :         *level = 6;

  00115	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  00118	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6

; 1105 :         switch (s->cur_file_info.flag & 0x06)

  0011e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00121	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00124	83 e0 06	 and	 eax, 6
  00127	89 45 d4	 mov	 DWORD PTR tv94[ebp], eax
  0012a	83 7d d4 02	 cmp	 DWORD PTR tv94[ebp], 2
  0012e	74 24		 je	 SHORT $LN12@unzOpenCur
  00130	83 7d d4 04	 cmp	 DWORD PTR tv94[ebp], 4
  00134	74 13		 je	 SHORT $LN13@unzOpenCur
  00136	83 7d d4 06	 cmp	 DWORD PTR tv94[ebp], 6
  0013a	74 02		 je	 SHORT $LN14@unzOpenCur
  0013c	eb 1f		 jmp	 SHORT $LN17@unzOpenCur
$LN14@unzOpenCur:

; 1106 :         {
; 1107 :           case 6 : *level = 1; break;

  0013e	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  00141	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00147	eb 14		 jmp	 SHORT $LN17@unzOpenCur
$LN13@unzOpenCur:

; 1108 :           case 4 : *level = 2; break;

  00149	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  0014c	c7 02 02 00 00
	00		 mov	 DWORD PTR [edx], 2
  00152	eb 09		 jmp	 SHORT $LN17@unzOpenCur
$LN12@unzOpenCur:

; 1109 :           case 2 : *level = 9; break;

  00154	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  00157	c7 00 09 00 00
	00		 mov	 DWORD PTR [eax], 9
$LN17@unzOpenCur:

; 1110 :         }
; 1111 :     }
; 1112 : 
; 1113 :     if ((s->cur_file_info.compression_method!=0) &&
; 1114 :         (s->cur_file_info.compression_method!=Z_DEFLATED))

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00160	83 79 54 00	 cmp	 DWORD PTR [ecx+84], 0
  00164	74 10		 je	 SHORT $LN11@unzOpenCur
  00166	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00169	83 7a 54 08	 cmp	 DWORD PTR [edx+84], 8
  0016d	74 07		 je	 SHORT $LN11@unzOpenCur

; 1115 :         err=UNZ_BADZIPFILE;

  0016f	c7 45 ec 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN11@unzOpenCur:

; 1116 : 
; 1117 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  00176	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00179	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0017c	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0017f	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 1118 :     pfile_in_zip_read_info->crc32=0;

  00182	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00185	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1119 :     pfile_in_zip_read_info->compression_method =
; 1120 :             s->cur_file_info.compression_method;

  0018c	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0018f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00192	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00195	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 1121 :     pfile_in_zip_read_info->filestream=s->filestream;

  0019b	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0019e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001a1	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001a4	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 1122 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  001aa	8b 75 fc	 mov	 esi, DWORD PTR _s$[ebp]
  001ad	8b 7d f4	 mov	 edi, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001b0	83 c7 60	 add	 edi, 96			; 00000060H
  001b3	b9 08 00 00 00	 mov	 ecx, 8
  001b8	f3 a5		 rep movsd

; 1123 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  001ba	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001bd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001c0	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001c3	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 1124 : 
; 1125 :     pfile_in_zip_read_info->stream.total_out = 0;

  001c9	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001cc	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 1126 : 
; 1127 :     if ((s->cur_file_info.compression_method==Z_DEFLATED) &&
; 1128 :         (!raw))

  001d3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001d6	83 7a 54 08	 cmp	 DWORD PTR [edx+84], 8
  001da	75 7d		 jne	 SHORT $LN10@unzOpenCur
  001dc	83 7d 14 00	 cmp	 DWORD PTR _raw$[ebp], 0
  001e0	75 77		 jne	 SHORT $LN10@unzOpenCur

; 1129 :     {
; 1130 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;

  001e2	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001e5	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 1131 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;

  001ec	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001ef	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 1132 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;

  001f6	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  001f9	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 1133 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;

  00200	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00203	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1134 :       pfile_in_zip_read_info->stream.avail_in = 0;

  0020a	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0020d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1135 : 
; 1136 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  00214	6a 38		 push	 56			; 00000038H
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_05GDHACFMB@1?42?43?$AA@
  0021b	6a f1		 push	 -15			; fffffff1H
  0021d	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00220	83 c2 04	 add	 edx, 4
  00223	52		 push	 edx
  00224	e8 00 00 00 00	 call	 _inflateInit2_@16
  00229	89 45 ec	 mov	 DWORD PTR _err$[ebp], eax

; 1137 :       if (err == Z_OK)

  0022c	83 7d ec 00	 cmp	 DWORD PTR _err$[ebp], 0
  00230	75 0c		 jne	 SHORT $LN9@unzOpenCur

; 1138 :         pfile_in_zip_read_info->stream_initialised=1;

  00232	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00235	c7 40 40 01 00
	00 00		 mov	 DWORD PTR [eax+64], 1

; 1139 :       else

  0023c	eb 1b		 jmp	 SHORT $LN10@unzOpenCur
$LN9@unzOpenCur:

; 1140 :       {
; 1141 :         TRYFREE(pfile_in_zip_read_info);

  0023e	83 7d f4 00	 cmp	 DWORD PTR _pfile_in_zip_read_info$[ebp], 0
  00242	74 0d		 je	 SHORT $LN7@unzOpenCur
  00244	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00247	51		 push	 ecx
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0024e	83 c4 04	 add	 esp, 4
$LN7@unzOpenCur:

; 1142 :         return err;

  00251	8b 45 ec	 mov	 eax, DWORD PTR _err$[ebp]
  00254	e9 84 01 00 00	 jmp	 $LN26@unzOpenCur
$LN10@unzOpenCur:

; 1143 :       }
; 1144 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1145 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1146 :          * after the compressed stream in order to complete decompression and
; 1147 :          * return Z_STREAM_END.
; 1148 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1149 :          * size of both compressed and uncompressed data
; 1150 :          */
; 1151 :     }
; 1152 :     pfile_in_zip_read_info->rest_read_compressed =
; 1153 :             s->cur_file_info.compressed_size ;

  00259	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0025c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0025f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00262	89 4a 58	 mov	 DWORD PTR [edx+88], ecx

; 1154 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1155 :             s->cur_file_info.uncompressed_size ;

  00265	8b 55 f4	 mov	 edx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00268	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0026b	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0026e	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1156 : 
; 1157 : 
; 1158 :     pfile_in_zip_read_info->pos_in_zipfile =
; 1159 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1160 :               iSizeVar;

  00271	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00274	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0027a	8b 4d f0	 mov	 ecx, DWORD PTR _iSizeVar$[ebp]
  0027d	8d 54 08 1e	 lea	 edx, DWORD PTR [eax+ecx+30]
  00281	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00284	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 1161 : 
; 1162 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  00287	8b 4d f4	 mov	 ecx, DWORD PTR _pfile_in_zip_read_info$[ebp]
  0028a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1163 : 
; 1164 :     s->pfile_in_zip_read = pfile_in_zip_read_info;

  00291	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00294	8b 45 f4	 mov	 eax, DWORD PTR _pfile_in_zip_read_info$[ebp]
  00297	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 1165 : 
; 1166 : #    ifndef NOUNCRYPT
; 1167 :     if (password != NULL)

  0029d	83 7d 18 00	 cmp	 DWORD PTR _password$[ebp], 0
  002a1	0f 84 34 01 00
	00		 je	 $LN6@unzOpenCur

; 1168 :     {
; 1169 :         int i;
; 1170 :         s->pcrc_32_tab = get_crc_table();

  002a7	e8 00 00 00 00	 call	 _get_crc_table@0
  002ac	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002af	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 1171 :         init_keys(password,s->keys,s->pcrc_32_tab);

  002b5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002b8	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  002be	50		 push	 eax
  002bf	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002c2	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  002c8	51		 push	 ecx
  002c9	8b 55 18	 mov	 edx, DWORD PTR _password$[ebp]
  002cc	52		 push	 edx
  002cd	e8 00 00 00 00	 call	 _init_keys
  002d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1172 :         if (ZSEEK(s->z_filefunc, s->filestream,
; 1173 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1174 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1175 :                   SEEK_SET)!=0)

  002d5	6a 00		 push	 0
  002d7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002da	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  002e0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002e3	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  002e9	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  002ec	03 88 88 00 00
	00		 add	 ecx, DWORD PTR [eax+136]
  002f2	51		 push	 ecx
  002f3	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002f6	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  002f9	50		 push	 eax
  002fa	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002fd	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00300	52		 push	 edx
  00301	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00304	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00307	ff d1		 call	 ecx
  00309	83 c4 10	 add	 esp, 16			; 00000010H
  0030c	85 c0		 test	 eax, eax
  0030e	74 0a		 je	 SHORT $LN5@unzOpenCur

; 1176 :             return UNZ_INTERNALERROR;

  00310	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00315	e9 c3 00 00 00	 jmp	 $LN26@unzOpenCur
$LN5@unzOpenCur:

; 1177 :         if(ZREAD(s->z_filefunc, s->filestream,source, 12)<12)

  0031a	6a 0c		 push	 12			; 0000000cH
  0031c	8d 55 dc	 lea	 edx, DWORD PTR _source$[ebp]
  0031f	52		 push	 edx
  00320	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00323	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00326	51		 push	 ecx
  00327	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0032a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0032d	50		 push	 eax
  0032e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00331	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00334	ff d2		 call	 edx
  00336	83 c4 10	 add	 esp, 16			; 00000010H
  00339	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0033c	73 0a		 jae	 SHORT $LN4@unzOpenCur

; 1178 :             return UNZ_INTERNALERROR;

  0033e	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00343	e9 95 00 00 00	 jmp	 $LN26@unzOpenCur
$LN4@unzOpenCur:

; 1179 : 
; 1180 :         for (i = 0; i<12; i++)

  00348	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$79749[ebp], 0
  0034f	eb 09		 jmp	 SHORT $LN3@unzOpenCur
$LN2@unzOpenCur:
  00351	8b 45 d8	 mov	 eax, DWORD PTR _i$79749[ebp]
  00354	83 c0 01	 add	 eax, 1
  00357	89 45 d8	 mov	 DWORD PTR _i$79749[ebp], eax
$LN3@unzOpenCur:
  0035a	83 7d d8 0c	 cmp	 DWORD PTR _i$79749[ebp], 12 ; 0000000cH
  0035e	7d 53		 jge	 SHORT $LN1@unzOpenCur

; 1181 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);

  00360	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00363	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00369	52		 push	 edx
  0036a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0036d	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 _decrypt_byte
  00378	83 c4 08	 add	 esp, 8
  0037b	8b 4d d8	 mov	 ecx, DWORD PTR _i$79749[ebp]
  0037e	0f be 54 0d dc	 movsx	 edx, BYTE PTR _source$[ebp+ecx]
  00383	33 d0		 xor	 edx, eax
  00385	8b 45 d8	 mov	 eax, DWORD PTR _i$79749[ebp]
  00388	88 54 05 dc	 mov	 BYTE PTR _source$[ebp+eax], dl
  0038c	8b 4d d8	 mov	 ecx, DWORD PTR _i$79749[ebp]
  0038f	0f be 54 0d dc	 movsx	 edx, BYTE PTR _source$[ebp+ecx]
  00394	52		 push	 edx
  00395	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00398	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0039e	51		 push	 ecx
  0039f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003a2	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  003a8	52		 push	 edx
  003a9	e8 00 00 00 00	 call	 _update_keys
  003ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b1	eb 9e		 jmp	 SHORT $LN2@unzOpenCur
$LN1@unzOpenCur:

; 1182 : 
; 1183 :         s->pfile_in_zip_read->pos_in_zipfile+=12;

  003b3	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003b6	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  003bc	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  003bf	83 c2 0c	 add	 edx, 12			; 0000000cH
  003c2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003c5	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  003cb	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 1184 :         s->encrypted=1;

  003ce	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003d1	c7 82 a0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+160], 1
$LN6@unzOpenCur:

; 1185 :     }
; 1186 : #    endif
; 1187 : 
; 1188 : 
; 1189 :     return UNZ_OK;

  003db	33 c0		 xor	 eax, eax
$LN26@unzOpenCur:

; 1190 : }

  003dd	5f		 pop	 edi
  003de	5e		 pop	 esi
  003df	8b e5		 mov	 esp, ebp
  003e1	5d		 pop	 ebp
  003e2	c2 14 00	 ret	 20			; 00000014H
_unzOpenCurrentFile3@20 ENDP
_TEXT	ENDS
PUBLIC	_unzGoToFilePos@8
; Function compile flags: /Odtp
;	COMDAT _unzGoToFilePos@8
_TEXT	SEGMENT
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_file_pos$ = 12						; size = 4
_unzGoToFilePos@8 PROC					; COMDAT

; 924  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 925  :     unz_s* s;
; 926  :     int err;
; 927  : 
; 928  :     if (file==NULL || file_pos==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	74 06		 je	 SHORT $LN1@unzGoToFil
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _file_pos$[ebp], 0
  00010	75 07		 jne	 SHORT $LN2@unzGoToFil
$LN1@unzGoToFil:

; 929  :         return UNZ_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00017	eb 5b		 jmp	 SHORT $LN3@unzGoToFil
$LN2@unzGoToFil:

; 930  :     s=(unz_s*)file;

  00019	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001c	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 931  : 
; 932  :     /* jump to the right spot */
; 933  :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 934  :     s->num_file           = file_pos->num_of_file;

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _file_pos$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 935  : 
; 936  :     /* set the current file */
; 937  :     err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 938  :                                                &s->cur_file_info_internal,
; 939  :                                                NULL,0,NULL,0,NULL,0);

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00045	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0004b	51		 push	 ecx
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0004f	83 c2 48	 add	 edx, 72			; 00000048H
  00052	52		 push	 edx
  00053	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _unzlocal_GetCurrentFileInfoInternal
  0005c	83 c4 24	 add	 esp, 36			; 00000024H
  0005f	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 940  :     /* return results */
; 941  :     s->current_file_ok = (err == UNZ_OK);

  00062	33 c9		 xor	 ecx, ecx
  00064	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00068	0f 94 c1	 sete	 cl
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006e	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 942  :     return err;

  00071	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN3@unzGoToFil:

; 943  : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
_unzGoToFilePos@8 ENDP
_TEXT	ENDS
PUBLIC	_unzGoToNextFile@4
; Function compile flags: /Odtp
;	COMDAT _unzGoToNextFile@4
_TEXT	SEGMENT
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGoToNextFile@4 PROC					; COMDAT

; 792  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 793  :     unz_s* s;
; 794  :     int err;
; 795  : 
; 796  :     if (file==NULL)

  00006	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000a	75 0a		 jne	 SHORT $LN4@unzGoToNex

; 797  :         return UNZ_PARAMERROR;

  0000c	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00011	e9 ab 00 00 00	 jmp	 $LN5@unzGoToNex
$LN4@unzGoToNex:

; 798  :     s=(unz_s*)file;

  00016	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 799  :     if (!s->current_file_ok)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0001f	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00023	75 0a		 jne	 SHORT $LN3@unzGoToNex

; 800  :         return UNZ_END_OF_LIST_OF_FILE;

  00025	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0002a	e9 92 00 00 00	 jmp	 $LN5@unzGoToNex
$LN3@unzGoToNex:

; 801  :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00032	81 7a 24 ff ff
	00 00		 cmp	 DWORD PTR [edx+36], 65535 ; 0000ffffH
  00039	74 18		 je	 SHORT $LN2@unzGoToNex

; 802  :       if (s->num_file+1==s->gi.number_entry)

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0003e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00041	83 c1 01	 add	 ecx, 1
  00044	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00047	3b 4a 24	 cmp	 ecx, DWORD PTR [edx+36]
  0004a	75 07		 jne	 SHORT $LN2@unzGoToNex

; 803  :         return UNZ_END_OF_LIST_OF_FILE;

  0004c	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00051	eb 6e		 jmp	 SHORT $LN5@unzGoToNex
$LN2@unzGoToNex:

; 804  : 
; 805  :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +
; 806  :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00056	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00059	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0005c	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0005f	8d 4c 01 2e	 lea	 ecx, DWORD PTR [ecx+eax+46]
  00063	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00066	03 4a 70	 add	 ecx, DWORD PTR [edx+112]
  00069	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0006c	03 48 34	 add	 ecx, DWORD PTR [eax+52]
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00072	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 807  :     s->num_file++;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00078	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00081	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 808  :     err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 809  :                                                &s->cur_file_info_internal,
; 810  :                                                NULL,0,NULL,0,NULL,0);

  00084	6a 00		 push	 0
  00086	6a 00		 push	 0
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00093	05 98 00 00 00	 add	 eax, 152		; 00000098H
  00098	50		 push	 eax
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0009c	83 c1 48	 add	 ecx, 72			; 00000048H
  0009f	51		 push	 ecx
  000a0	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 _unzlocal_GetCurrentFileInfoInternal
  000a9	83 c4 24	 add	 esp, 36			; 00000024H
  000ac	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 811  :     s->current_file_ok = (err == UNZ_OK);

  000af	33 c0		 xor	 eax, eax
  000b1	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  000b5	0f 94 c0	 sete	 al
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000bb	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 812  :     return err;

  000be	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN5@unzGoToNex:

; 813  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
_unzGoToNextFile@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGoToFirstFile@4
; Function compile flags: /Odtp
;	COMDAT _unzGoToFirstFile@4
_TEXT	SEGMENT
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_file$ = 8						; size = 4
_unzGoToFirstFile@4 PROC				; COMDAT

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 771  :     int err=UNZ_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 772  :     unz_s* s;
; 773  :     if (file==NULL)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  00011	75 07		 jne	 SHORT $LN1@unzGoToFir

; 774  :         return UNZ_PARAMERROR;

  00013	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00018	eb 5a		 jmp	 SHORT $LN2@unzGoToFir
$LN1@unzGoToFir:

; 775  :     s=(unz_s*)file;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0001d	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 776  :     s->pos_in_central_dir=s->offset_central_dir;

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00023	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00026	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00029	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 777  :     s->num_file=0;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0002f	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 778  :     err=unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 779  :                                              &s->cur_file_info_internal,
; 780  :                                              NULL,0,NULL,0,NULL,0);

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00045	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  0004b	52		 push	 edx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004f	83 c0 48	 add	 eax, 72			; 00000048H
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _unzlocal_GetCurrentFileInfoInternal
  0005c	83 c4 24	 add	 esp, 36			; 00000024H
  0005f	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 781  :     s->current_file_ok = (err == UNZ_OK);

  00062	33 d2		 xor	 edx, edx
  00064	83 7d f8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00068	0f 94 c2	 sete	 dl
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0006e	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 782  :     return err;

  00071	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN2@unzGoToFir:

; 783  : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_unzGoToFirstFile@4 ENDP
_TEXT	ENDS
PUBLIC	_unzGetCurrentFileInfo@32
; Function compile flags: /Odtp
;	COMDAT _unzGetCurrentFileInfo@32
_TEXT	SEGMENT
_file$ = 8						; size = 4
_pfile_info$ = 12					; size = 4
_szFileName$ = 16					; size = 4
_fileNameBufferSize$ = 20				; size = 4
_extraField$ = 24					; size = 4
_extraFieldBufferSize$ = 28				; size = 4
_szComment$ = 32					; size = 4
_commentBufferSize$ = 36				; size = 4
_unzGetCurrentFileInfo@32 PROC				; COMDAT

; 757  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 758  :     return unzlocal_GetCurrentFileInfoInternal(file,pfile_info,NULL,
; 759  :                                                 szFileName,fileNameBufferSize,
; 760  :                                                 extraField,extraFieldBufferSize,
; 761  :                                                 szComment,commentBufferSize);

  00003	8b 45 24	 mov	 eax, DWORD PTR _commentBufferSize$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 20	 mov	 ecx, DWORD PTR _szComment$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 1c	 mov	 edx, DWORD PTR _extraFieldBufferSize$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 18	 mov	 eax, DWORD PTR _extraField$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _fileNameBufferSize$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 10	 mov	 edx, DWORD PTR _szFileName$[ebp]
  0001a	52		 push	 edx
  0001b	6a 00		 push	 0
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _pfile_info$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _unzlocal_GetCurrentFileInfoInternal
  0002a	83 c4 24	 add	 esp, 36			; 00000024H

; 762  : }

  0002d	5d		 pop	 ebp
  0002e	c2 20 00	 ret	 32			; 00000020H
_unzGetCurrentFileInfo@32 ENDP
_TEXT	ENDS
PUBLIC	_unzOpen2@8
; Function compile flags: /Odtp
;	COMDAT _unzOpen2@8
_TEXT	SEGMENT
_central_pos$ = -212					; size = 4
_us$ = -208						; size = 180
_number_disk_with_CD$ = -24				; size = 4
_number_entry_CD$ = -20					; size = 4
_err$ = -16						; size = 4
_uL$ = -12						; size = 4
_s$ = -8						; size = 4
_number_disk$ = -4					; size = 4
_path$ = 8						; size = 4
_pzlib_filefunc_def$ = 12				; size = 4
_unzOpen2@8 PROC					; COMDAT

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 401  :     unz_s us;
; 402  :     unz_s *s;
; 403  :     uLong central_pos,uL;
; 404  : 
; 405  :     uLong number_disk;          /* number of the current dist, used for
; 406  :                                    spaning ZIP, unsupported, always 0*/
; 407  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 408  :                                    for spaning ZIP, unsupported, always 0*/
; 409  :     uLong number_entry_CD;      /* total number of entries in
; 410  :                                    the central dir
; 411  :                                    (same than number_entry on nospan) */
; 412  : 
; 413  :     int err=UNZ_OK;

  0000b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 414  : 
; 415  :     if (unz_copyright[0]!=' ')

  00012	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR _unz_copyright
  00019	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001c	74 07		 je	 SHORT $LN18@unzOpen2

; 416  :         return NULL;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 9f 02 00 00	 jmp	 $LN19@unzOpen2
$LN18@unzOpen2:

; 417  : 
; 418  :     if (pzlib_filefunc_def==NULL)

  00025	83 7d 0c 00	 cmp	 DWORD PTR _pzlib_filefunc_def$[ebp], 0
  00029	75 11		 jne	 SHORT $LN17@unzOpen2

; 419  :         fill_fopen_filefunc(&us.z_filefunc);

  0002b	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _fill_fopen_filefunc
  00037	83 c4 04	 add	 esp, 4

; 420  :     else

  0003a	eb 10		 jmp	 SHORT $LN16@unzOpen2
$LN17@unzOpen2:

; 421  :         us.z_filefunc = *pzlib_filefunc_def;

  0003c	8b 75 0c	 mov	 esi, DWORD PTR _pzlib_filefunc_def$[ebp]
  0003f	b9 08 00 00 00	 mov	 ecx, 8
  00044	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR _us$[ebp]
  0004a	f3 a5		 rep movsd
$LN16@unzOpen2:

; 422  : 
; 423  :     us.filestream= (*(us.z_filefunc.zopen_file))(us.z_filefunc.opaque,
; 424  :                                                  path,
; 425  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 426  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);

  0004c	6a 05		 push	 5
  0004e	8b 55 08	 mov	 edx, DWORD PTR _path$[ebp]
  00051	52		 push	 edx
  00052	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+28]
  00058	50		 push	 eax
  00059	ff 95 30 ff ff
	ff		 call	 DWORD PTR _us$[ebp]
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 85 50 ff ff
	ff		 mov	 DWORD PTR _us$[ebp+32], eax

; 427  :     if (us.filestream==NULL)

  00068	83 bd 50 ff ff
	ff 00		 cmp	 DWORD PTR _us$[ebp+32], 0
  0006f	75 07		 jne	 SHORT $LN15@unzOpen2

; 428  :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	e9 4c 02 00 00	 jmp	 $LN19@unzOpen2
$LN15@unzOpen2:

; 429  : 
; 430  :     central_pos = unzlocal_SearchCentralDir(&us.z_filefunc,us.filestream);

  00078	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  0007e	51		 push	 ecx
  0007f	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _unzlocal_SearchCentralDir
  0008b	83 c4 08	 add	 esp, 8
  0008e	89 85 2c ff ff
	ff		 mov	 DWORD PTR _central_pos$[ebp], eax

; 431  :     if (central_pos==0)

  00094	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _central_pos$[ebp], 0
  0009b	75 07		 jne	 SHORT $LN14@unzOpen2

; 432  :         err=UNZ_ERRNO;

  0009d	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN14@unzOpen2:

; 433  : 
; 434  :     if (ZSEEK(us.z_filefunc, us.filestream,
; 435  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000a4	6a 00		 push	 0
  000a6	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  000ac	50		 push	 eax
  000ad	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  000b3	51		 push	 ecx
  000b4	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+28]
  000ba	52		 push	 edx
  000bb	ff 95 40 ff ff
	ff		 call	 DWORD PTR _us$[ebp+16]
  000c1	83 c4 10	 add	 esp, 16			; 00000010H
  000c4	85 c0		 test	 eax, eax
  000c6	74 07		 je	 SHORT $LN13@unzOpen2

; 436  :         err=UNZ_ERRNO;

  000c8	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN13@unzOpen2:

; 437  : 
; 438  :     /* the signature, already checked */
; 439  :     if (unzlocal_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  000cf	8d 45 f4	 lea	 eax, DWORD PTR _uL$[ebp]
  000d2	50		 push	 eax
  000d3	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  000d9	51		 push	 ecx
  000da	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _unzlocal_getLong
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	85 c0		 test	 eax, eax
  000eb	74 07		 je	 SHORT $LN12@unzOpen2

; 440  :         err=UNZ_ERRNO;

  000ed	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN12@unzOpen2:

; 441  : 
; 442  :     /* number of this disk */
; 443  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  000f4	8d 45 fc	 lea	 eax, DWORD PTR _number_disk$[ebp]
  000f7	50		 push	 eax
  000f8	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  000fe	51		 push	 ecx
  000ff	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _unzlocal_getShort
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	85 c0		 test	 eax, eax
  00110	74 07		 je	 SHORT $LN11@unzOpen2

; 444  :         err=UNZ_ERRNO;

  00112	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN11@unzOpen2:

; 445  : 
; 446  :     /* number of the disk with the start of the central directory */
; 447  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00119	8d 45 e8	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  0011c	50		 push	 eax
  0011d	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  00123	51		 push	 ecx
  00124	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 _unzlocal_getShort
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH
  00133	85 c0		 test	 eax, eax
  00135	74 07		 je	 SHORT $LN10@unzOpen2

; 448  :         err=UNZ_ERRNO;

  00137	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN10@unzOpen2:

; 449  : 
; 450  :     /* total number of entries in the central dir on this disk */
; 451  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  0013e	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp+36]
  00144	50		 push	 eax
  00145	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  0014b	51		 push	 ecx
  0014c	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 _unzlocal_getShort
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015b	85 c0		 test	 eax, eax
  0015d	74 07		 je	 SHORT $LN9@unzOpen2

; 452  :         err=UNZ_ERRNO;

  0015f	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN9@unzOpen2:

; 453  : 
; 454  :     /* total number of entries in the central dir */
; 455  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  00166	8d 45 ec	 lea	 eax, DWORD PTR _number_entry_CD$[ebp]
  00169	50		 push	 eax
  0016a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+32]
  00170	51		 push	 ecx
  00171	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _us$[ebp]
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 _unzlocal_getShort
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00180	85 c0		 test	 eax, eax
  00182	74 07		 je	 SHORT $LN8@unzOpen2

; 456  :         err=UNZ_ERRNO;

  00184	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN8@unzOpen2:

; 457  : 
; 458  :     if ((number_entry_CD!=us.gi.number_entry) ||
; 459  :         (number_disk_with_CD!=0) ||
; 460  :         (number_disk!=0))

  0018b	8b 45 ec	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  0018e	3b 85 54 ff ff
	ff		 cmp	 eax, DWORD PTR _us$[ebp+36]
  00194	75 0c		 jne	 SHORT $LN6@unzOpen2
  00196	83 7d e8 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  0019a	75 06		 jne	 SHORT $LN6@unzOpen2
  0019c	83 7d fc 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  001a0	74 07		 je	 SHORT $LN7@unzOpen2
$LN6@unzOpen2:

; 461  :         err=UNZ_BADZIPFILE;

  001a2	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN7@unzOpen2:

; 462  : 
; 463  :     /* size of the central directory */
; 464  :     if (unzlocal_getLong(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  001a9	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp+64]
  001af	51		 push	 ecx
  001b0	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+32]
  001b6	52		 push	 edx
  001b7	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _unzlocal_getLong
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c6	85 c0		 test	 eax, eax
  001c8	74 07		 je	 SHORT $LN5@unzOpen2

; 465  :         err=UNZ_ERRNO;

  001ca	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN5@unzOpen2:

; 466  : 
; 467  :     /* offset of start of central directory with respect to the
; 468  :           starting disk number */
; 469  :     if (unzlocal_getLong(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  001d1	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp+68]
  001d7	51		 push	 ecx
  001d8	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+32]
  001de	52		 push	 edx
  001df	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 _unzlocal_getLong
  001eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ee	85 c0		 test	 eax, eax
  001f0	74 07		 je	 SHORT $LN4@unzOpen2

; 470  :         err=UNZ_ERRNO;

  001f2	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN4@unzOpen2:

; 471  : 
; 472  :     /* zipfile comment length */
; 473  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  001f9	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _us$[ebp+40]
  001ff	51		 push	 ecx
  00200	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+32]
  00206	52		 push	 edx
  00207	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _us$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _unzlocal_getShort
  00213	83 c4 0c	 add	 esp, 12			; 0000000cH
  00216	85 c0		 test	 eax, eax
  00218	74 07		 je	 SHORT $LN3@unzOpen2

; 474  :         err=UNZ_ERRNO;

  0021a	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$LN3@unzOpen2:

; 475  : 
; 476  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&
; 477  :         (err==UNZ_OK))

  00221	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+68]
  00227	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _us$[ebp+64]
  0022d	39 8d 2c ff ff
	ff		 cmp	 DWORD PTR _central_pos$[ebp], ecx
  00233	73 0d		 jae	 SHORT $LN2@unzOpen2
  00235	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00239	75 07		 jne	 SHORT $LN2@unzOpen2

; 478  :         err=UNZ_BADZIPFILE;

  0023b	c7 45 f0 99 ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -103 ; ffffff99H
$LN2@unzOpen2:

; 479  : 
; 480  :     if (err!=UNZ_OK)

  00242	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00246	74 1b		 je	 SHORT $LN1@unzOpen2

; 481  :     {
; 482  :         ZCLOSE(us.z_filefunc, us.filestream);

  00248	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _us$[ebp+32]
  0024e	52		 push	 edx
  0024f	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _us$[ebp+28]
  00255	50		 push	 eax
  00256	ff 95 44 ff ff
	ff		 call	 DWORD PTR _us$[ebp+20]
  0025c	83 c4 08	 add	 esp, 8

; 483  :         return NULL;

  0025f	33 c0		 xor	 eax, eax
  00261	eb 61		 jmp	 SHORT $LN19@unzOpen2
$LN1@unzOpen2:

; 484  :     }
; 485  : 
; 486  :     us.byte_before_the_zipfile = central_pos -
; 487  :                             (us.offset_central_dir+us.size_central_dir);

  00263	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _us$[ebp+68]
  00269	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _us$[ebp+64]
  0026f	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _central_pos$[ebp]
  00275	2b d1		 sub	 edx, ecx
  00277	89 95 5c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+44], edx

; 488  :     us.central_pos = central_pos;

  0027d	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _central_pos$[ebp]
  00283	89 85 6c ff ff
	ff		 mov	 DWORD PTR _us$[ebp+60], eax

; 489  :     us.pfile_in_zip_read = NULL;

  00289	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+156], 0

; 490  :     us.encrypted = 0;

  00290	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _us$[ebp+160], 0

; 491  : 
; 492  : 
; 493  :     s=(unz_s*)ALLOC(sizeof(unz_s));

  00297	68 b4 00 00 00	 push	 180			; 000000b4H
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  002a2	83 c4 04	 add	 esp, 4
  002a5	89 45 f8	 mov	 DWORD PTR _s$[ebp], eax

; 494  :     *s=us;

  002a8	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  002ad	8d b5 30 ff ff
	ff		 lea	 esi, DWORD PTR _us$[ebp]
  002b3	8b 7d f8	 mov	 edi, DWORD PTR _s$[ebp]
  002b6	f3 a5		 rep movsd

; 495  :     unzGoToFirstFile((unzFile)s);

  002b8	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  002bb	51		 push	 ecx
  002bc	e8 00 00 00 00	 call	 _unzGoToFirstFile@4

; 496  :     return (unzFile)s;

  002c1	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
$LN19@unzOpen2:

; 497  : }

  002c4	5f		 pop	 edi
  002c5	5e		 pop	 esi
  002c6	8b e5		 mov	 esp, ebp
  002c8	5d		 pop	 ebp
  002c9	c2 08 00	 ret	 8
_unzOpen2@8 ENDP
PUBLIC	_unzOpenCurrentFile2@16
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFile2@16
_TEXT	SEGMENT
_file$ = 8						; size = 4
_method$ = 12						; size = 4
_level$ = 16						; size = 4
_raw$ = 20						; size = 4
_unzOpenCurrentFile2@16 PROC				; COMDAT

; 1210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1211 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00003	6a 00		 push	 0
  00005	8b 45 14	 mov	 eax, DWORD PTR _raw$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR _method$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1212 : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_unzOpenCurrentFile2@16 ENDP
_TEXT	ENDS
PUBLIC	_unzOpenCurrentFilePassword@8
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFilePassword@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_password$ = 12						; size = 4
_unzOpenCurrentFilePassword@8 PROC			; COMDAT

; 1201 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1202 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _password$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1203 : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_unzOpenCurrentFilePassword@8 ENDP
_TEXT	ENDS
PUBLIC	_unzOpenCurrentFile@4
; Function compile flags: /Odtp
;	COMDAT _unzOpenCurrentFile@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_unzOpenCurrentFile@4 PROC				; COMDAT

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1195 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _unzOpenCurrentFile3@20

; 1196 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
_unzOpenCurrentFile@4 ENDP
_TEXT	ENDS
PUBLIC	_unzLocateFile@12
; Function compile flags: /Odtp
;	COMDAT _unzLocateFile@12
_TEXT	SEGMENT
_szCurrentFileName$79622 = -368				; size = 257
_err$ = -100						; size = 4
_num_fileSaved$ = -96					; size = 4
_cur_file_info_internalSaved$ = -92			; size = 4
_s$ = -88						; size = 4
_pos_in_central_dirSaved$ = -84				; size = 4
_cur_file_infoSaved$ = -80				; size = 80
_file$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_iCaseSensitivity$ = 16					; size = 4
_unzLocateFile@12 PROC					; COMDAT

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 829  :     unz_s* s;
; 830  :     int err;
; 831  : 
; 832  :     /* We remember the 'current' position in the file so that we can jump
; 833  :      * back there if we fail.
; 834  :      */
; 835  :     unz_file_info cur_file_infoSaved;
; 836  :     unz_file_info_internal cur_file_info_internalSaved;
; 837  :     uLong num_fileSaved;
; 838  :     uLong pos_in_central_dirSaved;
; 839  : 
; 840  : 
; 841  :     if (file==NULL)

  0000b	83 7d 08 00	 cmp	 DWORD PTR _file$[ebp], 0
  0000f	75 0a		 jne	 SHORT $LN7@unzLocateF

; 842  :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00016	e9 f9 00 00 00	 jmp	 $LN8@unzLocateF
$LN7@unzLocateF:

; 843  : 
; 844  :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _szFileName$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _strlen
  00024	83 c4 04	 add	 esp, 4
  00027	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0002c	72 0a		 jb	 SHORT $LN6@unzLocateF

; 845  :         return UNZ_PARAMERROR;

  0002e	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00033	e9 dc 00 00 00	 jmp	 $LN8@unzLocateF
$LN6@unzLocateF:

; 846  : 
; 847  :     s=(unz_s*)file;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0003b	89 4d a8	 mov	 DWORD PTR _s$[ebp], ecx

; 848  :     if (!s->current_file_ok)

  0003e	8b 55 a8	 mov	 edx, DWORD PTR _s$[ebp]
  00041	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00045	75 0a		 jne	 SHORT $LN5@unzLocateF

; 849  :         return UNZ_END_OF_LIST_OF_FILE;

  00047	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  0004c	e9 c3 00 00 00	 jmp	 $LN8@unzLocateF
$LN5@unzLocateF:

; 850  : 
; 851  :     /* Save the current state */
; 852  :     num_fileSaved = s->num_file;

  00051	8b 45 a8	 mov	 eax, DWORD PTR _s$[ebp]
  00054	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00057	89 4d a0	 mov	 DWORD PTR _num_fileSaved$[ebp], ecx

; 853  :     pos_in_central_dirSaved = s->pos_in_central_dir;

  0005a	8b 55 a8	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00060	89 45 ac	 mov	 DWORD PTR _pos_in_central_dirSaved$[ebp], eax

; 854  :     cur_file_infoSaved = s->cur_file_info;

  00063	8b 75 a8	 mov	 esi, DWORD PTR _s$[ebp]
  00066	83 c6 48	 add	 esi, 72			; 00000048H
  00069	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0006e	8d 7d b0	 lea	 edi, DWORD PTR _cur_file_infoSaved$[ebp]
  00071	f3 a5		 rep movsd

; 855  :     cur_file_info_internalSaved = s->cur_file_info_internal;

  00073	8b 4d a8	 mov	 ecx, DWORD PTR _s$[ebp]
  00076	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0007c	89 55 a4	 mov	 DWORD PTR _cur_file_info_internalSaved$[ebp], edx

; 856  : 
; 857  :     err = unzGoToFirstFile(file);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _unzGoToFirstFile@4
  00088	89 45 9c	 mov	 DWORD PTR _err$[ebp], eax
$LN4@unzLocateF:

; 858  : 
; 859  :     while (err == UNZ_OK)

  0008b	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  0008f	75 52		 jne	 SHORT $LN3@unzLocateF

; 860  :     {
; 861  :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 862  :         err = unzGetCurrentFileInfo(file,NULL,
; 863  :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 864  :                                     NULL,0,NULL,0);

  00091	6a 00		 push	 0
  00093	6a 00		 push	 0
  00095	6a 00		 push	 0
  00097	6a 00		 push	 0
  00099	68 00 01 00 00	 push	 256			; 00000100H
  0009e	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _szCurrentFileName$79622[ebp]
  000a4	51		 push	 ecx
  000a5	6a 00		 push	 0
  000a7	8b 55 08	 mov	 edx, DWORD PTR _file$[ebp]
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 _unzGetCurrentFileInfo@32
  000b0	89 45 9c	 mov	 DWORD PTR _err$[ebp], eax

; 865  :         if (err == UNZ_OK)

  000b3	83 7d 9c 00	 cmp	 DWORD PTR _err$[ebp], 0
  000b7	75 28		 jne	 SHORT $LN2@unzLocateF

; 866  :         {
; 867  :             if (unzStringFileNameCompare(szCurrentFileName,
; 868  :                                             szFileName,iCaseSensitivity)==0)

  000b9	8b 45 10	 mov	 eax, DWORD PTR _iCaseSensitivity$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d 0c	 mov	 ecx, DWORD PTR _szFileName$[ebp]
  000c0	51		 push	 ecx
  000c1	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR _szCurrentFileName$79622[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _unzStringFileNameCompare@12
  000cd	85 c0		 test	 eax, eax
  000cf	75 04		 jne	 SHORT $LN1@unzLocateF

; 869  :                 return UNZ_OK;

  000d1	33 c0		 xor	 eax, eax
  000d3	eb 3f		 jmp	 SHORT $LN8@unzLocateF
$LN1@unzLocateF:

; 870  :             err = unzGoToNextFile(file);

  000d5	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _unzGoToNextFile@4
  000de	89 45 9c	 mov	 DWORD PTR _err$[ebp], eax
$LN2@unzLocateF:

; 871  :         }
; 872  :     }

  000e1	eb a8		 jmp	 SHORT $LN4@unzLocateF
$LN3@unzLocateF:

; 873  : 
; 874  :     /* We failed, so restore the state of the 'current file' to where we
; 875  :      * were.
; 876  :      */
; 877  :     s->num_file = num_fileSaved ;

  000e3	8b 4d a8	 mov	 ecx, DWORD PTR _s$[ebp]
  000e6	8b 55 a0	 mov	 edx, DWORD PTR _num_fileSaved$[ebp]
  000e9	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 878  :     s->pos_in_central_dir = pos_in_central_dirSaved ;

  000ec	8b 45 a8	 mov	 eax, DWORD PTR _s$[ebp]
  000ef	8b 4d ac	 mov	 ecx, DWORD PTR _pos_in_central_dirSaved$[ebp]
  000f2	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 879  :     s->cur_file_info = cur_file_infoSaved;

  000f5	8b 7d a8	 mov	 edi, DWORD PTR _s$[ebp]
  000f8	83 c7 48	 add	 edi, 72			; 00000048H
  000fb	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00100	8d 75 b0	 lea	 esi, DWORD PTR _cur_file_infoSaved$[ebp]
  00103	f3 a5		 rep movsd

; 880  :     s->cur_file_info_internal = cur_file_info_internalSaved;

  00105	8b 55 a8	 mov	 edx, DWORD PTR _s$[ebp]
  00108	8b 45 a4	 mov	 eax, DWORD PTR _cur_file_info_internalSaved$[ebp]
  0010b	89 82 98 00 00
	00		 mov	 DWORD PTR [edx+152], eax

; 881  :     return err;

  00111	8b 45 9c	 mov	 eax, DWORD PTR _err$[ebp]
$LN8@unzLocateF:

; 882  : }

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 0c 00	 ret	 12			; 0000000cH
_unzLocateFile@12 ENDP
_TEXT	ENDS
PUBLIC	_unzOpen@4
; Function compile flags: /Odtp
;	COMDAT _unzOpen@4
_TEXT	SEGMENT
_path$ = 8						; size = 4
_unzOpen@4 PROC						; COMDAT

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 503  :     return unzOpen2(path, NULL);

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _unzOpen2@8

; 504  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
_unzOpen@4 ENDP
END
