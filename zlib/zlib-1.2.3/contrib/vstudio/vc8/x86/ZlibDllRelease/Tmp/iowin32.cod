; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
PUBLIC	_win32_error_file_func
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 251  :     int ret=-1;

  00004	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 252  :     if (stream!=NULL)

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0000f	74 09		 je	 SHORT $LN1@win32_erro

; 253  :     {
; 254  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	89 4d fc	 mov	 DWORD PTR _ret$[ebp], ecx
$LN1@win32_erro:

; 255  :     }
; 256  :     return ret;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 257  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_close_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_hFile$77652 = -8					; size = 4
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 231  :     int ret=-1;

  00006	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 232  : 
; 233  :     if (stream!=NULL)

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00011	74 2c		 je	 SHORT $LN2@win32_clos

; 234  :     {
; 235  :         HANDLE hFile;
; 236  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	89 4d f8	 mov	 DWORD PTR _hFile$77652[ebp], ecx

; 237  :         if (hFile != NULL)

  0001b	83 7d f8 00	 cmp	 DWORD PTR _hFile$77652[ebp], 0
  0001f	74 11		 je	 SHORT $LN1@win32_clos

; 238  :         {
; 239  :             CloseHandle(hFile);

  00021	8b 55 f8	 mov	 edx, DWORD PTR _hFile$77652[ebp]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 240  :             ret=0;

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN1@win32_clos:

; 241  :         }
; 242  :         free(stream);

  00032	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003c	83 c4 04	 add	 esp, 4
$LN2@win32_clos:

; 243  :     }
; 244  :     return ret;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 245  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_win32_close_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
tv65 = -24						; size = 4
_dwErr$77641 = -20					; size = 4
_dwSet$77637 = -16					; size = 4
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 192  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 193  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 194  : 
; 195  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 196  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek

; 197  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek:

; 198  :     switch (origin)

  00029	8b 55 14	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e8	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e8 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek
  00035	83 7d e8 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek
  0003b	83 7d e8 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek
$LN7@win32_seek:

; 199  :     {
; 200  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 201  :         dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 202  :         break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek
$LN6@win32_seek:

; 203  :     case ZLIB_FILEFUNC_SEEK_END :
; 204  :         dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 205  :         break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 206  :     case ZLIB_FILEFUNC_SEEK_SET :
; 207  :         dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 208  :         break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek
$LN4@win32_seek:

; 209  :     default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 48		 jmp	 SHORT $LN11@win32_seek
$LN8@win32_seek:

; 210  :     }
; 211  : 
; 212  :     if (hFile != NULL)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 3f		 je	 SHORT $LN3@win32_seek

; 213  :     {
; 214  :         DWORD dwSet = SetFilePointer(hFile, offset, NULL, dwMoveMethod);

  00069	8b 45 f4	 mov	 eax, DWORD PTR _dwMoveMethod$[ebp]
  0006c	50		 push	 eax
  0006d	6a 00		 push	 0
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _offset$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00076	52		 push	 edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  0007d	89 45 f0	 mov	 DWORD PTR _dwSet$77637[ebp], eax

; 215  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00080	83 7d f0 ff	 cmp	 DWORD PTR _dwSet$77637[ebp], -1
  00084	75 1b		 jne	 SHORT $LN2@win32_seek

; 216  :         {
; 217  :             DWORD dwErr = GetLastError();

  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008c	89 45 ec	 mov	 DWORD PTR _dwErr$77641[ebp], eax

; 218  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00092	8b 4d ec	 mov	 ecx, DWORD PTR _dwErr$77641[ebp]
  00095	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 219  :             ret = -1;

  00098	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 220  :         }
; 221  :         else

  0009f	eb 07		 jmp	 SHORT $LN3@win32_seek
$LN2@win32_seek:

; 222  :             ret=0;

  000a1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek:

; 223  :     }
; 224  :     return ret;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek:

; 225  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_dwErr$77609 = -16					; size = 4
_dwSet$77605 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 167  :     long ret=-1;

  00006	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 168  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 169  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_tell

; 170  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell:

; 171  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3a		 je	 SHORT $LN3@win32_tell

; 172  :     {
; 173  :         DWORD dwSet = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);

  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00031	52		 push	 edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00038	89 45 f4	 mov	 DWORD PTR _dwSet$77605[ebp], eax

; 174  :         if (dwSet == INVALID_SET_FILE_POINTER)

  0003b	83 7d f4 ff	 cmp	 DWORD PTR _dwSet$77605[ebp], -1
  0003f	75 1b		 jne	 SHORT $LN2@win32_tell

; 175  :         {
; 176  :             DWORD dwErr = GetLastError();

  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00047	89 45 f0	 mov	 DWORD PTR _dwErr$77609[ebp], eax

; 177  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _dwErr$77609[ebp]
  00050	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 178  :             ret = -1;

  00053	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 179  :         }
; 180  :         else

  0005a	eb 06		 jmp	 SHORT $LN3@win32_tell
$LN2@win32_tell:

; 181  :             ret=(long)dwSet;

  0005c	8b 55 f4	 mov	 edx, DWORD PTR _dwSet$77605[ebp]
  0005f	89 55 f8	 mov	 DWORD PTR _ret$[ebp], edx
$LN3@win32_tell:

; 182  :     }
; 183  :     return ret;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 184  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_write_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_dwErr$77589 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 146  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 147  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 148  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_writ

; 149  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_writ:

; 150  : 
; 151  :     if (hFile !=NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_writ

; 152  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_writ

; 153  :         {
; 154  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$77589[ebp], eax

; 155  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$77589[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_writ

; 156  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$77589[ebp], 0
$LN1@win32_writ:

; 157  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$77589[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_writ:

; 158  :         }
; 159  : 
; 160  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 161  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_read_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_dwErr$77569 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 123  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 124  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 125  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_read

; 126  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_read:

; 127  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_read

; 128  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_read

; 129  :         {
; 130  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$77569[ebp], eax

; 131  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$77569[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_read

; 132  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$77569[ebp], 0
$LN1@win32_read:

; 133  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$77569[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_read:

; 134  :         }
; 135  : 
; 136  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 137  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_read_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_w32fiow$77547 = -36					; size = 8
_mode_fopen$ = -28					; size = 4
_dwDesiredAccess$ = -24					; size = 4
_ret$ = -20						; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 70   :     const char* mode_fopen = NULL;

  00006	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 71   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 72   :     HANDLE hFile = 0;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 73   :     voidpf ret=NULL;

  00014	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 74   : 
; 75   :     dwDesiredAccess = dwShareMode = dwFlagsAndAttributes = 0;

  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwFlagsAndAttributes$[ebp], 0
  00022	8b 45 f4	 mov	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _dwShareMode$[ebp], eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0002b	89 4d e8	 mov	 DWORD PTR _dwDesiredAccess$[ebp], ecx

; 76   : 
; 77   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  0002e	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00031	83 e2 03	 and	 edx, 3
  00034	83 fa 01	 cmp	 edx, 1
  00037	75 17		 jne	 SHORT $LN10@win32_open

; 78   :     {
; 79   :         dwDesiredAccess = GENERIC_READ;

  00039	c7 45 e8 00 00
	00 80		 mov	 DWORD PTR _dwDesiredAccess$[ebp], -2147483648 ; 80000000H

; 80   :         dwCreationDisposition = OPEN_EXISTING;

  00040	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _dwCreationDisposition$[ebp], 3

; 81   :         dwShareMode = FILE_SHARE_READ;

  00047	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dwShareMode$[ebp], 1

; 82   :     }
; 83   :     else

  0004e	eb 2e		 jmp	 SHORT $LN9@win32_open
$LN10@win32_open:

; 84   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00050	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00053	83 e0 04	 and	 eax, 4
  00056	74 10		 je	 SHORT $LN8@win32_open

; 85   :     {
; 86   :         dwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00058	c7 45 e8 00 00
	00 c0		 mov	 DWORD PTR _dwDesiredAccess$[ebp], -1073741824 ; c0000000H

; 87   :         dwCreationDisposition = OPEN_EXISTING;

  0005f	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _dwCreationDisposition$[ebp], 3

; 88   :     }
; 89   :     else

  00066	eb 16		 jmp	 SHORT $LN9@win32_open
$LN8@win32_open:

; 90   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00068	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0006b	83 e1 08	 and	 ecx, 8
  0006e	74 0e		 je	 SHORT $LN9@win32_open

; 91   :     {
; 92   :         dwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00070	c7 45 e8 00 00
	00 c0		 mov	 DWORD PTR _dwDesiredAccess$[ebp], -1073741824 ; c0000000H

; 93   :         dwCreationDisposition = CREATE_ALWAYS;

  00077	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _dwCreationDisposition$[ebp], 2
$LN9@win32_open:

; 94   :     }
; 95   : 
; 96   :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00082	74 27		 je	 SHORT $LN5@win32_open
  00084	83 7d e8 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  00088	74 21		 je	 SHORT $LN5@win32_open

; 97   :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL,
; 98   :                       dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0008a	6a 00		 push	 0
  0008c	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00093	50		 push	 eax
  00094	6a 00		 push	 0
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 e8	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  000a8	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN5@win32_open:

; 99   : 
; 100  :     if (hFile == INVALID_HANDLE_VALUE)

  000ab	83 7d f8 ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  000af	75 07		 jne	 SHORT $LN4@win32_open

; 101  :         hFile = NULL;

  000b1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0
$LN4@win32_open:

; 102  : 
; 103  :     if (hFile != NULL)

  000b8	83 7d f8 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  000bc	74 3b		 je	 SHORT $LN3@win32_open

; 104  :     {
; 105  :         WIN32FILE_IOWIN w32fiow;
; 106  :         w32fiow.hf = hFile;

  000be	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  000c1	89 4d dc	 mov	 DWORD PTR _w32fiow$77547[ebp], ecx

; 107  :         w32fiow.error = 0;

  000c4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _w32fiow$77547[ebp+4], 0

; 108  :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  000cb	6a 08		 push	 8
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000d3	83 c4 04	 add	 esp, 4
  000d6	89 45 ec	 mov	 DWORD PTR _ret$[ebp], eax

; 109  :         if (ret==NULL)

  000d9	83 7d ec 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000dd	75 0c		 jne	 SHORT $LN2@win32_open

; 110  :             CloseHandle(hFile);

  000df	8b 55 f8	 mov	 edx, DWORD PTR _hFile$[ebp]
  000e2	52		 push	 edx
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000e9	eb 0e		 jmp	 SHORT $LN3@win32_open
$LN2@win32_open:

; 111  :         else *((WIN32FILE_IOWIN*)ret) = w32fiow;

  000eb	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]
  000ee	8b 4d dc	 mov	 ecx, DWORD PTR _w32fiow$77547[ebp]
  000f1	89 08		 mov	 DWORD PTR [eax], ecx
  000f3	8b 55 e0	 mov	 edx, DWORD PTR _w32fiow$77547[ebp+4]
  000f6	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN3@win32_open:

; 112  :     }
; 113  :     return ret;

  000f9	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]

; 114  : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_win32_open_file_func ENDP
PUBLIC	_fill_win32_filefunc
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 263  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 264  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 265  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 266  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek_file_func

; 267  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 268  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 269  :     pzlib_filefunc_def->opaque=NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 270  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc ENDP
END
