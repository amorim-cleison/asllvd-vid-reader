; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	uncompress
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\uncompr.c
pdata	SEGMENT
$pdata$uncompress DD imagerel $LN9
	DD	imagerel $LN9+325
	DD	imagerel $unwind$uncompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$uncompress DD 021b01H
	DD	013011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT uncompress
_TEXT	SEGMENT
stream$ = 32
err$ = 128
dest$ = 160
destLen$ = 168
source$ = 176
sourceLen$ = 184
uncompress PROC						; COMDAT

; 31   : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 32   :     z_stream stream;
; 33   :     int err;
; 34   : 
; 35   :     stream.next_in = (Bytef*)source;

  0001b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR source$[rsp]
  00023	48 89 44 24 20	 mov	 QWORD PTR stream$[rsp], rax

; 36   :     stream.avail_in = (uInt)sourceLen;

  00028	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR sourceLen$[rsp]
  0002f	89 44 24 28	 mov	 DWORD PTR stream$[rsp+8], eax

; 37   :     /* Check for source > 64K on 16-bit machine: */
; 38   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

  00033	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR sourceLen$[rsp]
  0003a	39 44 24 28	 cmp	 DWORD PTR stream$[rsp+8], eax
  0003e	74 0a		 je	 SHORT $LN6@uncompress
  00040	b8 fb ff ff ff	 mov	 eax, -5
  00045	e9 f3 00 00 00	 jmp	 $LN7@uncompress
$LN6@uncompress:

; 39   : 
; 40   :     stream.next_out = dest;

  0004a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dest$[rsp]
  00052	48 89 44 24 30	 mov	 QWORD PTR stream$[rsp+16], rax

; 41   :     stream.avail_out = (uInt)*destLen;

  00057	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR destLen$[rsp]
  0005f	8b 00		 mov	 eax, DWORD PTR [rax]
  00061	89 44 24 38	 mov	 DWORD PTR stream$[rsp+24], eax

; 42   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

  00065	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR destLen$[rsp]
  0006d	8b 00		 mov	 eax, DWORD PTR [rax]
  0006f	39 44 24 38	 cmp	 DWORD PTR stream$[rsp+24], eax
  00073	74 0a		 je	 SHORT $LN5@uncompress
  00075	b8 fb ff ff ff	 mov	 eax, -5
  0007a	e9 be 00 00 00	 jmp	 $LN7@uncompress
$LN5@uncompress:

; 43   : 
; 44   :     stream.zalloc = (alloc_func)0;

  0007f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR stream$[rsp+48], 0

; 45   :     stream.zfree = (free_func)0;

  00088	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR stream$[rsp+56], 0

; 46   : 
; 47   :     err = inflateInit(&stream);

  00091	41 b8 58 00 00
	00		 mov	 r8d, 88			; 00000058H
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GDHACFMB@1?42?43?$AA@
  0009e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stream$[rsp]
  000a3	e8 00 00 00 00	 call	 inflateInit_
  000a8	89 84 24 80 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 48   :     if (err != Z_OK) return err;

  000af	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  000b7	74 09		 je	 SHORT $LN4@uncompress
  000b9	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  000c0	eb 7b		 jmp	 SHORT $LN7@uncompress
$LN4@uncompress:

; 49   : 
; 50   :     err = inflate(&stream, Z_FINISH);

  000c2	ba 04 00 00 00	 mov	 edx, 4
  000c7	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stream$[rsp]
  000cc	e8 00 00 00 00	 call	 inflate
  000d1	89 84 24 80 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 51   :     if (err != Z_STREAM_END) {

  000d8	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR err$[rsp], 1
  000e0	74 35		 je	 SHORT $LN3@uncompress

; 52   :         inflateEnd(&stream);

  000e2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stream$[rsp]
  000e7	e8 00 00 00 00	 call	 inflateEnd

; 53   :         if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))

  000ec	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR err$[rsp], 2
  000f4	74 11		 je	 SHORT $LN1@uncompress
  000f6	83 bc 24 80 00
	00 00 fb	 cmp	 DWORD PTR err$[rsp], -5
  000fe	75 0e		 jne	 SHORT $LN2@uncompress
  00100	83 7c 24 28 00	 cmp	 DWORD PTR stream$[rsp+8], 0
  00105	75 07		 jne	 SHORT $LN2@uncompress
$LN1@uncompress:

; 54   :             return Z_DATA_ERROR;

  00107	b8 fd ff ff ff	 mov	 eax, -3
  0010c	eb 2f		 jmp	 SHORT $LN7@uncompress
$LN2@uncompress:

; 55   :         return err;

  0010e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  00115	eb 26		 jmp	 SHORT $LN7@uncompress
$LN3@uncompress:

; 56   :     }
; 57   :     *destLen = stream.total_out;

  00117	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR destLen$[rsp]
  0011f	8b 44 24 3c	 mov	 eax, DWORD PTR stream$[rsp+28]
  00123	89 01		 mov	 DWORD PTR [rcx], eax

; 58   : 
; 59   :     err = inflateEnd(&stream);

  00125	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stream$[rsp]
  0012a	e8 00 00 00 00	 call	 inflateEnd
  0012f	89 84 24 80 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 60   :     return err;

  00136	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
$LN7@uncompress:

; 61   : }

  0013d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00144	c3		 ret	 0
uncompress ENDP
END
