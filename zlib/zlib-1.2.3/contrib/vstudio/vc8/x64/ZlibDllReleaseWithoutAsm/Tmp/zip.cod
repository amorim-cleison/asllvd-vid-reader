; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	zip_copyright
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
EXTRN	__imp_rand:PROC
EXTRN	__imp_srand:PROC
EXTRN	__imp__time64:PROC
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
zip_copyright DB ' zip 1.01 Copyright 1998-2004 Gilles Vollant - http://w'
	DB	'ww.winimage.com/zLibDll', 00H
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$ziplocal_SearchCentralDir DD imagerel ziplocal_SearchCentralDir
	DD	imagerel ziplocal_SearchCentralDir+521
	DD	imagerel $unwind$ziplocal_SearchCentralDir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_SearchCentralDir DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_SearchCentralDir
_TEXT	SEGMENT
uSizeFile$ = 32
uPosFound$ = 36
uBackRead$ = 40
uMaxBack$ = 44
buf$ = 48
i$80380 = 56
uReadPos$80379 = 60
uReadSize$80378 = 64
tv89 = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
ziplocal_SearchCentralDir PROC				; COMDAT

; 443  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 444  :     unsigned char* buf;
; 445  :     uLong uSizeFile;
; 446  :     uLong uBackRead;
; 447  :     uLong uMaxBack=0xffff; /* maximum size of global comment */

  0000e	c7 44 24 2c ff
	ff 00 00	 mov	 DWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 448  :     uLong uPosFound=0;

  00016	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR uPosFound$[rsp], 0

; 449  : 
; 450  :     if (ZSEEK(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0001e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00024	45 33 c0	 xor	 r8d, r8d
  00027	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00031	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003a	ff 50 20	 call	 QWORD PTR [rax+32]
  0003d	85 c0		 test	 eax, eax
  0003f	74 07		 je	 SHORT $LN14@ziplocal_S

; 451  :         return 0;

  00041	33 c0		 xor	 eax, eax
  00043	e9 bc 01 00 00	 jmp	 $LN15@ziplocal_S
$LN14@ziplocal_S:

; 452  : 
; 453  : 
; 454  :     uSizeFile = ZTELL(*pzlib_filefunc_def,filestream);

  00048	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0004d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00052	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00056	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005b	ff 50 18	 call	 QWORD PTR [rax+24]
  0005e	89 44 24 20	 mov	 DWORD PTR uSizeFile$[rsp], eax

; 455  : 
; 456  :     if (uMaxBack>uSizeFile)

  00062	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  00066	39 44 24 2c	 cmp	 DWORD PTR uMaxBack$[rsp], eax
  0006a	76 08		 jbe	 SHORT $LN13@ziplocal_S

; 457  :         uMaxBack = uSizeFile;

  0006c	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  00070	89 44 24 2c	 mov	 DWORD PTR uMaxBack$[rsp], eax
$LN13@ziplocal_S:

; 458  : 
; 459  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00074	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0007f	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 460  :     if (buf==NULL)

  00084	48 83 7c 24 30
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0008a	75 07		 jne	 SHORT $LN12@ziplocal_S

; 461  :         return 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 71 01 00 00	 jmp	 $LN15@ziplocal_S
$LN12@ziplocal_S:

; 462  : 
; 463  :     uBackRead = 4;

  00093	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR uBackRead$[rsp], 4
$LN11@ziplocal_S:

; 464  :     while (uBackRead<uMaxBack)

  0009b	8b 44 24 2c	 mov	 eax, DWORD PTR uMaxBack$[rsp]
  0009f	39 44 24 28	 cmp	 DWORD PTR uBackRead$[rsp], eax
  000a3	0f 83 44 01 00
	00		 jae	 $LN10@ziplocal_S

; 465  :     {
; 466  :         uLong uReadSize,uReadPos ;
; 467  :         int i;
; 468  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a9	8b 44 24 28	 mov	 eax, DWORD PTR uBackRead$[rsp]
  000ad	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000b2	3b 44 24 2c	 cmp	 eax, DWORD PTR uMaxBack$[rsp]
  000b6	76 0a		 jbe	 SHORT $LN9@ziplocal_S

; 469  :             uBackRead = uMaxBack;

  000b8	8b 44 24 2c	 mov	 eax, DWORD PTR uMaxBack$[rsp]
  000bc	89 44 24 28	 mov	 DWORD PTR uBackRead$[rsp], eax

; 470  :         else

  000c0	eb 0d		 jmp	 SHORT $LN8@ziplocal_S
$LN9@ziplocal_S:

; 471  :             uBackRead+=BUFREADCOMMENT;

  000c2	8b 44 24 28	 mov	 eax, DWORD PTR uBackRead$[rsp]
  000c6	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000cb	89 44 24 28	 mov	 DWORD PTR uBackRead$[rsp], eax
$LN8@ziplocal_S:

; 472  :         uReadPos = uSizeFile-uBackRead ;

  000cf	8b 4c 24 28	 mov	 ecx, DWORD PTR uBackRead$[rsp]
  000d3	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  000d7	2b c1		 sub	 eax, ecx
  000d9	89 44 24 3c	 mov	 DWORD PTR uReadPos$80379[rsp], eax

; 473  : 
; 474  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 475  :                      (BUFREADCOMMENT+4) : (uSizeFile-uReadPos);

  000dd	8b 4c 24 3c	 mov	 ecx, DWORD PTR uReadPos$80379[rsp]
  000e1	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  000e5	2b c1		 sub	 eax, ecx
  000e7	3d 04 04 00 00	 cmp	 eax, 1028		; 00000404H
  000ec	76 0a		 jbe	 SHORT $LN17@ziplocal_S
  000ee	c7 44 24 44 04
	04 00 00	 mov	 DWORD PTR tv89[rsp], 1028 ; 00000404H
  000f6	eb 0e		 jmp	 SHORT $LN18@ziplocal_S
$LN17@ziplocal_S:
  000f8	8b 4c 24 3c	 mov	 ecx, DWORD PTR uReadPos$80379[rsp]
  000fc	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  00100	2b c1		 sub	 eax, ecx
  00102	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN18@ziplocal_S:
  00106	8b 44 24 44	 mov	 eax, DWORD PTR tv89[rsp]
  0010a	89 44 24 40	 mov	 DWORD PTR uReadSize$80378[rsp], eax

; 476  :         if (ZSEEK(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0010e	45 33 c9	 xor	 r9d, r9d
  00111	44 8b 44 24 3c	 mov	 r8d, DWORD PTR uReadPos$80379[rsp]
  00116	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0011b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00120	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00124	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00129	ff 50 20	 call	 QWORD PTR [rax+32]
  0012c	85 c0		 test	 eax, eax
  0012e	74 05		 je	 SHORT $LN7@ziplocal_S

; 477  :             break;

  00130	e9 b8 00 00 00	 jmp	 $LN10@ziplocal_S
$LN7@ziplocal_S:

; 478  : 
; 479  :         if (ZREAD(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00135	44 8b 4c 24 40	 mov	 r9d, DWORD PTR uReadSize$80378[rsp]
  0013a	4c 8b 44 24 30	 mov	 r8, QWORD PTR buf$[rsp]
  0013f	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00144	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00149	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0014d	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00152	ff 50 08	 call	 QWORD PTR [rax+8]
  00155	3b 44 24 40	 cmp	 eax, DWORD PTR uReadSize$80378[rsp]
  00159	74 05		 je	 SHORT $LN6@ziplocal_S

; 480  :             break;

  0015b	e9 8d 00 00 00	 jmp	 $LN10@ziplocal_S
$LN6@ziplocal_S:

; 481  : 
; 482  :         for (i=(int)uReadSize-3; (i--)>0;)

  00160	8b 44 24 40	 mov	 eax, DWORD PTR uReadSize$80378[rsp]
  00164	83 e8 03	 sub	 eax, 3
  00167	89 44 24 38	 mov	 DWORD PTR i$80380[rsp], eax
$LN5@ziplocal_S:
  0016b	8b 4c 24 38	 mov	 ecx, DWORD PTR i$80380[rsp]
  0016f	8b 44 24 38	 mov	 eax, DWORD PTR i$80380[rsp]
  00173	83 e8 01	 sub	 eax, 1
  00176	89 44 24 38	 mov	 DWORD PTR i$80380[rsp], eax
  0017a	85 c9		 test	 ecx, ecx
  0017c	7e 61		 jle	 SHORT $LN4@ziplocal_S

; 483  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 484  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  0017e	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$80380[rsp]
  00183	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00188	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0018c	83 f8 50	 cmp	 eax, 80			; 00000050H
  0018f	75 4c		 jne	 SHORT $LN3@ziplocal_S
  00191	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$80380[rsp]
  00196	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0019b	0f b6 44 08 01	 movzx	 eax, BYTE PTR [rax+rcx+1]
  001a0	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001a3	75 38		 jne	 SHORT $LN3@ziplocal_S
  001a5	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$80380[rsp]
  001aa	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  001af	0f b6 44 08 02	 movzx	 eax, BYTE PTR [rax+rcx+2]
  001b4	83 f8 05	 cmp	 eax, 5
  001b7	75 24		 jne	 SHORT $LN3@ziplocal_S
  001b9	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$80380[rsp]
  001be	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  001c3	0f b6 44 08 03	 movzx	 eax, BYTE PTR [rax+rcx+3]
  001c8	83 f8 06	 cmp	 eax, 6
  001cb	75 10		 jne	 SHORT $LN3@ziplocal_S

; 485  :             {
; 486  :                 uPosFound = uReadPos+i;

  001cd	8b 4c 24 38	 mov	 ecx, DWORD PTR i$80380[rsp]
  001d1	8b 44 24 3c	 mov	 eax, DWORD PTR uReadPos$80379[rsp]
  001d5	03 c1		 add	 eax, ecx
  001d7	89 44 24 24	 mov	 DWORD PTR uPosFound$[rsp], eax

; 487  :                 break;

  001db	eb 02		 jmp	 SHORT $LN4@ziplocal_S
$LN3@ziplocal_S:

; 488  :             }

  001dd	eb 8c		 jmp	 SHORT $LN5@ziplocal_S
$LN4@ziplocal_S:

; 489  : 
; 490  :         if (uPosFound!=0)

  001df	83 7c 24 24 00	 cmp	 DWORD PTR uPosFound$[rsp], 0
  001e4	74 02		 je	 SHORT $LN2@ziplocal_S

; 491  :             break;

  001e6	eb 05		 jmp	 SHORT $LN10@ziplocal_S
$LN2@ziplocal_S:

; 492  :     }

  001e8	e9 ae fe ff ff	 jmp	 $LN11@ziplocal_S
$LN10@ziplocal_S:

; 493  :     TRYFREE(buf);

  001ed	48 83 7c 24 30
	00		 cmp	 QWORD PTR buf$[rsp], 0
  001f3	74 0b		 je	 SHORT $LN1@ziplocal_S
  001f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@ziplocal_S:

; 494  :     return uPosFound;

  00200	8b 44 24 24	 mov	 eax, DWORD PTR uPosFound$[rsp]
$LN15@ziplocal_S:

; 495  : }

  00204	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00208	c3		 ret	 0
ziplocal_SearchCentralDir ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ziplocal_getByte DD imagerel ziplocal_getByte
	DD	imagerel ziplocal_getByte+123
	DD	imagerel $unwind$ziplocal_getByte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_getByte DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_getByte
_TEXT	SEGMENT
err$ = 32
c$ = 36
pzlib_filefunc_def$ = 64
filestream$ = 72
pi$ = 80
ziplocal_getByte PROC					; COMDAT

; 344  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 345  :     unsigned char c;
; 346  :     int err = (int)ZREAD(*pzlib_filefunc_def,filestream,&c,1);

  00013	41 b9 01 00 00
	00		 mov	 r9d, 1
  00019	4c 8d 44 24 24	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00028	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00031	ff 50 08	 call	 QWORD PTR [rax+8]
  00034	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 347  :     if (err==1)

  00038	83 7c 24 20 01	 cmp	 DWORD PTR err$[rsp], 1
  0003d	75 12		 jne	 SHORT $LN4@ziplocal_g

; 348  :     {
; 349  :         *pi = (int)c;

  0003f	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR c$[rsp]
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR pi$[rsp]
  00049	89 08		 mov	 DWORD PTR [rax], ecx

; 350  :         return ZIP_OK;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 27		 jmp	 SHORT $LN5@ziplocal_g

; 351  :     }
; 352  :     else

  0004f	eb 25		 jmp	 SHORT $LN3@ziplocal_g
$LN4@ziplocal_g:

; 353  :     {
; 354  :         if (ZERROR(*pzlib_filefunc_def,filestream))

  00051	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0005b	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00064	ff 50 30	 call	 QWORD PTR [rax+48]
  00067	85 c0		 test	 eax, eax
  00069	74 09		 je	 SHORT $LN2@ziplocal_g

; 355  :             return ZIP_ERRNO;

  0006b	b8 ff ff ff ff	 mov	 eax, -1
  00070	eb 04		 jmp	 SHORT $LN5@ziplocal_g

; 356  :         else

  00072	eb 02		 jmp	 SHORT $LN1@ziplocal_g
$LN2@ziplocal_g:

; 357  :             return ZIP_EOF;

  00074	33 c0		 xor	 eax, eax
$LN1@ziplocal_g:
$LN3@ziplocal_g:
$LN5@ziplocal_g:

; 358  :     }
; 359  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
ziplocal_getByte ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ziplocal_TmzDateToDosDate DD imagerel ziplocal_TmzDateToDosDate
	DD	imagerel ziplocal_TmzDateToDosDate+160
	DD	imagerel $unwind$ziplocal_TmzDateToDosDate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_TmzDateToDosDate DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_TmzDateToDosDate
_TEXT	SEGMENT
year$ = 0
ptm$ = 32
dosDate$ = 40
ziplocal_TmzDateToDosDate PROC				; COMDAT

; 321  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 322  :     uLong year = (uLong)ptm->tm_year;

  0000d	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  00012	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00015	89 04 24	 mov	 DWORD PTR year$[rsp], eax

; 323  :     if (year>1980)

  00018	81 3c 24 bc 07
	00 00		 cmp	 DWORD PTR year$[rsp], 1980 ; 000007bcH
  0001f	76 0d		 jbe	 SHORT $LN3@ziplocal_T

; 324  :         year-=1980;

  00021	8b 04 24	 mov	 eax, DWORD PTR year$[rsp]
  00024	2d bc 07 00 00	 sub	 eax, 1980		; 000007bcH
  00029	89 04 24	 mov	 DWORD PTR year$[rsp], eax
  0002c	eb 0f		 jmp	 SHORT $LN2@ziplocal_T
$LN3@ziplocal_T:

; 325  :     else if (year>80)

  0002e	83 3c 24 50	 cmp	 DWORD PTR year$[rsp], 80 ; 00000050H
  00032	76 09		 jbe	 SHORT $LN1@ziplocal_T

; 326  :         year-=80;

  00034	8b 04 24	 mov	 eax, DWORD PTR year$[rsp]
  00037	83 e8 50	 sub	 eax, 80			; 00000050H
  0003a	89 04 24	 mov	 DWORD PTR year$[rsp], eax
$LN1@ziplocal_T:
$LN2@ziplocal_T:

; 327  :     return
; 328  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 329  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  00042	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00045	83 c1 01	 add	 ecx, 1
  00048	6b c9 20	 imul	 ecx, 32			; 00000020H
  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  00050	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00054	44 03 c1	 add	 r8d, ecx
  00057	8b 04 24	 mov	 eax, DWORD PTR year$[rsp]
  0005a	69 c0 00 02 00
	00		 imul	 eax, 512		; 00000200H
  00060	44 03 c0	 add	 r8d, eax
  00063	41 c1 e0 10	 shl	 r8d, 16
  00067	33 d2		 xor	 edx, edx
  00069	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0006e	8b 00		 mov	 eax, DWORD PTR [rax]
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	f7 f1		 div	 ecx
  00077	8b c8		 mov	 ecx, eax
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0007e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00081	6b c0 20	 imul	 eax, 32			; 00000020H
  00084	03 c8		 add	 ecx, eax
  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0008b	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0008e	69 c0 00 08 00
	00		 imul	 eax, 2048		; 00000800H
  00094	03 c8		 add	 ecx, eax
  00096	41 8b c0	 mov	 eax, r8d
  00099	0b c1		 or	 eax, ecx

; 330  : }

  0009b	48 83 c4 18	 add	 rsp, 24
  0009f	c3		 ret	 0
ziplocal_TmzDateToDosDate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ziplocal_putValue_inmemory DD imagerel ziplocal_putValue_inmemory
	DD	imagerel ziplocal_putValue_inmemory+144
	DD	imagerel $unwind$ziplocal_putValue_inmemory
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_putValue_inmemory DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_putValue_inmemory
_TEXT	SEGMENT
n$ = 0
buf$ = 8
dest$ = 32
x$ = 40
nbByte$ = 48
ziplocal_putValue_inmemory PROC				; COMDAT

; 298  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 299  :     unsigned char* buf=(unsigned char*)dest;

  00012	48 8b 44 24 20	 mov	 rax, QWORD PTR dest$[rsp]
  00017	48 89 44 24 08	 mov	 QWORD PTR buf$[rsp], rax

; 300  :     int n;
; 301  :     for (n = 0; n < nbByte; n++) {

  0001c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00023	eb 09		 jmp	 SHORT $LN7@ziplocal_p
$LN6@ziplocal_p:
  00025	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN7@ziplocal_p:
  0002e	8b 44 24 30	 mov	 eax, DWORD PTR nbByte$[rsp]
  00032	39 04 24	 cmp	 DWORD PTR n$[rsp], eax
  00035	7d 23		 jge	 SHORT $LN5@ziplocal_p

; 302  :         buf[n] = (unsigned char)(x & 0xff);

  00037	8b 54 24 28	 mov	 edx, DWORD PTR x$[rsp]
  0003b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00041	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00045	48 8b 44 24 08	 mov	 rax, QWORD PTR buf$[rsp]
  0004a	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 303  :         x >>= 8;

  0004d	8b 44 24 28	 mov	 eax, DWORD PTR x$[rsp]
  00051	c1 e8 08	 shr	 eax, 8
  00054	89 44 24 28	 mov	 DWORD PTR x$[rsp], eax

; 304  :     }

  00058	eb cb		 jmp	 SHORT $LN6@ziplocal_p
$LN5@ziplocal_p:

; 305  : 
; 306  :     if (x != 0)

  0005a	83 7c 24 28 00	 cmp	 DWORD PTR x$[rsp], 0
  0005f	74 2a		 je	 SHORT $LN4@ziplocal_p

; 307  :     {     /* data overflow - hack for ZIP64 */
; 308  :        for (n = 0; n < nbByte; n++)

  00061	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00068	eb 09		 jmp	 SHORT $LN3@ziplocal_p
$LN2@ziplocal_p:
  0006a	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  0006d	83 c0 01	 add	 eax, 1
  00070	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN3@ziplocal_p:
  00073	8b 44 24 30	 mov	 eax, DWORD PTR nbByte$[rsp]
  00077	39 04 24	 cmp	 DWORD PTR n$[rsp], eax
  0007a	7d 0f		 jge	 SHORT $LN1@ziplocal_p

; 309  :        {
; 310  :           buf[n] = 0xff;

  0007c	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00080	48 8b 44 24 08	 mov	 rax, QWORD PTR buf$[rsp]
  00085	c6 04 08 ff	 mov	 BYTE PTR [rax+rcx], 255	; 000000ffH

; 311  :        }

  00089	eb df		 jmp	 SHORT $LN2@ziplocal_p
$LN1@ziplocal_p:
$LN4@ziplocal_p:

; 312  :     }
; 313  : }

  0008b	48 83 c4 18	 add	 rsp, 24
  0008f	c3		 ret	 0
ziplocal_putValue_inmemory ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ziplocal_putValue DD imagerel ziplocal_putValue
	DD	imagerel ziplocal_putValue+191
	DD	imagerel $unwind$ziplocal_putValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_putValue DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_putValue
_TEXT	SEGMENT
n$ = 32
buf$ = 36
pzlib_filefunc_def$ = 64
filestream$ = 72
x$ = 80
nbByte$ = 88
ziplocal_putValue PROC					; COMDAT

; 271  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 272  :     unsigned char buf[4];
; 273  :     int n;
; 274  :     for (n = 0; n < nbByte; n++)

  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00020	eb 0b		 jmp	 SHORT $LN9@ziplocal_p@2
$LN8@ziplocal_p@2:
  00022	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN9@ziplocal_p@2:
  0002d	8b 44 24 58	 mov	 eax, DWORD PTR nbByte$[rsp]
  00031	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  00035	7d 20		 jge	 SHORT $LN7@ziplocal_p@2

; 275  :     {
; 276  :         buf[n] = (unsigned char)(x & 0xff);

  00037	8b 4c 24 50	 mov	 ecx, DWORD PTR x$[rsp]
  0003b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00041	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00046	88 4c 04 24	 mov	 BYTE PTR buf$[rsp+rax], cl

; 277  :         x >>= 8;

  0004a	8b 44 24 50	 mov	 eax, DWORD PTR x$[rsp]
  0004e	c1 e8 08	 shr	 eax, 8
  00051	89 44 24 50	 mov	 DWORD PTR x$[rsp], eax

; 278  :     }

  00055	eb cb		 jmp	 SHORT $LN8@ziplocal_p@2
$LN7@ziplocal_p@2:

; 279  :     if (x != 0)

  00057	83 7c 24 50 00	 cmp	 DWORD PTR x$[rsp], 0
  0005c	74 2b		 je	 SHORT $LN6@ziplocal_p@2

; 280  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 281  :       for (n = 0; n < nbByte; n++)

  0005e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00066	eb 0b		 jmp	 SHORT $LN5@ziplocal_p@2
$LN4@ziplocal_p@2:
  00068	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0006c	83 c0 01	 add	 eax, 1
  0006f	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN5@ziplocal_p@2:
  00073	8b 44 24 58	 mov	 eax, DWORD PTR nbByte$[rsp]
  00077	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  0007b	7d 0c		 jge	 SHORT $LN3@ziplocal_p@2

; 282  :         {
; 283  :           buf[n] = 0xff;

  0007d	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00082	c6 44 04 24 ff	 mov	 BYTE PTR buf$[rsp+rax], 255 ; 000000ffH

; 284  :         }

  00087	eb df		 jmp	 SHORT $LN4@ziplocal_p@2
$LN3@ziplocal_p@2:
$LN6@ziplocal_p@2:

; 285  :       }
; 286  : 
; 287  :     if (ZWRITE(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00089	44 8b 4c 24 58	 mov	 r9d, DWORD PTR nbByte$[rsp]
  0008e	4c 8d 44 24 24	 lea	 r8, QWORD PTR buf$[rsp]
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0009d	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  000a6	ff 50 10	 call	 QWORD PTR [rax+16]
  000a9	3b 44 24 58	 cmp	 eax, DWORD PTR nbByte$[rsp]
  000ad	74 09		 je	 SHORT $LN2@ziplocal_p@2

; 288  :         return ZIP_ERRNO;

  000af	b8 ff ff ff ff	 mov	 eax, -1
  000b4	eb 04		 jmp	 SHORT $LN10@ziplocal_p@2

; 289  :     else

  000b6	eb 02		 jmp	 SHORT $LN1@ziplocal_p@2
$LN2@ziplocal_p@2:

; 290  :         return ZIP_OK;

  000b8	33 c0		 xor	 eax, eax
$LN1@ziplocal_p@2:
$LN10@ziplocal_p@2:

; 291  : }

  000ba	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000be	c3		 ret	 0
ziplocal_putValue ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT init_linkedlist
_TEXT	SEGMENT
ll$ = 8
init_linkedlist PROC					; COMDAT

; 188  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 189  :     ll->first_block = ll->last_block = NULL;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR ll$[rsp]
  0000a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00012	48 8b 44 24 08	 mov	 rax, QWORD PTR ll$[rsp]
  00017	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 190  : }

  0001e	c3		 ret	 0
init_linkedlist ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_datablock DD imagerel free_datablock
	DD	imagerel free_datablock+66
	DD	imagerel $unwind$free_datablock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_datablock DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT free_datablock
_TEXT	SEGMENT
ldinext$80186 = 32
ldi$ = 64
free_datablock PROC					; COMDAT

; 177  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN3@free_datab:

; 178  :     while (ldi!=NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  0000f	74 2c		 je	 SHORT $LN2@free_datab

; 179  :     {
; 180  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$[rsp]
  00016	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00019	48 89 44 24 20	 mov	 QWORD PTR ldinext$80186[rsp], rax

; 181  :         TRYFREE(ldi);

  0001e	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  00024	74 0b		 je	 SHORT $LN1@free_datab
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ldi$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@free_datab:

; 182  :         ldi = ldinext;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR ldinext$80186[rsp]
  00036	48 89 44 24 40	 mov	 QWORD PTR ldi$[rsp], rax

; 183  :     }

  0003b	eb cc		 jmp	 SHORT $LN3@free_datab
$LN2@free_datab:

; 184  : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
free_datablock ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$allocate_new_datablock DD imagerel allocate_new_datablock
	DD	imagerel allocate_new_datablock+74
	DD	imagerel $unwind$allocate_new_datablock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$allocate_new_datablock DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT allocate_new_datablock
_TEXT	SEGMENT
ldi$ = 32
allocate_new_datablock PROC				; COMDAT

; 162  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 163  :     linkedlist_datablock_internal* ldi;
; 164  :     ldi = (linkedlist_datablock_internal*)
; 165  :                  ALLOC(sizeof(linkedlist_datablock_internal));

  00004	b9 08 10 00 00	 mov	 ecx, 4104		; 00001008H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0000f	48 89 44 24 20	 mov	 QWORD PTR ldi$[rsp], rax

; 166  :     if (ldi!=NULL)

  00014	48 83 7c 24 20
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  0001a	74 24		 je	 SHORT $LN1@allocate_n

; 167  :     {
; 168  :         ldi->next_datablock = NULL ;

  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00021	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 169  :         ldi->filled_in_this_block = 0 ;

  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 170  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00039	c7 40 08 f0 0f
	00 00		 mov	 DWORD PTR [rax+8], 4080	; 00000ff0H
$LN1@allocate_n:

; 171  :     }
; 172  :     return ldi;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]

; 173  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
allocate_new_datablock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
pdata	SEGMENT
$pdata$update_keys DD imagerel update_keys
	DD	imagerel update_keys+194
	DD	imagerel $unwind$update_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_keys DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_keys
_TEXT	SEGMENT
keyshift$80124 = 0
pkeys$ = 32
pcrc_32_tab$ = 40
c$ = 48
update_keys PROC					; COMDAT

; 49   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR c$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	33 c1		 xor	 eax, ecx
  00020	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00025	48 63 c8	 movsxd	 rcx, eax
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0002d	8b 10		 mov	 edx, DWORD PTR [rax]
  0002f	c1 ea 08	 shr	 edx, 8
  00032	48 8b 44 24 28	 mov	 rax, QWORD PTR pcrc_32_tab$[rsp]
  00037	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  0003a	33 ca		 xor	 ecx, edx
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00041	89 08		 mov	 DWORD PTR [rax], ecx

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00048	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00055	03 48 04	 add	 ecx, DWORD PTR [rax+4]
  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0005d	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00068	69 c9 05 84 08
	08		 imul	 ecx, 134775813		; 08088405H
  0006e	83 c1 01	 add	 ecx, 1
  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00076	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0007e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00081	c1 e8 18	 shr	 eax, 24
  00084	89 04 24	 mov	 DWORD PTR keyshift$80124[rsp], eax

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0008c	8b 0c 24	 mov	 ecx, DWORD PTR keyshift$80124[rsp]
  0008f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00092	33 c1		 xor	 eax, ecx
  00094	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00099	48 63 c8	 movsxd	 rcx, eax
  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  000a1	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000a4	c1 ea 08	 shr	 edx, 8
  000a7	48 8b 44 24 28	 mov	 rax, QWORD PTR pcrc_32_tab$[rsp]
  000ac	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  000af	33 ca		 xor	 ecx, edx
  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  000b6	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 56   :     }
; 57   :     return c;

  000b9	8b 44 24 30	 mov	 eax, DWORD PTR c$[rsp]

; 58   : }

  000bd	48 83 c4 18	 add	 rsp, 24
  000c1	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decrypt_byte DD imagerel decrypt_byte
	DD	imagerel decrypt_byte+58
	DD	imagerel $unwind$decrypt_byte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decrypt_byte DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decrypt_byte
_TEXT	SEGMENT
temp$ = 0
pkeys$ = 32
pcrc_32_tab$ = 40
decrypt_byte PROC					; COMDAT

; 36   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00013	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00016	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001b	83 c8 02	 or	 eax, 2
  0001e	89 04 24	 mov	 DWORD PTR temp$[rsp], eax

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00021	8b 0c 24	 mov	 ecx, DWORD PTR temp$[rsp]
  00024	83 f1 01	 xor	 ecx, 1
  00027	8b 04 24	 mov	 eax, DWORD PTR temp$[rsp]
  0002a	0f af c1	 imul	 eax, ecx
  0002d	c1 e8 08	 shr	 eax, 8
  00030	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  00035	48 83 c4 18	 add	 rsp, 24
  00039	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\time.inl
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 48
time	PROC						; COMDAT

; 134  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 135  :     return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 136  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$zipFlushWriteBuffer DD imagerel zipFlushWriteBuffer
	DD	imagerel zipFlushWriteBuffer+298
	DD	imagerel $unwind$zipFlushWriteBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipFlushWriteBuffer DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipFlushWriteBuffer
_TEXT	SEGMENT
err$ = 32
i$80626 = 36
t$80627 = 40
zi$ = 64
zipFlushWriteBuffer PROC				; COMDAT

; 946  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 947  :     int err=ZIP_OK;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 948  : 
; 949  :     if (zi->ci.encrypt != 0)

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00016	83 b8 e8 40 00
	00 00		 cmp	 DWORD PTR [rax+16616], 0
  0001d	0f 84 a4 00 00
	00		 je	 $LN5@zipFlushWr

; 950  :     {
; 951  : #ifndef NOCRYPT
; 952  :         uInt i;
; 953  :         int t;
; 954  :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00023	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$80626[rsp], 0
  0002b	eb 0b		 jmp	 SHORT $LN4@zipFlushWr
$LN3@zipFlushWr:
  0002d	8b 44 24 24	 mov	 eax, DWORD PTR i$80626[rsp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 44 24 24	 mov	 DWORD PTR i$80626[rsp], eax
$LN4@zipFlushWr:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0003d	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [rax+188]
  00043	39 44 24 24	 cmp	 DWORD PTR i$80626[rsp], eax
  00047	73 7e		 jae	 SHORT $LN2@zipFlushWr

; 955  :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab,
; 956  :                                        zi->ci.buffered_data[i],t);

  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0004e	48 81 c1 ec 40
	00 00		 add	 rcx, 16620		; 000040ecH
  00055	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0005a	48 8b 92 f8 40
	00 00		 mov	 rdx, QWORD PTR [rdx+16632]
  00061	e8 00 00 00 00	 call	 decrypt_byte
  00066	89 44 24 28	 mov	 DWORD PTR t$80627[rsp], eax
  0006a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$80626[rsp]
  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00073	44 0f b6 84 08
	e0 00 00 00	 movzx	 r8d, BYTE PTR [rax+rcx+224]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00081	48 81 c1 ec 40
	00 00		 add	 rcx, 16620		; 000040ecH
  00088	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0008d	48 8b 92 f8 40
	00 00		 mov	 rdx, QWORD PTR [rdx+16632]
  00094	e8 00 00 00 00	 call	 update_keys
  00099	44 8b 5c 24 24	 mov	 r11d, DWORD PTR i$80626[rsp]
  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000a3	42 0f b6 84 18
	e0 00 00 00	 movzx	 eax, BYTE PTR [rax+r11+224]
  000ac	8b 54 24 28	 mov	 edx, DWORD PTR t$80627[rsp]
  000b0	33 d0		 xor	 edx, eax
  000b2	8b 4c 24 24	 mov	 ecx, DWORD PTR i$80626[rsp]
  000b6	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000bb	88 94 08 e0 00
	00 00		 mov	 BYTE PTR [rax+rcx+224], dl
  000c2	e9 66 ff ff ff	 jmp	 $LN3@zipFlushWr
$LN2@zipFlushWr:
$LN5@zipFlushWr:

; 957  : #endif
; 958  :     }
; 959  :     if (ZWRITE(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data)
; 960  :                                                                     !=zi->ci.pos_in_buffered_data)

  000c7	4c 8b 44 24 40	 mov	 r8, QWORD PTR zi$[rsp]
  000cc	49 81 c0 e0 00
	00 00		 add	 r8, 224			; 000000e0H
  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000d8	44 8b 88 bc 00
	00 00		 mov	 r9d, DWORD PTR [rax+188]
  000df	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000e4	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000ed	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000f6	ff 50 10	 call	 QWORD PTR [rax+16]
  000f9	44 8b d8	 mov	 r11d, eax
  000fc	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00101	44 3b 98 bc 00
	00 00		 cmp	 r11d, DWORD PTR [rax+188]
  00108	74 08		 je	 SHORT $LN1@zipFlushWr

; 961  :       err = ZIP_ERRNO;

  0010a	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@zipFlushWr:

; 962  :     zi->ci.pos_in_buffered_data = 0;

  00112	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00117	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+188], 0

; 963  :     return err;

  00121	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 964  : }

  00125	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00129	c3		 ret	 0
zipFlushWriteBuffer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ziplocal_getLong DD imagerel ziplocal_getLong
	DD	imagerel ziplocal_getLong+235
	DD	imagerel $unwind$ziplocal_getLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_getLong DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_getLong
_TEXT	SEGMENT
x$ = 32
i$ = 36
err$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
ziplocal_getLong PROC					; COMDAT

; 402  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 403  :     uLong x ;
; 404  :     int i;
; 405  :     int err;
; 406  : 
; 407  :     err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00013	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00022	e8 00 00 00 00	 call	 ziplocal_getByte
  00027	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 408  :     x = (uLong)i;

  0002b	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0002f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 409  : 
; 410  :     if (err==ZIP_OK)

  00033	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00038	75 18		 jne	 SHORT $LN5@ziplocal_g@2

; 411  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	e8 00 00 00 00	 call	 ziplocal_getByte
  0004e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN5@ziplocal_g@2:

; 412  :     x += ((uLong)i)<<8;

  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00056	c1 e1 08	 shl	 ecx, 8
  00059	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0005d	03 c1		 add	 eax, ecx
  0005f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 413  : 
; 414  :     if (err==ZIP_OK)

  00063	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00068	75 18		 jne	 SHORT $LN4@ziplocal_g@2

; 415  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  0006a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0006f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	e8 00 00 00 00	 call	 ziplocal_getByte
  0007e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN4@ziplocal_g@2:

; 416  :     x += ((uLong)i)<<16;

  00082	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00086	c1 e1 10	 shl	 ecx, 16
  00089	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0008d	03 c1		 add	 eax, ecx
  0008f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 417  : 
; 418  :     if (err==ZIP_OK)

  00093	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00098	75 18		 jne	 SHORT $LN3@ziplocal_g@2

; 419  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  0009a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0009f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000a9	e8 00 00 00 00	 call	 ziplocal_getByte
  000ae	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN3@ziplocal_g@2:

; 420  :     x += ((uLong)i)<<24;

  000b2	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  000b6	c1 e1 18	 shl	 ecx, 24
  000b9	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000bd	03 c1		 add	 eax, ecx
  000bf	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 421  : 
; 422  :     if (err==ZIP_OK)

  000c3	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000c8	75 0d		 jne	 SHORT $LN2@ziplocal_g@2

; 423  :         *pX = x;

  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000d3	89 01		 mov	 DWORD PTR [rcx], eax

; 424  :     else

  000d5	eb 0b		 jmp	 SHORT $LN1@ziplocal_g@2
$LN2@ziplocal_g@2:

; 425  :         *pX = 0;

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  000dc	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@ziplocal_g@2:

; 426  :     return err;

  000e2	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 427  : }

  000e6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ea	c3		 ret	 0
ziplocal_getLong ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ziplocal_getShort DD imagerel ziplocal_getShort
	DD	imagerel ziplocal_getShort+139
	DD	imagerel $unwind$ziplocal_getShort
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ziplocal_getShort DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ziplocal_getShort
_TEXT	SEGMENT
x$ = 32
i$ = 36
err$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
ziplocal_getShort PROC					; COMDAT

; 374  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 375  :     uLong x ;
; 376  :     int i;
; 377  :     int err;
; 378  : 
; 379  :     err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  00013	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00022	e8 00 00 00 00	 call	 ziplocal_getByte
  00027	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 380  :     x = (uLong)i;

  0002b	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0002f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  00033	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00038	75 18		 jne	 SHORT $LN3@ziplocal_g@3

; 383  :         err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	e8 00 00 00 00	 call	 ziplocal_getByte
  0004e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN3@ziplocal_g@3:

; 384  :     x += ((uLong)i)<<8;

  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00056	c1 e1 08	 shl	 ecx, 8
  00059	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0005d	03 c1		 add	 eax, ecx
  0005f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 385  : 
; 386  :     if (err==ZIP_OK)

  00063	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00068	75 0d		 jne	 SHORT $LN2@ziplocal_g@3

; 387  :         *pX = x;

  0006a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  0006f	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00073	89 01		 mov	 DWORD PTR [rcx], eax

; 388  :     else

  00075	eb 0b		 jmp	 SHORT $LN1@ziplocal_g@3
$LN2@ziplocal_g@3:

; 389  :         *pX = 0;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@ziplocal_g@3:

; 390  :     return err;

  00082	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 391  : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
ziplocal_getShort ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_data_in_datablock DD imagerel add_data_in_datablock
	DD	imagerel add_data_in_datablock+418
	DD	imagerel $unwind$add_data_in_datablock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_data_in_datablock DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_data_in_datablock
_TEXT	SEGMENT
from_copy$ = 32
ldi$ = 40
copy_this$80216 = 48
to_copy$80218 = 56
i$80217 = 64
ll$ = 96
buf$ = 104
len$ = 112
add_data_in_datablock PROC				; COMDAT

; 204  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 205  :     linkedlist_datablock_internal* ldi;
; 206  :     const unsigned char* from_copy;
; 207  : 
; 208  :     if (ll==NULL)

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR ll$[rsp], 0
  00019	75 0a		 jne	 SHORT $LN12@add_data_i

; 209  :         return ZIP_INTERNALERROR;

  0001b	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00020	e9 78 01 00 00	 jmp	 $LN13@add_data_i
$LN12@add_data_i:

; 210  : 
; 211  :     if (ll->last_block == NULL)

  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0002a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002f	75 37		 jne	 SHORT $LN11@add_data_i

; 212  :     {
; 213  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00031	e8 00 00 00 00	 call	 allocate_new_datablock
  00036	4c 8b d8	 mov	 r11, rax
  00039	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0003e	4c 89 58 08	 mov	 QWORD PTR [rax+8], r11
  00042	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ll$[rsp]
  00047	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0004c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00050	48 89 01	 mov	 QWORD PTR [rcx], rax

; 214  :         if (ll->first_block == NULL)

  00053	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  00058	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005c	75 0a		 jne	 SHORT $LN10@add_data_i

; 215  :             return ZIP_INTERNALERROR;

  0005e	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00063	e9 35 01 00 00	 jmp	 $LN13@add_data_i
$LN10@add_data_i:
$LN11@add_data_i:

; 216  :     }
; 217  : 
; 218  :     ldi = ll->last_block;

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0006d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00071	48 89 44 24 28	 mov	 QWORD PTR ldi$[rsp], rax

; 219  :     from_copy = (unsigned char*)buf;

  00076	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  0007b	48 89 44 24 20	 mov	 QWORD PTR from_copy$[rsp], rax
$LN9@add_data_i:

; 220  : 
; 221  :     while (len>0)

  00080	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00085	0f 86 10 01 00
	00		 jbe	 $LN8@add_data_i

; 222  :     {
; 223  :         uInt copy_this;
; 224  :         uInt i;
; 225  :         unsigned char* to_copy;
; 226  : 
; 227  :         if (ldi->avail_in_this_block==0)

  0008b	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00090	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00094	75 40		 jne	 SHORT $LN7@add_data_i

; 228  :         {
; 229  :             ldi->next_datablock = allocate_new_datablock();

  00096	e8 00 00 00 00	 call	 allocate_new_datablock
  0009b	4c 8b d8	 mov	 r11, rax
  0009e	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000a3	4c 89 18	 mov	 QWORD PTR [rax], r11

; 230  :             if (ldi->next_datablock == NULL)

  000a6	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000ab	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000af	75 0a		 jne	 SHORT $LN6@add_data_i

; 231  :                 return ZIP_INTERNALERROR;

  000b1	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  000b6	e9 e2 00 00 00	 jmp	 $LN13@add_data_i
$LN6@add_data_i:

; 232  :             ldi = ldi->next_datablock ;

  000bb	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 89 44 24 28	 mov	 QWORD PTR ldi$[rsp], rax

; 233  :             ll->last_block = ldi;

  000c8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ll$[rsp]
  000cd	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000d2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN7@add_data_i:

; 234  :         }
; 235  : 
; 236  :         if (ldi->avail_in_this_block < len)

  000d6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ldi$[rsp]
  000db	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  000df	39 41 08	 cmp	 DWORD PTR [rcx+8], eax
  000e2	73 0e		 jae	 SHORT $LN5@add_data_i

; 237  :             copy_this = (uInt)ldi->avail_in_this_block;

  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000e9	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000ec	89 44 24 30	 mov	 DWORD PTR copy_this$80216[rsp], eax

; 238  :         else

  000f0	eb 08		 jmp	 SHORT $LN4@add_data_i
$LN5@add_data_i:

; 239  :             copy_this = (uInt)len;

  000f2	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  000f6	89 44 24 30	 mov	 DWORD PTR copy_this$80216[rsp], eax
$LN4@add_data_i:

; 240  : 
; 241  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000ff	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00102	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00107	48 8d 44 08 14	 lea	 rax, QWORD PTR [rax+rcx+20]
  0010c	48 89 44 24 38	 mov	 QWORD PTR to_copy$80218[rsp], rax

; 242  : 
; 243  :         for (i=0;i<copy_this;i++)

  00111	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$80217[rsp], 0
  00119	eb 0b		 jmp	 SHORT $LN3@add_data_i
$LN2@add_data_i:
  0011b	8b 44 24 40	 mov	 eax, DWORD PTR i$80217[rsp]
  0011f	83 c0 01	 add	 eax, 1
  00122	89 44 24 40	 mov	 DWORD PTR i$80217[rsp], eax
$LN3@add_data_i:
  00126	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$80216[rsp]
  0012a	39 44 24 40	 cmp	 DWORD PTR i$80217[rsp], eax
  0012e	73 1d		 jae	 SHORT $LN1@add_data_i

; 244  :             *(to_copy+i)=*(from_copy+i);

  00130	44 8b 44 24 40	 mov	 r8d, DWORD PTR i$80217[rsp]
  00135	8b 54 24 40	 mov	 edx, DWORD PTR i$80217[rsp]
  00139	48 8b 4c 24 38	 mov	 rcx, QWORD PTR to_copy$80218[rsp]
  0013e	48 8b 44 24 20	 mov	 rax, QWORD PTR from_copy$[rsp]
  00143	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  00148	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0014b	eb ce		 jmp	 SHORT $LN2@add_data_i
$LN1@add_data_i:

; 245  : 
; 246  :         ldi->filled_in_this_block += copy_this;

  0014d	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00152	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00155	03 4c 24 30	 add	 ecx, DWORD PTR copy_this$80216[rsp]
  00159	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  0015e	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 247  :         ldi->avail_in_this_block -= copy_this;

  00161	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ldi$[rsp]
  00166	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$80216[rsp]
  0016a	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0016d	2b c8		 sub	 ecx, eax
  0016f	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00174	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 248  :         from_copy += copy_this ;

  00177	8b 4c 24 30	 mov	 ecx, DWORD PTR copy_this$80216[rsp]
  0017b	48 8b 44 24 20	 mov	 rax, QWORD PTR from_copy$[rsp]
  00180	48 03 c1	 add	 rax, rcx
  00183	48 89 44 24 20	 mov	 QWORD PTR from_copy$[rsp], rax

; 249  :         len -= copy_this;

  00188	8b 4c 24 30	 mov	 ecx, DWORD PTR copy_this$80216[rsp]
  0018c	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00190	2b c1		 sub	 eax, ecx
  00192	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 250  :     }

  00196	e9 e5 fe ff ff	 jmp	 $LN9@add_data_i
$LN8@add_data_i:

; 251  :     return ZIP_OK;

  0019b	33 c0		 xor	 eax, eax
$LN13@add_data_i:

; 252  : }

  0019d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a1	c3		 ret	 0
add_data_in_datablock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+111
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 66   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 67   :     *(pkeys+0) = 305419896L;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00018	c7 00 78 56 34
	12		 mov	 DWORD PTR [rax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0001e	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00023	c7 40 04 89 67
	45 23		 mov	 DWORD PTR [rax+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  0002a	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  0002f	c7 40 08 90 78
	56 34		 mov	 DWORD PTR [rax+8], 878082192 ; 34567890H
$LN2@init_keys:

; 70   :     while (*passwd != '\0') {

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0003b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003e	85 c0		 test	 eax, eax
  00040	74 28		 je	 SHORT $LN1@init_keys

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  00047	44 0f be 00	 movsx	 r8d, BYTE PTR [rax]
  0004b	48 8b 54 24 40	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00050	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00055	e8 00 00 00 00	 call	 update_keys

; 72   :         passwd++;

  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0005f	48 83 c0 01	 add	 rax, 1
  00063	48 89 44 24 30	 mov	 QWORD PTR passwd$[rsp], rax

; 73   :     }

  00068	eb cc		 jmp	 SHORT $LN2@init_keys
$LN1@init_keys:

; 74   : }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
init_keys ENDP
PUBLIC	zipCloseFileInZipRaw
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw DD imagerel $LN23
	DD	imagerel $LN23+991
	DD	imagerel $unwind$zipCloseFileInZipRaw
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipCloseFileInZipRaw
_TEXT	SEGMENT
compressed_size$ = 32
err$ = 36
zi$ = 40
uTotalOutBefore$80680 = 48
cur_pos_inzip$80698 = 52
file$ = 80
uncompressed_size$ = 88
crc32$ = 96
zipCloseFileInZipRaw PROC				; COMDAT

; 1035 : {

$LN23:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1036 :     zip_internal* zi;
; 1037 :     uLong compressed_size;
; 1038 :     int err=ZIP_OK;

  00012	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1039 : 
; 1040 :     if (file == NULL)

  0001a	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00020	75 0a		 jne	 SHORT $LN20@zipCloseFi

; 1041 :         return ZIP_PARAMERROR;

  00022	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00027	e9 ae 03 00 00	 jmp	 $LN21@zipCloseFi
$LN20@zipCloseFi:

; 1042 :     zi = (zip_internal*)file;

  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00031	48 89 44 24 28	 mov	 QWORD PTR zi$[rsp], rax

; 1043 : 
; 1044 :     if (zi->in_opened_file_inzip == 0)

  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0003b	83 78 58 00	 cmp	 DWORD PTR [rax+88], 0
  0003f	75 0a		 jne	 SHORT $LN19@zipCloseFi

; 1045 :         return ZIP_PARAMERROR;

  00041	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00046	e9 8f 03 00 00	 jmp	 $LN21@zipCloseFi
$LN19@zipCloseFi:

; 1046 :     zi->ci.stream.avail_in = 0;

  0004b	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00050	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 1047 : 
; 1048 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0005c	83 b8 d8 00 00
	00 08		 cmp	 DWORD PTR [rax+216], 8
  00063	0f 85 ac 00 00
	00		 jne	 $LN18@zipCloseFi
  00069	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0006e	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [rax+220], 0
  00075	0f 85 9a 00 00
	00		 jne	 $LN18@zipCloseFi
$LN17@zipCloseFi:

; 1049 :         while (err==ZIP_OK)

  0007b	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00080	0f 85 8f 00 00
	00		 jne	 $LN16@zipCloseFi

; 1050 :     {
; 1051 :         uLong uTotalOutBefore;
; 1052 :         if (zi->ci.stream.avail_out == 0)

  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0008b	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  0008f	75 38		 jne	 SHORT $LN15@zipCloseFi

; 1053 :         {
; 1054 :             if (zipFlushWriteBuffer(zi) == ZIP_ERRNO)

  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00096	e8 00 00 00 00	 call	 zipFlushWriteBuffer
  0009b	83 f8 ff	 cmp	 eax, -1
  0009e	75 08		 jne	 SHORT $LN14@zipCloseFi

; 1055 :                 err = ZIP_ERRNO;

  000a0	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN14@zipCloseFi:

; 1056 :             zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000a8	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000ad	c7 40 78 00 40
	00 00		 mov	 DWORD PTR [rax+120], 16384 ; 00004000H

; 1057 :             zi->ci.stream.next_out = zi->ci.buffered_data;

  000b4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000b9	48 81 c1 e0 00
	00 00		 add	 rcx, 224		; 000000e0H
  000c0	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000c5	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN15@zipCloseFi:

; 1058 :         }
; 1059 :         uTotalOutBefore = zi->ci.stream.total_out;

  000c9	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000ce	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  000d1	89 44 24 30	 mov	 DWORD PTR uTotalOutBefore$80680[rsp], eax

; 1060 :         err=deflate(&zi->ci.stream,  Z_FINISH);

  000d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000da	48 83 c1 60	 add	 rcx, 96			; 00000060H
  000de	ba 04 00 00 00	 mov	 edx, 4
  000e3	e8 00 00 00 00	 call	 deflate
  000e8	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax

; 1061 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000ec	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000f1	8b 44 24 30	 mov	 eax, DWORD PTR uTotalOutBefore$80680[rsp]
  000f5	8b 49 7c	 mov	 ecx, DWORD PTR [rcx+124]
  000f8	2b c8		 sub	 ecx, eax
  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000ff	03 88 bc 00 00
	00		 add	 ecx, DWORD PTR [rax+188]
  00105	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0010a	89 88 bc 00 00
	00		 mov	 DWORD PTR [rax+188], ecx

; 1062 :     }

  00110	e9 66 ff ff ff	 jmp	 $LN17@zipCloseFi
$LN16@zipCloseFi:
$LN18@zipCloseFi:

; 1063 : 
; 1064 :     if (err==Z_STREAM_END)

  00115	83 7c 24 24 01	 cmp	 DWORD PTR err$[rsp], 1
  0011a	75 08		 jne	 SHORT $LN13@zipCloseFi

; 1065 :         err=ZIP_OK; /* this is normal */

  0011c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0
$LN13@zipCloseFi:

; 1066 : 
; 1067 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  00124	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00129	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [rax+188], 0
  00130	76 1e		 jbe	 SHORT $LN12@zipCloseFi
  00132	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00137	75 17		 jne	 SHORT $LN12@zipCloseFi

; 1068 :         if (zipFlushWriteBuffer(zi)==ZIP_ERRNO)

  00139	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0013e	e8 00 00 00 00	 call	 zipFlushWriteBuffer
  00143	83 f8 ff	 cmp	 eax, -1
  00146	75 08		 jne	 SHORT $LN11@zipCloseFi

; 1069 :             err = ZIP_ERRNO;

  00148	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN11@zipCloseFi:
$LN12@zipCloseFi:

; 1070 : 
; 1071 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00150	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00155	83 b8 d8 00 00
	00 08		 cmp	 DWORD PTR [rax+216], 8
  0015c	75 2f		 jne	 SHORT $LN10@zipCloseFi
  0015e	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00163	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [rax+220], 0
  0016a	75 21		 jne	 SHORT $LN10@zipCloseFi

; 1072 :     {
; 1073 :         err=deflateEnd(&zi->ci.stream);

  0016c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00171	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00175	e8 00 00 00 00	 call	 deflateEnd
  0017a	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax

; 1074 :         zi->ci.stream_initialised = 0;

  0017e	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00183	c7 80 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+184], 0
$LN10@zipCloseFi:

; 1075 :     }
; 1076 : 
; 1077 :     if (!zi->ci.raw)

  0018d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00192	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [rax+220], 0
  00199	75 1b		 jne	 SHORT $LN9@zipCloseFi

; 1078 :     {
; 1079 :         crc32 = (uLong)zi->ci.crc32;

  0019b	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001a0	8b 80 e4 40 00
	00		 mov	 eax, DWORD PTR [rax+16612]
  001a6	89 44 24 60	 mov	 DWORD PTR crc32$[rsp], eax

; 1080 :         uncompressed_size = (uLong)zi->ci.stream.total_in;

  001aa	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001af	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  001b2	89 44 24 58	 mov	 DWORD PTR uncompressed_size$[rsp], eax
$LN9@zipCloseFi:

; 1081 :     }
; 1082 :     compressed_size = (uLong)zi->ci.stream.total_out;

  001b6	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001bb	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  001be	89 44 24 20	 mov	 DWORD PTR compressed_size$[rsp], eax

; 1083 : #    ifndef NOCRYPT
; 1084 :     compressed_size += zi->ci.crypt_header_size;

  001c2	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001c7	8b 88 00 41 00
	00		 mov	 ecx, DWORD PTR [rax+16640]
  001cd	8b 44 24 20	 mov	 eax, DWORD PTR compressed_size$[rsp]
  001d1	03 c1		 add	 eax, ecx
  001d3	89 44 24 20	 mov	 DWORD PTR compressed_size$[rsp], eax

; 1085 : #    endif
; 1086 : 
; 1087 :     ziplocal_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  001d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  001dc	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  001e3	48 83 c1 10	 add	 rcx, 16
  001e7	41 b8 04 00 00
	00		 mov	 r8d, 4
  001ed	8b 54 24 60	 mov	 edx, DWORD PTR crc32$[rsp]
  001f1	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 1088 :     ziplocal_putValue_inmemory(zi->ci.central_header+20,
; 1089 :                                 compressed_size,4); /*compr size*/

  001f6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  001fb	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00202	48 83 c1 14	 add	 rcx, 20
  00206	41 b8 04 00 00
	00		 mov	 r8d, 4
  0020c	8b 54 24 20	 mov	 edx, DWORD PTR compressed_size$[rsp]
  00210	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 1090 :     if (zi->ci.stream.data_type == Z_ASCII)

  00215	4c 8b 5c 24 28	 mov	 r11, QWORD PTR zi$[rsp]
  0021a	41 83 bb a8 00
	00 00 01	 cmp	 DWORD PTR [r11+168], 1
  00222	75 20		 jne	 SHORT $LN8@zipCloseFi

; 1091 :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  00224	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00229	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00230	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00234	41 b8 02 00 00
	00		 mov	 r8d, 2
  0023a	ba 01 00 00 00	 mov	 edx, 1
  0023f	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory
$LN8@zipCloseFi:

; 1092 :     ziplocal_putValue_inmemory(zi->ci.central_header+24,
; 1093 :                                 uncompressed_size,4); /*uncompr size*/

  00244	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00249	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00250	48 83 c1 18	 add	 rcx, 24
  00254	41 b8 04 00 00
	00		 mov	 r8d, 4
  0025a	8b 54 24 58	 mov	 edx, DWORD PTR uncompressed_size$[rsp]
  0025e	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 1094 : 
; 1095 :     if (err==ZIP_OK)

  00263	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00268	75 2a		 jne	 SHORT $LN7@zipCloseFi

; 1096 :         err = add_data_in_datablock(&zi->central_dir,zi->ci.central_header,
; 1097 :                                        (uLong)zi->ci.size_centralheader);

  0026a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0026f	48 83 c1 48	 add	 rcx, 72			; 00000048H
  00273	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00278	44 8b 80 d0 00
	00 00		 mov	 r8d, DWORD PTR [rax+208]
  0027f	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  00284	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  0028b	e8 00 00 00 00	 call	 add_data_in_datablock
  00290	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN7@zipCloseFi:

; 1098 :     free(zi->ci.central_header);

  00294	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00299	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1099 : 
; 1100 :     if (err==ZIP_OK)

  002a6	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  002ab	0f 85 00 01 00
	00		 jne	 $LN6@zipCloseFi

; 1101 :     {
; 1102 :         long cur_pos_inzip = ZTELL(zi->z_filefunc,zi->filestream);

  002b1	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  002b6	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002ba	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  002bf	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002c3	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002c8	ff 50 18	 call	 QWORD PTR [rax+24]
  002cb	89 44 24 34	 mov	 DWORD PTR cur_pos_inzip$80698[rsp], eax

; 1103 :         if (ZSEEK(zi->z_filefunc,zi->filestream,
; 1104 :                   zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  002cf	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002d4	44 8b 80 c0 00
	00 00		 mov	 r8d, DWORD PTR [rax+192]
  002db	41 83 c0 0e	 add	 r8d, 14
  002df	45 33 c9	 xor	 r9d, r9d
  002e2	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  002e7	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  002f0	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002f4	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002f9	ff 50 20	 call	 QWORD PTR [rax+32]
  002fc	85 c0		 test	 eax, eax
  002fe	74 08		 je	 SHORT $LN5@zipCloseFi

; 1105 :             err = ZIP_ERRNO;

  00300	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN5@zipCloseFi:

; 1106 : 
; 1107 :         if (err==ZIP_OK)

  00308	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  0030d	75 22		 jne	 SHORT $LN4@zipCloseFi

; 1108 :             err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  0030f	41 b9 04 00 00
	00		 mov	 r9d, 4
  00315	44 8b 44 24 60	 mov	 r8d, DWORD PTR crc32$[rsp]
  0031a	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  0031f	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00323	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00328	e8 00 00 00 00	 call	 ziplocal_putValue
  0032d	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN4@zipCloseFi:

; 1109 : 
; 1110 :         if (err==ZIP_OK) /* compressed size, unknown */

  00331	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00336	75 22		 jne	 SHORT $LN3@zipCloseFi

; 1111 :             err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  00338	41 b9 04 00 00
	00		 mov	 r9d, 4
  0033e	44 8b 44 24 20	 mov	 r8d, DWORD PTR compressed_size$[rsp]
  00343	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  00348	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0034c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00351	e8 00 00 00 00	 call	 ziplocal_putValue
  00356	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN3@zipCloseFi:

; 1112 : 
; 1113 :         if (err==ZIP_OK) /* uncompressed size, unknown */

  0035a	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  0035f	75 22		 jne	 SHORT $LN2@zipCloseFi

; 1114 :             err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  00361	41 b9 04 00 00
	00		 mov	 r9d, 4
  00367	44 8b 44 24 58	 mov	 r8d, DWORD PTR uncompressed_size$[rsp]
  0036c	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  00371	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00375	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0037a	e8 00 00 00 00	 call	 ziplocal_putValue
  0037f	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN2@zipCloseFi:

; 1115 : 
; 1116 :         if (ZSEEK(zi->z_filefunc,zi->filestream,
; 1117 :                   cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00383	45 33 c9	 xor	 r9d, r9d
  00386	44 8b 44 24 34	 mov	 r8d, DWORD PTR cur_pos_inzip$80698[rsp]
  0038b	48 8b 54 24 28	 mov	 rdx, QWORD PTR zi$[rsp]
  00390	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00394	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00399	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0039d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  003a2	ff 50 20	 call	 QWORD PTR [rax+32]
  003a5	85 c0		 test	 eax, eax
  003a7	74 08		 je	 SHORT $LN1@zipCloseFi

; 1118 :             err = ZIP_ERRNO;

  003a9	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@zipCloseFi:
$LN6@zipCloseFi:

; 1119 :     }
; 1120 : 
; 1121 :     zi->number_entry ++;

  003b1	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  003b6	8b 88 10 41 00
	00		 mov	 ecx, DWORD PTR [rax+16656]
  003bc	83 c1 01	 add	 ecx, 1
  003bf	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  003c4	89 88 10 41 00
	00		 mov	 DWORD PTR [rax+16656], ecx

; 1122 :     zi->in_opened_file_inzip = 0;

  003ca	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  003cf	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [rax+88], 0

; 1123 : 
; 1124 :     return err;

  003d6	8b 44 24 24	 mov	 eax, DWORD PTR err$[rsp]
$LN21@zipCloseFi:

; 1125 : }

  003da	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003de	c3		 ret	 0
zipCloseFileInZipRaw ENDP
_TEXT	ENDS
PUBLIC	zipWriteInFileInZip
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipWriteInFileInZip DD imagerel $LN17
	DD	imagerel $LN17+629
	DD	imagerel $unwind$zipWriteInFileInZip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipWriteInFileInZip DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipWriteInFileInZip
_TEXT	SEGMENT
err$ = 32
zi$ = 40
uTotalOutBefore$80652 = 48
copy_this$80655 = 52
i$80656 = 56
file$ = 80
buf$ = 88
len$ = 96
zipWriteInFileInZip PROC				; COMDAT

; 970  : {

$LN17:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 971  :     zip_internal* zi;
; 972  :     int err=ZIP_OK;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 973  : 
; 974  :     if (file == NULL)

  0001b	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00021	75 0a		 jne	 SHORT $LN14@zipWriteIn

; 975  :         return ZIP_PARAMERROR;

  00023	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00028	e9 43 02 00 00	 jmp	 $LN15@zipWriteIn
$LN14@zipWriteIn:

; 976  :     zi = (zip_internal*)file;

  0002d	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR zi$[rsp], rax

; 977  : 
; 978  :     if (zi->in_opened_file_inzip == 0)

  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0003c	83 78 58 00	 cmp	 DWORD PTR [rax+88], 0
  00040	75 0a		 jne	 SHORT $LN13@zipWriteIn

; 979  :         return ZIP_PARAMERROR;

  00042	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00047	e9 24 02 00 00	 jmp	 $LN15@zipWriteIn
$LN13@zipWriteIn:

; 980  : 
; 981  :     zi->ci.stream.next_in = (void*)buf;

  0004c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00051	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  00056	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 982  :     zi->ci.stream.avail_in = len;

  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0005f	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  00063	89 41 68	 mov	 DWORD PTR [rcx+104], eax

; 983  :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,len);

  00066	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  0006b	48 8b 54 24 58	 mov	 rdx, QWORD PTR buf$[rsp]
  00070	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00075	8b 88 e4 40 00
	00		 mov	 ecx, DWORD PTR [rax+16612]
  0007b	e8 00 00 00 00	 call	 crc32
  00080	44 8b d8	 mov	 r11d, eax
  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00088	44 89 98 e4 40
	00 00		 mov	 DWORD PTR [rax+16612], r11d
$LN12@zipWriteIn:

; 984  : 
; 985  :     while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  0008f	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00094	0f 85 d2 01 00
	00		 jne	 $LN11@zipWriteIn
  0009a	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0009f	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  000a3	0f 86 c3 01 00
	00		 jbe	 $LN11@zipWriteIn

; 986  :     {
; 987  :         if (zi->ci.stream.avail_out == 0)

  000a9	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000ae	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  000b2	75 38		 jne	 SHORT $LN10@zipWriteIn

; 988  :         {
; 989  :             if (zipFlushWriteBuffer(zi) == ZIP_ERRNO)

  000b4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000b9	e8 00 00 00 00	 call	 zipFlushWriteBuffer
  000be	83 f8 ff	 cmp	 eax, -1
  000c1	75 08		 jne	 SHORT $LN9@zipWriteIn

; 990  :                 err = ZIP_ERRNO;

  000c3	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@zipWriteIn:

; 991  :             zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000cb	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000d0	c7 40 78 00 40
	00 00		 mov	 DWORD PTR [rax+120], 16384 ; 00004000H

; 992  :             zi->ci.stream.next_out = zi->ci.buffered_data;

  000d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000dc	48 81 c1 e0 00
	00 00		 add	 rcx, 224		; 000000e0H
  000e3	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000e8	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN10@zipWriteIn:

; 993  :         }
; 994  : 
; 995  : 
; 996  :         if(err != ZIP_OK)

  000ec	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000f1	74 05		 je	 SHORT $LN8@zipWriteIn

; 997  :             break;

  000f3	e9 74 01 00 00	 jmp	 $LN11@zipWriteIn
$LN8@zipWriteIn:

; 998  : 
; 999  :         if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000f8	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000fd	83 b8 d8 00 00
	00 08		 cmp	 DWORD PTR [rax+216], 8
  00104	75 57		 jne	 SHORT $LN7@zipWriteIn
  00106	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0010b	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [rax+220], 0
  00112	75 49		 jne	 SHORT $LN7@zipWriteIn

; 1000 :         {
; 1001 :             uLong uTotalOutBefore = zi->ci.stream.total_out;

  00114	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00119	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  0011c	89 44 24 30	 mov	 DWORD PTR uTotalOutBefore$80652[rsp], eax

; 1002 :             err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  00120	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00125	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00129	33 d2		 xor	 edx, edx
  0012b	e8 00 00 00 00	 call	 deflate
  00130	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1003 :             zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00134	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00139	8b 44 24 30	 mov	 eax, DWORD PTR uTotalOutBefore$80652[rsp]
  0013d	8b 49 7c	 mov	 ecx, DWORD PTR [rcx+124]
  00140	2b c8		 sub	 ecx, eax
  00142	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00147	03 88 bc 00 00
	00		 add	 ecx, DWORD PTR [rax+188]
  0014d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00152	89 88 bc 00 00
	00		 mov	 DWORD PTR [rax+188], ecx

; 1004 : 
; 1005 :         }
; 1006 :         else

  00158	e9 0a 01 00 00	 jmp	 $LN6@zipWriteIn
$LN7@zipWriteIn:

; 1007 :         {
; 1008 :             uInt copy_this,i;
; 1009 :             if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  0015d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00162	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00167	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0016a	39 41 68	 cmp	 DWORD PTR [rcx+104], eax
  0016d	73 0e		 jae	 SHORT $LN5@zipWriteIn

; 1010 :                 copy_this = zi->ci.stream.avail_in;

  0016f	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00174	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00177	89 44 24 34	 mov	 DWORD PTR copy_this$80655[rsp], eax

; 1011 :             else

  0017b	eb 0c		 jmp	 SHORT $LN4@zipWriteIn
$LN5@zipWriteIn:

; 1012 :                 copy_this = zi->ci.stream.avail_out;

  0017d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00182	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00185	89 44 24 34	 mov	 DWORD PTR copy_this$80655[rsp], eax
$LN4@zipWriteIn:

; 1013 :             for (i=0;i<copy_this;i++)

  00189	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$80656[rsp], 0
  00191	eb 0b		 jmp	 SHORT $LN3@zipWriteIn
$LN2@zipWriteIn:
  00193	8b 44 24 38	 mov	 eax, DWORD PTR i$80656[rsp]
  00197	83 c0 01	 add	 eax, 1
  0019a	89 44 24 38	 mov	 DWORD PTR i$80656[rsp], eax
$LN3@zipWriteIn:
  0019e	8b 44 24 34	 mov	 eax, DWORD PTR copy_this$80655[rsp]
  001a2	39 44 24 38	 cmp	 DWORD PTR i$80656[rsp], eax
  001a6	73 25		 jae	 SHORT $LN1@zipWriteIn

; 1014 :                 *(((char*)zi->ci.stream.next_out)+i) =
; 1015 :                     *(((const char*)zi->ci.stream.next_in)+i);

  001a8	44 8b 44 24 38	 mov	 r8d, DWORD PTR i$80656[rsp]
  001ad	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001b2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001b6	8b 54 24 38	 mov	 edx, DWORD PTR i$80656[rsp]
  001ba	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  001bf	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  001c3	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  001c8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001cb	eb c6		 jmp	 SHORT $LN2@zipWriteIn
$LN1@zipWriteIn:

; 1016 :             {
; 1017 :                 zi->ci.stream.avail_in -= copy_this;

  001cd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  001d2	8b 44 24 34	 mov	 eax, DWORD PTR copy_this$80655[rsp]
  001d6	8b 49 68	 mov	 ecx, DWORD PTR [rcx+104]
  001d9	2b c8		 sub	 ecx, eax
  001db	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001e0	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 1018 :                 zi->ci.stream.avail_out-= copy_this;

  001e3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  001e8	8b 44 24 34	 mov	 eax, DWORD PTR copy_this$80655[rsp]
  001ec	8b 49 78	 mov	 ecx, DWORD PTR [rcx+120]
  001ef	2b c8		 sub	 ecx, eax
  001f1	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001f6	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 1019 :                 zi->ci.stream.next_in+= copy_this;

  001f9	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_this$80655[rsp]
  001fd	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00202	48 03 48 60	 add	 rcx, QWORD PTR [rax+96]
  00206	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0020b	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1020 :                 zi->ci.stream.next_out+= copy_this;

  0020f	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_this$80655[rsp]
  00213	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00218	48 03 48 70	 add	 rcx, QWORD PTR [rax+112]
  0021c	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00221	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1021 :                 zi->ci.stream.total_in+= copy_this;

  00225	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0022a	8b 48 6c	 mov	 ecx, DWORD PTR [rax+108]
  0022d	03 4c 24 34	 add	 ecx, DWORD PTR copy_this$80655[rsp]
  00231	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00236	89 48 6c	 mov	 DWORD PTR [rax+108], ecx

; 1022 :                 zi->ci.stream.total_out+= copy_this;

  00239	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0023e	8b 48 7c	 mov	 ecx, DWORD PTR [rax+124]
  00241	03 4c 24 34	 add	 ecx, DWORD PTR copy_this$80655[rsp]
  00245	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0024a	89 48 7c	 mov	 DWORD PTR [rax+124], ecx

; 1023 :                 zi->ci.pos_in_buffered_data += copy_this;

  0024d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00252	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [rax+188]
  00258	03 4c 24 34	 add	 ecx, DWORD PTR copy_this$80655[rsp]
  0025c	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00261	89 88 bc 00 00
	00		 mov	 DWORD PTR [rax+188], ecx
$LN6@zipWriteIn:

; 1024 :             }
; 1025 :         }
; 1026 :     }

  00267	e9 23 fe ff ff	 jmp	 $LN12@zipWriteIn
$LN11@zipWriteIn:

; 1027 : 
; 1028 :     return err;

  0026c	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN15@zipWriteIn:

; 1029 : }

  00270	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00274	c3		 ret	 0
zipWriteInFileInZip ENDP
_TEXT	ENDS
PUBLIC	$T82465
PUBLIC	zipOpen2
EXTRN	__chkstk:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2 DD imagerel $LN39
	DD	imagerel $LN39+1443
	DD	imagerel $unwind$zipOpen2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2 DD 042201H
	DD	083d0122H
	DD	060147015H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen2
_TEXT	SEGMENT
err$ = 32
zi$ = 40
ziinit$ = 48
size_comment$80423 = 16720
number_disk$80419 = 16724
number_entry$80421 = 16728
uL$80418 = 16732
offset_central_dir$80416 = 16736
byte_before_the_zipfile$80414 = 16740
size_central_dir$80415 = 16744
number_entry_CD$80422 = 16748
number_disk_with_CD$80420 = 16752
central_pos$80417 = 16756
buf_size$80442 = 16760
size_central_dir_to_read$80441 = 16768
buf_read$80443 = 16776
read_this$80449 = 16784
$T82465 = 16792
tv69 = 16856
pathname$ = 16896
append$ = 16904
globalcomment$ = 16912
pzlib_filefunc_def$ = 16920
zipOpen2 PROC						; COMDAT

; 504  : {

$LN39:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	b8 e8 41 00 00	 mov	 eax, 16872		; 000041e8H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax

; 505  :     zip_internal ziinit;
; 506  :     zip_internal* zi;
; 507  :     int err=ZIP_OK;

  00022	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 508  : 
; 509  : 
; 510  :     if (pzlib_filefunc_def==NULL)

  0002a	48 83 bc 24 18
	42 00 00 00	 cmp	 QWORD PTR pzlib_filefunc_def$[rsp], 0
  00033	75 0c		 jne	 SHORT $LN34@zipOpen2

; 511  :         fill_fopen_filefunc(&ziinit.z_filefunc);

  00035	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  0003a	e8 00 00 00 00	 call	 fill_fopen_filefunc

; 512  :     else

  0003f	eb 2b		 jmp	 SHORT $LN33@zipOpen2
$LN34@zipOpen2:

; 513  :         ziinit.z_filefunc = *pzlib_filefunc_def;

  00041	48 8d bc 24 98
	41 00 00	 lea	 rdi, QWORD PTR $T82465[rsp]
  00049	48 8b b4 24 18
	42 00 00	 mov	 rsi, QWORD PTR pzlib_filefunc_def$[rsp]
  00051	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00056	f3 a4		 rep movsb
  00058	48 8d 7c 24 30	 lea	 rdi, QWORD PTR ziinit$[rsp]
  0005d	48 8d b4 24 98
	41 00 00	 lea	 rsi, QWORD PTR $T82465[rsp]
  00065	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0006a	f3 a4		 rep movsb
$LN33@zipOpen2:

; 514  : 
; 515  :     ziinit.filestream = (*(ziinit.z_filefunc.zopen_file))
; 516  :                  (ziinit.z_filefunc.opaque,
; 517  :                   pathname,
; 518  :                   (append == APPEND_STATUS_CREATE) ?
; 519  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 520  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));

  0006c	83 bc 24 08 42
	00 00 00	 cmp	 DWORD PTR append$[rsp], 0
  00074	75 0d		 jne	 SHORT $LN37@zipOpen2
  00076	c7 84 24 d8 41
	00 00 0b 00 00
	00		 mov	 DWORD PTR tv69[rsp], 11
  00081	eb 0b		 jmp	 SHORT $LN38@zipOpen2
$LN37@zipOpen2:
  00083	c7 84 24 d8 41
	00 00 07 00 00
	00		 mov	 DWORD PTR tv69[rsp], 7
$LN38@zipOpen2:
  0008e	44 8b 84 24 d8
	41 00 00	 mov	 r8d, DWORD PTR tv69[rsp]
  00096	48 8b 94 24 00
	42 00 00	 mov	 rdx, QWORD PTR pathname$[rsp]
  0009e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  000a3	ff 54 24 30	 call	 QWORD PTR ziinit$[rsp]
  000a7	48 89 44 24 70	 mov	 QWORD PTR ziinit$[rsp+64], rax

; 521  : 
; 522  :     if (ziinit.filestream == NULL)

  000ac	48 83 7c 24 70
	00		 cmp	 QWORD PTR ziinit$[rsp+64], 0
  000b2	75 07		 jne	 SHORT $LN32@zipOpen2

; 523  :         return NULL;

  000b4	33 c0		 xor	 eax, eax
  000b6	e9 de 04 00 00	 jmp	 $LN35@zipOpen2
$LN32@zipOpen2:

; 524  :     ziinit.begin_pos = ZTELL(ziinit.z_filefunc,ziinit.filestream);

  000bb	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  000c0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  000c5	ff 54 24 48	 call	 QWORD PTR ziinit$[rsp+24]
  000c9	89 84 24 38 41
	00 00		 mov	 DWORD PTR ziinit$[rsp+16648], eax

; 525  :     ziinit.in_opened_file_inzip = 0;

  000d0	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+88], 0

; 526  :     ziinit.ci.stream_initialised = 0;

  000db	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+184], 0

; 527  :     ziinit.number_entry = 0;

  000e6	c7 84 24 40 41
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+16656], 0

; 528  :     ziinit.add_position_when_writting_offset = 0;

  000f1	c7 84 24 3c 41
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+16652], 0

; 529  :     init_linkedlist(&(ziinit.central_dir));

  000fc	48 8d 4c 24 78	 lea	 rcx, QWORD PTR ziinit$[rsp+72]
  00101	e8 00 00 00 00	 call	 init_linkedlist

; 530  : 
; 531  : 
; 532  :     zi = (zip_internal*)ALLOC(sizeof(zip_internal));

  00106	b9 20 41 00 00	 mov	 ecx, 16672		; 00004120H
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00111	48 89 44 24 28	 mov	 QWORD PTR zi$[rsp], rax

; 533  :     if (zi==NULL)

  00116	48 83 7c 24 28
	00		 cmp	 QWORD PTR zi$[rsp], 0
  0011c	75 15		 jne	 SHORT $LN31@zipOpen2

; 534  :     {
; 535  :         ZCLOSE(ziinit.z_filefunc,ziinit.filestream);

  0011e	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00123	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  00128	ff 54 24 58	 call	 QWORD PTR ziinit$[rsp+40]

; 536  :         return NULL;

  0012c	33 c0		 xor	 eax, eax
  0012e	e9 66 04 00 00	 jmp	 $LN35@zipOpen2
$LN31@zipOpen2:

; 537  :     }
; 538  : 
; 539  :     /* now we add file in a zipfile */
; 540  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 541  :     ziinit.globalcomment = NULL;

  00133	48 c7 84 24 48
	41 00 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+16664], 0

; 542  :     if (append == APPEND_STATUS_ADDINZIP)

  0013f	83 bc 24 08 42
	00 00 02	 cmp	 DWORD PTR append$[rsp], 2
  00147	0f 85 df 03 00
	00		 jne	 $LN30@zipOpen2

; 543  :     {
; 544  :         uLong byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 545  : 
; 546  :         uLong size_central_dir;     /* size of the central directory  */
; 547  :         uLong offset_central_dir;   /* offset of start of central directory */
; 548  :         uLong central_pos,uL;
; 549  : 
; 550  :         uLong number_disk;          /* number of the current dist, used for
; 551  :                                     spaning ZIP, unsupported, always 0*/
; 552  :         uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 553  :                                     for spaning ZIP, unsupported, always 0*/
; 554  :         uLong number_entry;
; 555  :         uLong number_entry_CD;      /* total number of entries in
; 556  :                                     the central dir
; 557  :                                     (same than number_entry on nospan) */
; 558  :         uLong size_comment;
; 559  : 
; 560  :         central_pos = ziplocal_SearchCentralDir(&ziinit.z_filefunc,ziinit.filestream);

  0014d	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00152	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00157	e8 00 00 00 00	 call	 ziplocal_SearchCentralDir
  0015c	89 84 24 74 41
	00 00		 mov	 DWORD PTR central_pos$80417[rsp], eax

; 561  :         if (central_pos==0)

  00163	83 bc 24 74 41
	00 00 00	 cmp	 DWORD PTR central_pos$80417[rsp], 0
  0016b	75 08		 jne	 SHORT $LN29@zipOpen2

; 562  :             err=ZIP_ERRNO;

  0016d	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN29@zipOpen2:

; 563  : 
; 564  :         if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
; 565  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00175	45 33 c9	 xor	 r9d, r9d
  00178	44 8b 84 24 74
	41 00 00	 mov	 r8d, DWORD PTR central_pos$80417[rsp]
  00180	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00185	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  0018a	ff 54 24 50	 call	 QWORD PTR ziinit$[rsp+32]
  0018e	85 c0		 test	 eax, eax
  00190	74 08		 je	 SHORT $LN28@zipOpen2

; 566  :             err=ZIP_ERRNO;

  00192	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN28@zipOpen2:

; 567  : 
; 568  :         /* the signature, already checked */
; 569  :         if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&uL)!=ZIP_OK)

  0019a	4c 8d 84 24 5c
	41 00 00	 lea	 r8, QWORD PTR uL$80418[rsp]
  001a2	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  001a7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  001ac	e8 00 00 00 00	 call	 ziplocal_getLong
  001b1	85 c0		 test	 eax, eax
  001b3	74 08		 je	 SHORT $LN27@zipOpen2

; 570  :             err=ZIP_ERRNO;

  001b5	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN27@zipOpen2:

; 571  : 
; 572  :         /* number of this disk */
; 573  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_disk)!=ZIP_OK)

  001bd	4c 8d 84 24 54
	41 00 00	 lea	 r8, QWORD PTR number_disk$80419[rsp]
  001c5	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  001ca	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  001cf	e8 00 00 00 00	 call	 ziplocal_getShort
  001d4	85 c0		 test	 eax, eax
  001d6	74 08		 je	 SHORT $LN26@zipOpen2

; 574  :             err=ZIP_ERRNO;

  001d8	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN26@zipOpen2:

; 575  : 
; 576  :         /* number of the disk with the start of the central directory */
; 577  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_disk_with_CD)!=ZIP_OK)

  001e0	4c 8d 84 24 70
	41 00 00	 lea	 r8, QWORD PTR number_disk_with_CD$80420[rsp]
  001e8	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  001ed	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  001f2	e8 00 00 00 00	 call	 ziplocal_getShort
  001f7	85 c0		 test	 eax, eax
  001f9	74 08		 je	 SHORT $LN25@zipOpen2

; 578  :             err=ZIP_ERRNO;

  001fb	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN25@zipOpen2:

; 579  : 
; 580  :         /* total number of entries in the central dir on this disk */
; 581  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_entry)!=ZIP_OK)

  00203	4c 8d 84 24 58
	41 00 00	 lea	 r8, QWORD PTR number_entry$80421[rsp]
  0020b	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00210	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00215	e8 00 00 00 00	 call	 ziplocal_getShort
  0021a	85 c0		 test	 eax, eax
  0021c	74 08		 je	 SHORT $LN24@zipOpen2

; 582  :             err=ZIP_ERRNO;

  0021e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN24@zipOpen2:

; 583  : 
; 584  :         /* total number of entries in the central dir */
; 585  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_entry_CD)!=ZIP_OK)

  00226	4c 8d 84 24 6c
	41 00 00	 lea	 r8, QWORD PTR number_entry_CD$80422[rsp]
  0022e	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00233	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00238	e8 00 00 00 00	 call	 ziplocal_getShort
  0023d	85 c0		 test	 eax, eax
  0023f	74 08		 je	 SHORT $LN23@zipOpen2

; 586  :             err=ZIP_ERRNO;

  00241	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN23@zipOpen2:

; 587  : 
; 588  :         if ((number_entry_CD!=number_entry) ||
; 589  :             (number_disk_with_CD!=0) ||
; 590  :             (number_disk!=0))

  00249	8b 84 24 58 41
	00 00		 mov	 eax, DWORD PTR number_entry$80421[rsp]
  00250	39 84 24 6c 41
	00 00		 cmp	 DWORD PTR number_entry_CD$80422[rsp], eax
  00257	75 14		 jne	 SHORT $LN21@zipOpen2
  00259	83 bc 24 70 41
	00 00 00	 cmp	 DWORD PTR number_disk_with_CD$80420[rsp], 0
  00261	75 0a		 jne	 SHORT $LN21@zipOpen2
  00263	83 bc 24 54 41
	00 00 00	 cmp	 DWORD PTR number_disk$80419[rsp], 0
  0026b	74 08		 je	 SHORT $LN22@zipOpen2
$LN21@zipOpen2:

; 591  :             err=ZIP_BADZIPFILE;

  0026d	c7 44 24 20 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN22@zipOpen2:

; 592  : 
; 593  :         /* size of the central directory */
; 594  :         if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&size_central_dir)!=ZIP_OK)

  00275	4c 8d 84 24 68
	41 00 00	 lea	 r8, QWORD PTR size_central_dir$80415[rsp]
  0027d	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00282	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00287	e8 00 00 00 00	 call	 ziplocal_getLong
  0028c	85 c0		 test	 eax, eax
  0028e	74 08		 je	 SHORT $LN20@zipOpen2

; 595  :             err=ZIP_ERRNO;

  00290	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN20@zipOpen2:

; 596  : 
; 597  :         /* offset of start of central directory with respect to the
; 598  :             starting disk number */
; 599  :         if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&offset_central_dir)!=ZIP_OK)

  00298	4c 8d 84 24 60
	41 00 00	 lea	 r8, QWORD PTR offset_central_dir$80416[rsp]
  002a0	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  002a5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  002aa	e8 00 00 00 00	 call	 ziplocal_getLong
  002af	85 c0		 test	 eax, eax
  002b1	74 08		 je	 SHORT $LN19@zipOpen2

; 600  :             err=ZIP_ERRNO;

  002b3	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN19@zipOpen2:

; 601  : 
; 602  :         /* zipfile global comment length */
; 603  :         if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&size_comment)!=ZIP_OK)

  002bb	4c 8d 84 24 50
	41 00 00	 lea	 r8, QWORD PTR size_comment$80423[rsp]
  002c3	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  002c8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  002cd	e8 00 00 00 00	 call	 ziplocal_getShort
  002d2	85 c0		 test	 eax, eax
  002d4	74 08		 je	 SHORT $LN18@zipOpen2

; 604  :             err=ZIP_ERRNO;

  002d6	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN18@zipOpen2:

; 605  : 
; 606  :         if ((central_pos<offset_central_dir+size_central_dir) &&
; 607  :             (err==ZIP_OK))

  002de	8b 8c 24 68 41
	00 00		 mov	 ecx, DWORD PTR size_central_dir$80415[rsp]
  002e5	8b 84 24 60 41
	00 00		 mov	 eax, DWORD PTR offset_central_dir$80416[rsp]
  002ec	03 c1		 add	 eax, ecx
  002ee	39 84 24 74 41
	00 00		 cmp	 DWORD PTR central_pos$80417[rsp], eax
  002f5	73 0f		 jae	 SHORT $LN17@zipOpen2
  002f7	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  002fc	75 08		 jne	 SHORT $LN17@zipOpen2

; 608  :             err=ZIP_BADZIPFILE;

  002fe	c7 44 24 20 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN17@zipOpen2:

; 609  : 
; 610  :         if (err!=ZIP_OK)

  00306	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0030b	74 15		 je	 SHORT $LN16@zipOpen2

; 611  :         {
; 612  :             ZCLOSE(ziinit.z_filefunc, ziinit.filestream);

  0030d	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00312	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  00317	ff 54 24 58	 call	 QWORD PTR ziinit$[rsp+40]

; 613  :             return NULL;

  0031b	33 c0		 xor	 eax, eax
  0031d	e9 77 02 00 00	 jmp	 $LN35@zipOpen2
$LN16@zipOpen2:

; 614  :         }
; 615  : 
; 616  :         if (size_comment>0)

  00322	83 bc 24 50 41
	00 00 00	 cmp	 DWORD PTR size_comment$80423[rsp], 0
  0032a	76 5d		 jbe	 SHORT $LN15@zipOpen2

; 617  :         {
; 618  :             ziinit.globalcomment = ALLOC(size_comment+1);

  0032c	8b 84 24 50 41
	00 00		 mov	 eax, DWORD PTR size_comment$80423[rsp]
  00333	83 c0 01	 add	 eax, 1
  00336	8b c8		 mov	 ecx, eax
  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0033e	48 89 84 24 48
	41 00 00	 mov	 QWORD PTR ziinit$[rsp+16664], rax

; 619  :             if (ziinit.globalcomment)

  00346	48 83 bc 24 48
	41 00 00 00	 cmp	 QWORD PTR ziinit$[rsp+16664], 0
  0034f	74 38		 je	 SHORT $LN14@zipOpen2

; 620  :             {
; 621  :                size_comment = ZREAD(ziinit.z_filefunc, ziinit.filestream,ziinit.globalcomment,size_comment);

  00351	44 8b 8c 24 50
	41 00 00	 mov	 r9d, DWORD PTR size_comment$80423[rsp]
  00359	4c 8b 84 24 48
	41 00 00	 mov	 r8, QWORD PTR ziinit$[rsp+16664]
  00361	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00366	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  0036b	ff 54 24 38	 call	 QWORD PTR ziinit$[rsp+8]
  0036f	89 84 24 50 41
	00 00		 mov	 DWORD PTR size_comment$80423[rsp], eax

; 622  :                ziinit.globalcomment[size_comment]=0;

  00376	8b 8c 24 50 41
	00 00		 mov	 ecx, DWORD PTR size_comment$80423[rsp]
  0037d	48 8b 84 24 48
	41 00 00	 mov	 rax, QWORD PTR ziinit$[rsp+16664]
  00385	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
$LN14@zipOpen2:
$LN15@zipOpen2:

; 623  :             }
; 624  :         }
; 625  : 
; 626  :         byte_before_the_zipfile = central_pos -
; 627  :                                 (offset_central_dir+size_central_dir);

  00389	8b 84 24 68 41
	00 00		 mov	 eax, DWORD PTR size_central_dir$80415[rsp]
  00390	8b 8c 24 60 41
	00 00		 mov	 ecx, DWORD PTR offset_central_dir$80416[rsp]
  00397	03 c8		 add	 ecx, eax
  00399	8b 84 24 74 41
	00 00		 mov	 eax, DWORD PTR central_pos$80417[rsp]
  003a0	2b c1		 sub	 eax, ecx
  003a2	89 84 24 64 41
	00 00		 mov	 DWORD PTR byte_before_the_zipfile$80414[rsp], eax

; 628  :         ziinit.add_position_when_writting_offset = byte_before_the_zipfile;

  003a9	8b 84 24 64 41
	00 00		 mov	 eax, DWORD PTR byte_before_the_zipfile$80414[rsp]
  003b0	89 84 24 3c 41
	00 00		 mov	 DWORD PTR ziinit$[rsp+16652], eax

; 629  : 
; 630  :         {
; 631  :             uLong size_central_dir_to_read = size_central_dir;

  003b7	8b 84 24 68 41
	00 00		 mov	 eax, DWORD PTR size_central_dir$80415[rsp]
  003be	89 84 24 80 41
	00 00		 mov	 DWORD PTR size_central_dir_to_read$80441[rsp], eax

; 632  :             size_t buf_size = SIZEDATA_INDATABLOCK;

  003c5	48 c7 84 24 78
	41 00 00 f0 0f
	00 00		 mov	 QWORD PTR buf_size$80442[rsp], 4080 ; 00000ff0H

; 633  :             void* buf_read = (void*)ALLOC(buf_size);

  003d1	48 8b 8c 24 78
	41 00 00	 mov	 rcx, QWORD PTR buf_size$80442[rsp]
  003d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  003df	48 89 84 24 88
	41 00 00	 mov	 QWORD PTR buf_read$80443[rsp], rax

; 634  :             if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
; 635  :                   offset_central_dir + byte_before_the_zipfile,
; 636  :                   ZLIB_FILEFUNC_SEEK_SET) != 0)

  003e7	8b 84 24 64 41
	00 00		 mov	 eax, DWORD PTR byte_before_the_zipfile$80414[rsp]
  003ee	44 8b 84 24 60
	41 00 00	 mov	 r8d, DWORD PTR offset_central_dir$80416[rsp]
  003f6	44 03 c0	 add	 r8d, eax
  003f9	45 33 c9	 xor	 r9d, r9d
  003fc	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00401	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  00406	ff 54 24 50	 call	 QWORD PTR ziinit$[rsp+32]
  0040a	85 c0		 test	 eax, eax
  0040c	74 08		 je	 SHORT $LN13@zipOpen2

; 637  :                   err=ZIP_ERRNO;

  0040e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN13@zipOpen2:
$LN12@zipOpen2:

; 638  : 
; 639  :             while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  00416	83 bc 24 80 41
	00 00 00	 cmp	 DWORD PTR size_central_dir_to_read$80441[rsp], 0
  0041e	0f 86 a4 00 00
	00		 jbe	 $LN11@zipOpen2
  00424	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00429	0f 85 99 00 00
	00		 jne	 $LN11@zipOpen2

; 640  :             {
; 641  :                 uLong read_this = SIZEDATA_INDATABLOCK;

  0042f	c7 84 24 90 41
	00 00 f0 0f 00
	00		 mov	 DWORD PTR read_this$80449[rsp], 4080 ; 00000ff0H

; 642  :                 if (read_this > size_central_dir_to_read)

  0043a	8b 84 24 80 41
	00 00		 mov	 eax, DWORD PTR size_central_dir_to_read$80441[rsp]
  00441	39 84 24 90 41
	00 00		 cmp	 DWORD PTR read_this$80449[rsp], eax
  00448	76 0e		 jbe	 SHORT $LN10@zipOpen2

; 643  :                     read_this = size_central_dir_to_read;

  0044a	8b 84 24 80 41
	00 00		 mov	 eax, DWORD PTR size_central_dir_to_read$80441[rsp]
  00451	89 84 24 90 41
	00 00		 mov	 DWORD PTR read_this$80449[rsp], eax
$LN10@zipOpen2:

; 644  :                 if (ZREAD(ziinit.z_filefunc, ziinit.filestream,buf_read,read_this) != read_this)

  00458	44 8b 8c 24 90
	41 00 00	 mov	 r9d, DWORD PTR read_this$80449[rsp]
  00460	4c 8b 84 24 88
	41 00 00	 mov	 r8, QWORD PTR buf_read$80443[rsp]
  00468	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  0046d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  00472	ff 54 24 38	 call	 QWORD PTR ziinit$[rsp+8]
  00476	3b 84 24 90 41
	00 00		 cmp	 eax, DWORD PTR read_this$80449[rsp]
  0047d	74 08		 je	 SHORT $LN9@zipOpen2

; 645  :                     err=ZIP_ERRNO;

  0047f	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@zipOpen2:

; 646  : 
; 647  :                 if (err==ZIP_OK)

  00487	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0048c	75 1e		 jne	 SHORT $LN8@zipOpen2

; 648  :                     err = add_data_in_datablock(&ziinit.central_dir,buf_read,
; 649  :                                                 (uLong)read_this);

  0048e	44 8b 84 24 90
	41 00 00	 mov	 r8d, DWORD PTR read_this$80449[rsp]
  00496	48 8b 94 24 88
	41 00 00	 mov	 rdx, QWORD PTR buf_read$80443[rsp]
  0049e	48 8d 4c 24 78	 lea	 rcx, QWORD PTR ziinit$[rsp+72]
  004a3	e8 00 00 00 00	 call	 add_data_in_datablock
  004a8	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN8@zipOpen2:

; 650  :                 size_central_dir_to_read-=read_this;

  004ac	8b 8c 24 90 41
	00 00		 mov	 ecx, DWORD PTR read_this$80449[rsp]
  004b3	8b 84 24 80 41
	00 00		 mov	 eax, DWORD PTR size_central_dir_to_read$80441[rsp]
  004ba	2b c1		 sub	 eax, ecx
  004bc	89 84 24 80 41
	00 00		 mov	 DWORD PTR size_central_dir_to_read$80441[rsp], eax

; 651  :             }

  004c3	e9 4e ff ff ff	 jmp	 $LN12@zipOpen2
$LN11@zipOpen2:

; 652  :             TRYFREE(buf_read);

  004c8	48 83 bc 24 88
	41 00 00 00	 cmp	 QWORD PTR buf_read$80443[rsp], 0
  004d1	74 0e		 je	 SHORT $LN7@zipOpen2
  004d3	48 8b 8c 24 88
	41 00 00	 mov	 rcx, QWORD PTR buf_read$80443[rsp]
  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@zipOpen2:

; 653  :         }
; 654  :         ziinit.begin_pos = byte_before_the_zipfile;

  004e1	8b 84 24 64 41
	00 00		 mov	 eax, DWORD PTR byte_before_the_zipfile$80414[rsp]
  004e8	89 84 24 38 41
	00 00		 mov	 DWORD PTR ziinit$[rsp+16648], eax

; 655  :         ziinit.number_entry = number_entry_CD;

  004ef	8b 84 24 6c 41
	00 00		 mov	 eax, DWORD PTR number_entry_CD$80422[rsp]
  004f6	89 84 24 40 41
	00 00		 mov	 DWORD PTR ziinit$[rsp+16656], eax

; 656  : 
; 657  :         if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
; 658  :                   offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  004fd	8b 84 24 64 41
	00 00		 mov	 eax, DWORD PTR byte_before_the_zipfile$80414[rsp]
  00504	44 8b 84 24 60
	41 00 00	 mov	 r8d, DWORD PTR offset_central_dir$80416[rsp]
  0050c	44 03 c0	 add	 r8d, eax
  0050f	45 33 c9	 xor	 r9d, r9d
  00512	48 8b 54 24 70	 mov	 rdx, QWORD PTR ziinit$[rsp+64]
  00517	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  0051c	ff 54 24 50	 call	 QWORD PTR ziinit$[rsp+32]
  00520	85 c0		 test	 eax, eax
  00522	74 08		 je	 SHORT $LN6@zipOpen2

; 659  :             err=ZIP_ERRNO;

  00524	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN6@zipOpen2:
$LN30@zipOpen2:

; 660  :     }
; 661  : 
; 662  :     if (globalcomment)

  0052c	48 83 bc 24 10
	42 00 00 00	 cmp	 QWORD PTR globalcomment$[rsp], 0
  00535	74 13		 je	 SHORT $LN5@zipOpen2

; 663  :     {
; 664  :       *globalcomment = ziinit.globalcomment;

  00537	48 8b 8c 24 10
	42 00 00	 mov	 rcx, QWORD PTR globalcomment$[rsp]
  0053f	48 8b 84 24 48
	41 00 00	 mov	 rax, QWORD PTR ziinit$[rsp+16664]
  00547	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN5@zipOpen2:

; 665  :     }
; 666  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 667  : 
; 668  :     if (err != ZIP_OK)

  0054a	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0054f	74 32		 je	 SHORT $LN4@zipOpen2

; 669  :     {
; 670  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 671  :         TRYFREE(ziinit.globalcomment);

  00551	48 83 bc 24 48
	41 00 00 00	 cmp	 QWORD PTR ziinit$[rsp+16664], 0
  0055a	74 0e		 je	 SHORT $LN3@zipOpen2
  0055c	48 8b 8c 24 48
	41 00 00	 mov	 rcx, QWORD PTR ziinit$[rsp+16664]
  00564	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@zipOpen2:

; 672  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 673  :         TRYFREE(zi);

  0056a	48 83 7c 24 28
	00		 cmp	 QWORD PTR zi$[rsp], 0
  00570	74 0b		 je	 SHORT $LN2@zipOpen2
  00572	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00577	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@zipOpen2:

; 674  :         return NULL;

  0057d	33 c0		 xor	 eax, eax
  0057f	eb 18		 jmp	 SHORT $LN35@zipOpen2

; 675  :     }
; 676  :     else

  00581	eb 16		 jmp	 SHORT $LN1@zipOpen2
$LN4@zipOpen2:

; 677  :     {
; 678  :         *zi = ziinit;

  00583	48 8d 74 24 30	 lea	 rsi, QWORD PTR ziinit$[rsp]
  00588	48 8b 7c 24 28	 mov	 rdi, QWORD PTR zi$[rsp]
  0058d	b9 20 41 00 00	 mov	 ecx, 16672		; 00004120H
  00592	f3 a4		 rep movsb

; 679  :         return (zipFile)zi;

  00594	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
$LN1@zipOpen2:
$LN35@zipOpen2:

; 680  :     }
; 681  : }

  00599	48 81 c4 e8 41
	00 00		 add	 rsp, 16872		; 000041e8H
  005a0	5f		 pop	 rdi
  005a1	5e		 pop	 rsi
  005a2	c3		 ret	 0
zipOpen2 ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\time.inl
pdata	SEGMENT
$pdata$crypthead DD imagerel crypthead
	DD	imagerel crypthead+532
	DD	imagerel $unwind$crypthead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypthead DD 011801H
	DD	08218H
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
xdata	ENDS
;	COMDAT crypthead
_TEXT	SEGMENT
n$ = 32
c$ = 36
t$ = 40
header$ = 48
passwd$ = 80
buf$ = 88
bufSize$ = 96
pkeys$ = 104
pcrc_32_tab$ = 112
crcForCrypting$ = 120
crypthead PROC						; COMDAT

; 97   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 98   :     int n;                       /* index in random header */
; 99   :     int t;                       /* temporary */
; 100  :     int c;                       /* random byte */
; 101  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 102  :     static unsigned calls = 0;   /* ensure different random header each time */
; 103  : 
; 104  :     if (bufSize<RAND_HEAD_LEN)

  00018	83 7c 24 60 0c	 cmp	 DWORD PTR bufSize$[rsp], 12
  0001d	7d 07		 jge	 SHORT $LN8@crypthead

; 105  :       return 0;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 e9 01 00 00	 jmp	 $LN9@crypthead
$LN8@crypthead:

; 106  : 
; 107  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 108  :      * output of rand() to get less predictability, since rand() is
; 109  :      * often poorly implemented.
; 110  :      */
; 111  :     if (++calls == 1)

  00026	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 05 00 00 00
	00		 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00035	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?calls@?1??crypthead@@9@9, 1
  0003c	75 18		 jne	 SHORT $LN7@crypthead

; 112  :     {
; 113  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  0003e	33 c9		 xor	 ecx, ecx
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
  00046	b9 4e e6 40 bb	 mov	 ecx, -1153374642	; ffffffffbb40e64eH
  0004b	48 33 c1	 xor	 rax, rcx
  0004e	8b c8		 mov	 ecx, eax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
$LN7@crypthead:

; 114  :     }
; 115  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00056	4c 8b 44 24 70	 mov	 r8, QWORD PTR pcrc_32_tab$[rsp]
  0005b	48 8b 54 24 68	 mov	 rdx, QWORD PTR pkeys$[rsp]
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR passwd$[rsp]
  00065	e8 00 00 00 00	 call	 init_keys

; 116  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  0006a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00072	eb 0b		 jmp	 SHORT $LN6@crypthead
$LN5@crypthead:
  00074	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN6@crypthead:
  0007f	83 7c 24 20 0a	 cmp	 DWORD PTR n$[rsp], 10
  00084	7d 50		 jge	 SHORT $LN4@crypthead

; 117  :     {
; 118  :         c = (rand() >> 7) & 0xff;

  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0008c	c1 f8 07	 sar	 eax, 7
  0008f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00094	89 44 24 24	 mov	 DWORD PTR c$[rsp], eax

; 119  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00098	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0009d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000a2	e8 00 00 00 00	 call	 decrypt_byte
  000a7	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  000ab	44 8b 44 24 24	 mov	 r8d, DWORD PTR c$[rsp]
  000b0	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  000b5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000ba	e8 00 00 00 00	 call	 update_keys
  000bf	44 8b 5c 24 24	 mov	 r11d, DWORD PTR c$[rsp]
  000c4	8b 4c 24 28	 mov	 ecx, DWORD PTR t$[rsp]
  000c8	41 33 cb	 xor	 ecx, r11d
  000cb	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  000d0	88 4c 04 30	 mov	 BYTE PTR header$[rsp+rax], cl

; 120  :     }

  000d4	eb 9e		 jmp	 SHORT $LN5@crypthead
$LN4@crypthead:

; 121  :     /* Encrypt random header (last two bytes is high word of crc) */
; 122  :     init_keys(passwd, pkeys, pcrc_32_tab);

  000d6	4c 8b 44 24 70	 mov	 r8, QWORD PTR pcrc_32_tab$[rsp]
  000db	48 8b 54 24 68	 mov	 rdx, QWORD PTR pkeys$[rsp]
  000e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR passwd$[rsp]
  000e5	e8 00 00 00 00	 call	 init_keys

; 123  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  000ea	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  000f2	eb 0b		 jmp	 SHORT $LN3@crypthead
$LN2@crypthead:
  000f4	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  000f8	83 c0 01	 add	 eax, 1
  000fb	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN3@crypthead:
  000ff	83 7c 24 20 0a	 cmp	 DWORD PTR n$[rsp], 10
  00104	7d 4d		 jge	 SHORT $LN1@crypthead

; 124  :     {
; 125  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  00106	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0010b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00110	e8 00 00 00 00	 call	 decrypt_byte
  00115	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  00119	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  0011e	44 0f b6 44 04
	30		 movzx	 r8d, BYTE PTR header$[rsp+rax]
  00124	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00129	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0012e	e8 00 00 00 00	 call	 update_keys
  00133	4c 63 5c 24 20	 movsxd	 r11, DWORD PTR n$[rsp]
  00138	42 0f b6 44 1c
	30		 movzx	 eax, BYTE PTR header$[rsp+r11]
  0013e	8b 54 24 28	 mov	 edx, DWORD PTR t$[rsp]
  00142	33 d0		 xor	 edx, eax
  00144	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00149	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  0014e	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 126  :     }

  00151	eb a1		 jmp	 SHORT $LN2@crypthead
$LN1@crypthead:

; 127  :     buf[n++] = zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  00153	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00158	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0015d	e8 00 00 00 00	 call	 decrypt_byte
  00162	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  00166	44 8b 44 24 78	 mov	 r8d, DWORD PTR crcForCrypting$[rsp]
  0016b	41 c1 e8 10	 shr	 r8d, 16
  0016f	41 81 e0 ff 00
	00 00		 and	 r8d, 255		; 000000ffH
  00176	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0017b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00180	e8 00 00 00 00	 call	 update_keys
  00185	8b 44 24 78	 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00189	c1 e8 10	 shr	 eax, 16
  0018c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00191	8b 54 24 28	 mov	 edx, DWORD PTR t$[rsp]
  00195	33 d0		 xor	 edx, eax
  00197	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  0019c	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  001a1	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  001a4	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  001a8	83 c0 01	 add	 eax, 1
  001ab	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 128  :     buf[n++] = zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  001af	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  001b4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  001b9	e8 00 00 00 00	 call	 decrypt_byte
  001be	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  001c2	44 8b 44 24 78	 mov	 r8d, DWORD PTR crcForCrypting$[rsp]
  001c7	41 c1 e8 18	 shr	 r8d, 24
  001cb	41 81 e0 ff 00
	00 00		 and	 r8d, 255		; 000000ffH
  001d2	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  001d7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  001dc	e8 00 00 00 00	 call	 update_keys
  001e1	8b 44 24 78	 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  001e5	c1 e8 18	 shr	 eax, 24
  001e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001ed	8b 54 24 28	 mov	 edx, DWORD PTR t$[rsp]
  001f1	33 d0		 xor	 edx, eax
  001f3	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  001f8	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  001fd	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  00200	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00204	83 c0 01	 add	 eax, 1
  00207	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 129  :     return n;

  0020b	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
$LN9@crypthead:

; 130  : }

  0020f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00213	c3		 ret	 0
crypthead ENDP
PUBLIC	zipCloseFileInZip
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$zipCloseFileInZip DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$zipCloseFileInZip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZip DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipCloseFileInZip
_TEXT	SEGMENT
file$ = 48
zipCloseFileInZip PROC					; COMDAT

; 1129 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1130 :     return zipCloseFileInZipRaw (file,0,0);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	33 d2		 xor	 edx, edx
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR file$[rsp]
  00013	e8 00 00 00 00	 call	 zipCloseFileInZipRaw

; 1131 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
zipCloseFileInZip ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip3
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3 DD imagerel $LN52
	DD	imagerel $LN52+2680
	DD	imagerel $unwind$zipOpenNewFileInZip3
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3 DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip3
_TEXT	SEGMENT
size_comment$ = 64
i$ = 68
err$ = 72
size_filename$ = 76
zi$ = 80
sizeHead$80591 = 88
bufHead$80590 = 96
file$ = 128
filename$ = 136
zipfi$ = 144
extrafield_local$ = 152
size_extrafield_local$ = 160
extrafield_global$ = 168
size_extrafield_global$ = 176
comment$ = 184
method$ = 192
level$ = 200
raw$ = 208
windowBits$ = 216
memLevel$ = 224
strategy$ = 232
password$ = 240
crcForCrypting$ = 248
zipOpenNewFileInZip3 PROC				; COMDAT

; 712  : {

$LN52:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 713  :     zip_internal* zi;
; 714  :     uInt size_filename;
; 715  :     uInt size_comment;
; 716  :     uInt i;
; 717  :     int err = ZIP_OK;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 718  : 
; 719  : #    ifdef NOCRYPT
; 720  :     if (password != NULL)
; 721  :         return ZIP_PARAMERROR;
; 722  : #    endif
; 723  : 
; 724  :     if (file == NULL)

  00020	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00029	75 0a		 jne	 SHORT $LN49@zipOpenNew

; 725  :         return ZIP_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00030	e9 3e 0a 00 00	 jmp	 $LN50@zipOpenNew
$LN49@zipOpenNew:

; 726  :     if ((method!=0) && (method!=Z_DEFLATED))

  00035	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR method$[rsp], 0
  0003d	74 14		 je	 SHORT $LN48@zipOpenNew
  0003f	83 bc 24 c0 00
	00 00 08	 cmp	 DWORD PTR method$[rsp], 8
  00047	74 0a		 je	 SHORT $LN48@zipOpenNew

; 727  :         return ZIP_PARAMERROR;

  00049	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004e	e9 20 0a 00 00	 jmp	 $LN50@zipOpenNew
$LN48@zipOpenNew:

; 728  : 
; 729  :     zi = (zip_internal*)file;

  00053	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  0005b	48 89 44 24 50	 mov	 QWORD PTR zi$[rsp], rax

; 730  : 
; 731  :     if (zi->in_opened_file_inzip == 1)

  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00065	83 78 58 01	 cmp	 DWORD PTR [rax+88], 1
  00069	75 21		 jne	 SHORT $LN47@zipOpenNew

; 732  :     {
; 733  :         err = zipCloseFileInZip (file);

  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00073	e8 00 00 00 00	 call	 zipCloseFileInZip
  00078	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 734  :         if (err != ZIP_OK)

  0007c	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00081	74 09		 je	 SHORT $LN46@zipOpenNew

; 735  :             return err;

  00083	8b 44 24 48	 mov	 eax, DWORD PTR err$[rsp]
  00087	e9 e7 09 00 00	 jmp	 $LN50@zipOpenNew
$LN46@zipOpenNew:
$LN47@zipOpenNew:

; 736  :     }
; 737  : 
; 738  : 
; 739  :     if (filename==NULL)

  0008c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00095	75 0f		 jne	 SHORT $LN45@zipOpenNew

; 740  :         filename="-";

  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01JOAMLHOP@?9?$AA@
  0009e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR filename$[rsp], rax
$LN45@zipOpenNew:

; 741  : 
; 742  :     if (comment==NULL)

  000a6	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR comment$[rsp], 0
  000af	75 0a		 jne	 SHORT $LN44@zipOpenNew

; 743  :         size_comment = 0;

  000b1	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR size_comment$[rsp], 0

; 744  :     else

  000b9	eb 11		 jmp	 SHORT $LN43@zipOpenNew
$LN44@zipOpenNew:

; 745  :         size_comment = (uInt)strlen(comment);

  000bb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR comment$[rsp]
  000c3	e8 00 00 00 00	 call	 strlen
  000c8	89 44 24 40	 mov	 DWORD PTR size_comment$[rsp], eax
$LN43@zipOpenNew:

; 746  : 
; 747  :     size_filename = (uInt)strlen(filename);

  000cc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000d4	e8 00 00 00 00	 call	 strlen
  000d9	89 44 24 4c	 mov	 DWORD PTR size_filename$[rsp], eax

; 748  : 
; 749  :     if (zipfi == NULL)

  000dd	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  000e6	75 11		 jne	 SHORT $LN42@zipOpenNew

; 750  :         zi->ci.dosDate = 0;

  000e8	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  000ed	c7 80 e0 40 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+16608], 0

; 751  :     else

  000f7	eb 4d		 jmp	 SHORT $LN41@zipOpenNew
$LN42@zipOpenNew:

; 752  :     {
; 753  :         if (zipfi->dosDate != 0)

  000f9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00101	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00105	74 18		 je	 SHORT $LN40@zipOpenNew

; 754  :             zi->ci.dosDate = zipfi->dosDate;

  00107	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0010c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00114	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00117	89 81 e0 40 00
	00		 mov	 DWORD PTR [rcx+16608], eax
  0011d	eb 27		 jmp	 SHORT $LN39@zipOpenNew
$LN40@zipOpenNew:

; 755  :         else zi->ci.dosDate = ziplocal_TmzDateToDosDate(&zipfi->tmz_date,zipfi->dosDate);

  0011f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00127	8b 50 18	 mov	 edx, DWORD PTR [rax+24]
  0012a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR zipfi$[rsp]
  00132	e8 00 00 00 00	 call	 ziplocal_TmzDateToDosDate
  00137	44 8b d8	 mov	 r11d, eax
  0013a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0013f	44 89 98 e0 40
	00 00		 mov	 DWORD PTR [rax+16608], r11d
$LN39@zipOpenNew:
$LN41@zipOpenNew:

; 756  :     }
; 757  : 
; 758  :     zi->ci.flag = 0;

  00146	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0014b	c7 80 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+212], 0

; 759  :     if ((level==8) || (level==9))

  00155	83 bc 24 c8 00
	00 00 08	 cmp	 DWORD PTR level$[rsp], 8
  0015d	74 0a		 je	 SHORT $LN37@zipOpenNew
  0015f	83 bc 24 c8 00
	00 00 09	 cmp	 DWORD PTR level$[rsp], 9
  00167	75 19		 jne	 SHORT $LN38@zipOpenNew
$LN37@zipOpenNew:

; 760  :       zi->ci.flag |= 2;

  00169	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0016e	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [rax+212]
  00174	83 c9 02	 or	 ecx, 2
  00177	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0017c	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx
$LN38@zipOpenNew:

; 761  :     if ((level==2))

  00182	83 bc 24 c8 00
	00 00 02	 cmp	 DWORD PTR level$[rsp], 2
  0018a	75 19		 jne	 SHORT $LN36@zipOpenNew

; 762  :       zi->ci.flag |= 4;

  0018c	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00191	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [rax+212]
  00197	83 c9 04	 or	 ecx, 4
  0019a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0019f	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx
$LN36@zipOpenNew:

; 763  :     if ((level==1))

  001a5	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR level$[rsp], 1
  001ad	75 19		 jne	 SHORT $LN35@zipOpenNew

; 764  :       zi->ci.flag |= 6;

  001af	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001b4	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [rax+212]
  001ba	83 c9 06	 or	 ecx, 6
  001bd	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001c2	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx
$LN35@zipOpenNew:

; 765  :     if (password != NULL)

  001c8	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  001d1	74 19		 je	 SHORT $LN34@zipOpenNew

; 766  :       zi->ci.flag |= 1;

  001d3	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001d8	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [rax+212]
  001de	83 c9 01	 or	 ecx, 1
  001e1	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001e6	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx
$LN34@zipOpenNew:

; 767  : 
; 768  :     zi->ci.crc32 = 0;

  001ec	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001f1	c7 80 e4 40 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+16612], 0

; 769  :     zi->ci.method = method;

  001fb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00200	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00207	89 81 d8 00 00
	00		 mov	 DWORD PTR [rcx+216], eax

; 770  :     zi->ci.encrypt = 0;

  0020d	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00212	c7 80 e8 40 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+16616], 0

; 771  :     zi->ci.stream_initialised = 0;

  0021c	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00221	c7 80 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+184], 0

; 772  :     zi->ci.pos_in_buffered_data = 0;

  0022b	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00230	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+188], 0

; 773  :     zi->ci.raw = raw;

  0023a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0023f	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00246	89 81 dc 00 00
	00		 mov	 DWORD PTR [rcx+220], eax

; 774  :     zi->ci.pos_local_header = ZTELL(zi->z_filefunc,zi->filestream) ;

  0024c	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00251	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00255	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0025a	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0025e	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00263	ff 50 18	 call	 QWORD PTR [rax+24]
  00266	44 8b d8	 mov	 r11d, eax
  00269	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0026e	44 89 98 c0 00
	00 00		 mov	 DWORD PTR [rax+192], r11d

; 775  :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename +
; 776  :                                       size_extrafield_global + size_comment;

  00275	8b 4c 24 4c	 mov	 ecx, DWORD PTR size_filename$[rsp]
  00279	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00280	8d 4c 01 2e	 lea	 ecx, DWORD PTR [rcx+rax+46]
  00284	03 4c 24 40	 add	 ecx, DWORD PTR size_comment$[rsp]
  00288	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0028d	89 88 d0 00 00
	00		 mov	 DWORD PTR [rax+208], ecx

; 777  :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader);

  00293	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00298	8b 88 d0 00 00
	00		 mov	 ecx, DWORD PTR [rax+208]
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002a4	4c 8b d8	 mov	 r11, rax
  002a7	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  002ac	4c 89 98 c8 00
	00 00		 mov	 QWORD PTR [rax+200], r11

; 778  : 
; 779  :     ziplocal_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  002b3	41 b8 04 00 00
	00		 mov	 r8d, 4
  002b9	ba 50 4b 01 02	 mov	 edx, 33639248		; 02014b50H
  002be	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002c3	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  002ca	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 780  :     /* version info */
; 781  :     ziplocal_putValue_inmemory(zi->ci.central_header+4,(uLong)VERSIONMADEBY,2);

  002cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002d4	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  002db	48 83 c1 04	 add	 rcx, 4
  002df	41 b8 02 00 00
	00		 mov	 r8d, 2
  002e5	33 d2		 xor	 edx, edx
  002e7	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 782  :     ziplocal_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  002ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002f1	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  002f8	48 83 c1 06	 add	 rcx, 6
  002fc	41 b8 02 00 00
	00		 mov	 r8d, 2
  00302	ba 14 00 00 00	 mov	 edx, 20
  00307	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 783  :     ziplocal_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  0030c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00311	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00318	48 83 c1 08	 add	 rcx, 8
  0031c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00322	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00327	8b 90 d4 00 00
	00		 mov	 edx, DWORD PTR [rax+212]
  0032d	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 784  :     ziplocal_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  00332	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00337	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  0033e	48 83 c1 0a	 add	 rcx, 10
  00342	41 b8 02 00 00
	00		 mov	 r8d, 2
  00348	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0034d	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [rax+216]
  00353	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 785  :     ziplocal_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  00358	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0035d	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00364	48 83 c1 0c	 add	 rcx, 12
  00368	41 b8 04 00 00
	00		 mov	 r8d, 4
  0036e	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00373	8b 90 e0 40 00
	00		 mov	 edx, DWORD PTR [rax+16608]
  00379	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 786  :     ziplocal_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  0037e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00383	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  0038a	48 83 c1 10	 add	 rcx, 16
  0038e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00394	33 d2		 xor	 edx, edx
  00396	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 787  :     ziplocal_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  0039b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003a0	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  003a7	48 83 c1 14	 add	 rcx, 20
  003ab	41 b8 04 00 00
	00		 mov	 r8d, 4
  003b1	33 d2		 xor	 edx, edx
  003b3	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 788  :     ziplocal_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  003b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003bd	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  003c4	48 83 c1 18	 add	 rcx, 24
  003c8	41 b8 04 00 00
	00		 mov	 r8d, 4
  003ce	33 d2		 xor	 edx, edx
  003d0	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 789  :     ziplocal_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  003d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003da	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  003e1	48 83 c1 1c	 add	 rcx, 28
  003e5	41 b8 02 00 00
	00		 mov	 r8d, 2
  003eb	8b 54 24 4c	 mov	 edx, DWORD PTR size_filename$[rsp]
  003ef	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 790  :     ziplocal_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  003f4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003f9	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00400	48 83 c1 1e	 add	 rcx, 30
  00404	41 b8 02 00 00
	00		 mov	 r8d, 2
  0040a	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR size_extrafield_global$[rsp]
  00411	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 791  :     ziplocal_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  00416	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0041b	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00422	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00426	41 b8 02 00 00
	00		 mov	 r8d, 2
  0042c	8b 54 24 40	 mov	 edx, DWORD PTR size_comment$[rsp]
  00430	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 792  :     ziplocal_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  00435	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0043a	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00441	48 83 c1 22	 add	 rcx, 34			; 00000022H
  00445	41 b8 02 00 00
	00		 mov	 r8d, 2
  0044b	33 d2		 xor	 edx, edx
  0044d	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 793  : 
; 794  :     if (zipfi==NULL)

  00452	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  0045b	75 1f		 jne	 SHORT $LN33@zipOpenNew

; 795  :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  0045d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00462	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00469	48 83 c1 24	 add	 rcx, 36			; 00000024H
  0046d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00473	33 d2		 xor	 edx, edx
  00475	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 796  :     else

  0047a	eb 26		 jmp	 SHORT $LN32@zipOpenNew
$LN33@zipOpenNew:

; 797  :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  0047c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00481	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00488	48 83 c1 24	 add	 rcx, 36			; 00000024H
  0048c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00492	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  0049a	8b 50 1c	 mov	 edx, DWORD PTR [rax+28]
  0049d	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory
$LN32@zipOpenNew:

; 798  : 
; 799  :     if (zipfi==NULL)

  004a2	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  004ab	75 1f		 jne	 SHORT $LN31@zipOpenNew

; 800  :         ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  004ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  004b2	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  004b9	48 83 c1 26	 add	 rcx, 38			; 00000026H
  004bd	41 b8 04 00 00
	00		 mov	 r8d, 4
  004c3	33 d2		 xor	 edx, edx
  004c5	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 801  :     else

  004ca	eb 26		 jmp	 SHORT $LN30@zipOpenNew
$LN31@zipOpenNew:

; 802  :         ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  004cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  004d1	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  004d8	48 83 c1 26	 add	 rcx, 38			; 00000026H
  004dc	41 b8 04 00 00
	00		 mov	 r8d, 4
  004e2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  004ea	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  004ed	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory
$LN30@zipOpenNew:

; 803  : 
; 804  :     ziplocal_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header- zi->add_position_when_writting_offset,4);

  004f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  004f7	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  004fc	8b 80 0c 41 00
	00		 mov	 eax, DWORD PTR [rax+16652]
  00502	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [rcx+192]
  00508	2b d0		 sub	 edx, eax
  0050a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0050f	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00516	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  0051a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00520	e8 00 00 00 00	 call	 ziplocal_putValue_inmemory

; 805  : 
; 806  :     for (i=0;i<size_filename;i++)

  00525	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0052d	eb 0b		 jmp	 SHORT $LN29@zipOpenNew
$LN28@zipOpenNew:
  0052f	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  00533	83 c0 01	 add	 eax, 1
  00536	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN29@zipOpenNew:
  0053a	8b 44 24 4c	 mov	 eax, DWORD PTR size_filename$[rsp]
  0053e	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  00542	73 28		 jae	 SHORT $LN27@zipOpenNew

; 807  :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00544	44 8b 44 24 44	 mov	 r8d, DWORD PTR i$[rsp]
  00549	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  0054e	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  00555	8b 4c 24 44	 mov	 ecx, DWORD PTR i$[rsp]
  00559	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00561	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  00566	88 44 0a 2e	 mov	 BYTE PTR [rdx+rcx+46], al
  0056a	eb c3		 jmp	 SHORT $LN28@zipOpenNew
$LN27@zipOpenNew:

; 808  : 
; 809  :     for (i=0;i<size_extrafield_global;i++)

  0056c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00574	eb 0b		 jmp	 SHORT $LN26@zipOpenNew
$LN25@zipOpenNew:
  00576	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  0057a	83 c0 01	 add	 eax, 1
  0057d	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN26@zipOpenNew:
  00581	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00588	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  0058c	73 30		 jae	 SHORT $LN24@zipOpenNew

; 810  :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
; 811  :               *(((const char*)extrafield_global)+i);

  0058e	44 8b 44 24 44	 mov	 r8d, DWORD PTR i$[rsp]
  00593	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00598	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  0059f	8b 44 24 4c	 mov	 eax, DWORD PTR size_filename$[rsp]
  005a3	48 8d 54 01 2e	 lea	 rdx, QWORD PTR [rcx+rax+46]
  005a8	8b 4c 24 44	 mov	 ecx, DWORD PTR i$[rsp]
  005ac	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  005b4	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  005b9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  005bc	eb b8		 jmp	 SHORT $LN25@zipOpenNew
$LN24@zipOpenNew:

; 812  : 
; 813  :     for (i=0;i<size_comment;i++)

  005be	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005c6	eb 0b		 jmp	 SHORT $LN23@zipOpenNew
$LN22@zipOpenNew:
  005c8	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  005cc	83 c0 01	 add	 eax, 1
  005cf	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN23@zipOpenNew:
  005d3	8b 44 24 40	 mov	 eax, DWORD PTR size_comment$[rsp]
  005d7	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  005db	73 3a		 jae	 SHORT $LN21@zipOpenNew

; 814  :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 815  :               size_extrafield_global+i) = *(comment+i);

  005dd	44 8b 44 24 44	 mov	 r8d, DWORD PTR i$[rsp]
  005e2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  005e7	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  005ee	8b 44 24 4c	 mov	 eax, DWORD PTR size_filename$[rsp]
  005f2	48 8d 54 01 2e	 lea	 rdx, QWORD PTR [rcx+rax+46]
  005f7	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  005fe	48 03 d0	 add	 rdx, rax
  00601	8b 4c 24 44	 mov	 ecx, DWORD PTR i$[rsp]
  00605	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0060d	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  00612	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00615	eb b1		 jmp	 SHORT $LN22@zipOpenNew
$LN21@zipOpenNew:

; 816  :     if (zi->ci.central_header == NULL)

  00617	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0061c	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  00624	75 0a		 jne	 SHORT $LN20@zipOpenNew

; 817  :         return ZIP_INTERNALERROR;

  00626	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  0062b	e9 43 04 00 00	 jmp	 $LN50@zipOpenNew
$LN20@zipOpenNew:

; 818  : 
; 819  :     /* write the local header */
; 820  :     err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC,4);

  00630	41 b9 04 00 00
	00		 mov	 r9d, 4
  00636	41 b8 50 4b 03
	04		 mov	 r8d, 67324752		; 04034b50H
  0063c	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00641	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00645	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0064a	e8 00 00 00 00	 call	 ziplocal_putValue
  0064f	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 821  : 
; 822  :     if (err==ZIP_OK)

  00653	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00658	75 23		 jne	 SHORT $LN19@zipOpenNew

; 823  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  0065a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00660	41 b8 14 00 00
	00		 mov	 r8d, 20
  00666	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  0066b	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0066f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00674	e8 00 00 00 00	 call	 ziplocal_putValue
  00679	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN19@zipOpenNew:

; 824  :     if (err==ZIP_OK)

  0067d	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00682	75 29		 jne	 SHORT $LN18@zipOpenNew

; 825  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  00684	41 b9 02 00 00
	00		 mov	 r9d, 2
  0068a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0068f	44 8b 80 d4 00
	00 00		 mov	 r8d, DWORD PTR [rax+212]
  00696	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  0069b	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0069f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  006a4	e8 00 00 00 00	 call	 ziplocal_putValue
  006a9	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN18@zipOpenNew:

; 826  : 
; 827  :     if (err==ZIP_OK)

  006ad	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  006b2	75 29		 jne	 SHORT $LN17@zipOpenNew

; 828  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  006b4	41 b9 02 00 00
	00		 mov	 r9d, 2
  006ba	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  006bf	44 8b 80 d8 00
	00 00		 mov	 r8d, DWORD PTR [rax+216]
  006c6	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  006cb	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  006cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  006d4	e8 00 00 00 00	 call	 ziplocal_putValue
  006d9	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN17@zipOpenNew:

; 829  : 
; 830  :     if (err==ZIP_OK)

  006dd	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  006e2	75 29		 jne	 SHORT $LN16@zipOpenNew

; 831  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  006e4	41 b9 04 00 00
	00		 mov	 r9d, 4
  006ea	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  006ef	44 8b 80 e0 40
	00 00		 mov	 r8d, DWORD PTR [rax+16608]
  006f6	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  006fb	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  006ff	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00704	e8 00 00 00 00	 call	 ziplocal_putValue
  00709	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN16@zipOpenNew:

; 832  : 
; 833  :     if (err==ZIP_OK)

  0070d	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00712	75 20		 jne	 SHORT $LN15@zipOpenNew

; 834  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  00714	41 b9 04 00 00
	00		 mov	 r9d, 4
  0071a	45 33 c0	 xor	 r8d, r8d
  0071d	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00722	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00726	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0072b	e8 00 00 00 00	 call	 ziplocal_putValue
  00730	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN15@zipOpenNew:

; 835  :     if (err==ZIP_OK)

  00734	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00739	75 20		 jne	 SHORT $LN14@zipOpenNew

; 836  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  0073b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00741	45 33 c0	 xor	 r8d, r8d
  00744	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00749	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0074d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00752	e8 00 00 00 00	 call	 ziplocal_putValue
  00757	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN14@zipOpenNew:

; 837  :     if (err==ZIP_OK)

  0075b	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00760	75 20		 jne	 SHORT $LN13@zipOpenNew

; 838  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  00762	41 b9 04 00 00
	00		 mov	 r9d, 4
  00768	45 33 c0	 xor	 r8d, r8d
  0076b	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00770	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00774	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00779	e8 00 00 00 00	 call	 ziplocal_putValue
  0077e	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN13@zipOpenNew:

; 839  : 
; 840  :     if (err==ZIP_OK)

  00782	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00787	75 22		 jne	 SHORT $LN12@zipOpenNew

; 841  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00789	41 b9 02 00 00
	00		 mov	 r9d, 2
  0078f	44 8b 44 24 4c	 mov	 r8d, DWORD PTR size_filename$[rsp]
  00794	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00799	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0079d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  007a2	e8 00 00 00 00	 call	 ziplocal_putValue
  007a7	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN12@zipOpenNew:

; 842  : 
; 843  :     if (err==ZIP_OK)

  007ab	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  007b0	75 25		 jne	 SHORT $LN11@zipOpenNew

; 844  :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield_local,2);

  007b2	41 b9 02 00 00
	00		 mov	 r9d, 2
  007b8	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR size_extrafield_local$[rsp]
  007c0	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  007c5	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  007c9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  007ce	e8 00 00 00 00	 call	 ziplocal_putValue
  007d3	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax
$LN11@zipOpenNew:

; 845  : 
; 846  :     if ((err==ZIP_OK) && (size_filename>0))

  007d7	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  007dc	75 3c		 jne	 SHORT $LN10@zipOpenNew
  007de	83 7c 24 4c 00	 cmp	 DWORD PTR size_filename$[rsp], 0
  007e3	76 35		 jbe	 SHORT $LN10@zipOpenNew

; 847  :         if (ZWRITE(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  007e5	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR size_filename$[rsp]
  007ea	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  007f2	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  007f7	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  007fb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00800	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00804	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00809	ff 50 10	 call	 QWORD PTR [rax+16]
  0080c	3b 44 24 4c	 cmp	 eax, DWORD PTR size_filename$[rsp]
  00810	74 08		 je	 SHORT $LN9@zipOpenNew

; 848  :                 err = ZIP_ERRNO;

  00812	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@zipOpenNew:
$LN10@zipOpenNew:

; 849  : 
; 850  :     if ((err==ZIP_OK) && (size_extrafield_local>0))

  0081a	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  0081f	75 45		 jne	 SHORT $LN8@zipOpenNew
  00821	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR size_extrafield_local$[rsp], 0
  00829	76 3b		 jbe	 SHORT $LN8@zipOpenNew

; 851  :         if (ZWRITE(zi->z_filefunc,zi->filestream,extrafield_local,size_extrafield_local)
; 852  :                                                                            !=size_extrafield_local)

  0082b	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR size_extrafield_local$[rsp]
  00833	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR extrafield_local$[rsp]
  0083b	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00840	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00844	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00849	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0084d	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00852	ff 50 10	 call	 QWORD PTR [rax+16]
  00855	3b 84 24 a0 00
	00 00		 cmp	 eax, DWORD PTR size_extrafield_local$[rsp]
  0085c	74 08		 je	 SHORT $LN7@zipOpenNew

; 853  :                 err = ZIP_ERRNO;

  0085e	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN7@zipOpenNew:
$LN8@zipOpenNew:

; 854  : 
; 855  :     zi->ci.stream.avail_in = (uInt)0;

  00866	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0086b	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 856  :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00872	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00877	c7 40 78 00 40
	00 00		 mov	 DWORD PTR [rax+120], 16384 ; 00004000H

; 857  :     zi->ci.stream.next_out = zi->ci.buffered_data;

  0087e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00883	48 81 c1 e0 00
	00 00		 add	 rcx, 224		; 000000e0H
  0088a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0088f	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 858  :     zi->ci.stream.total_in = 0;

  00893	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00898	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [rax+108], 0

; 859  :     zi->ci.stream.total_out = 0;

  0089f	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008a4	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [rax+124], 0

; 860  : 
; 861  :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  008ab	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  008b0	0f 85 d5 00 00
	00		 jne	 $LN6@zipOpenNew
  008b6	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008bb	83 b8 d8 00 00
	00 08		 cmp	 DWORD PTR [rax+216], 8
  008c2	0f 85 c3 00 00
	00		 jne	 $LN6@zipOpenNew
  008c8	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008cd	83 b8 dc 00 00
	00 00		 cmp	 DWORD PTR [rax+220], 0
  008d4	0f 85 b1 00 00
	00		 jne	 $LN6@zipOpenNew

; 862  :     {
; 863  :         zi->ci.stream.zalloc = (alloc_func)0;

  008da	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008df	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 864  :         zi->ci.stream.zfree = (free_func)0;

  008ea	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008ef	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 865  :         zi->ci.stream.opaque = (voidpf)0;

  008fa	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008ff	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0

; 866  : 
; 867  :         if (windowBits>0)

  0090a	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR windowBits$[rsp], 0
  00912	7e 10		 jle	 SHORT $LN5@zipOpenNew

; 868  :             windowBits = -windowBits;

  00914	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  0091b	f7 d8		 neg	 eax
  0091d	89 84 24 d8 00
	00 00		 mov	 DWORD PTR windowBits$[rsp], eax
$LN5@zipOpenNew:

; 869  : 
; 870  :         err = deflateInit2(&zi->ci.stream, level,
; 871  :                Z_DEFLATED, windowBits, memLevel, strategy);

  00924	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00929	48 83 c1 60	 add	 rcx, 96			; 00000060H
  0092d	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  00935	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05GDHACFMB@1?42?43?$AA@
  0093c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00941	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00948	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0094c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00953	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00957	44 8b 8c 24 d8
	00 00 00	 mov	 r9d, DWORD PTR windowBits$[rsp]
  0095f	41 b8 08 00 00
	00		 mov	 r8d, 8
  00965	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  0096c	e8 00 00 00 00	 call	 deflateInit2_
  00971	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 872  : 
; 873  :         if (err==Z_OK)

  00975	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  0097a	75 0f		 jne	 SHORT $LN4@zipOpenNew

; 874  :             zi->ci.stream_initialised = 1;

  0097c	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00981	c7 80 b8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+184], 1
$LN4@zipOpenNew:
$LN6@zipOpenNew:

; 875  :     }
; 876  : #    ifndef NOCRYPT
; 877  :     zi->ci.crypt_header_size = 0;

  0098b	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00990	c7 80 00 41 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+16640], 0

; 878  :     if ((err==Z_OK) && (password != NULL))

  0099a	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  0099f	0f 85 b7 00 00
	00		 jne	 $LN3@zipOpenNew
  009a5	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  009ae	0f 84 a8 00 00
	00		 je	 $LN3@zipOpenNew

; 879  :     {
; 880  :         unsigned char bufHead[RAND_HEAD_LEN];
; 881  :         unsigned int sizeHead;
; 882  :         zi->ci.encrypt = 1;

  009b4	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  009b9	c7 80 e8 40 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+16616], 1

; 883  :         zi->ci.pcrc_32_tab = get_crc_table();

  009c3	e8 00 00 00 00	 call	 get_crc_table
  009c8	4c 8b d8	 mov	 r11, rax
  009cb	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  009d0	4c 89 98 f8 40
	00 00		 mov	 QWORD PTR [rax+16632], r11

; 884  :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 885  : 
; 886  :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  009d7	4c 8b 4c 24 50	 mov	 r9, QWORD PTR zi$[rsp]
  009dc	49 81 c1 ec 40
	00 00		 add	 r9, 16620		; 000040ecH
  009e3	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  009ea	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  009ee	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  009f3	48 8b 80 f8 40
	00 00		 mov	 rax, QWORD PTR [rax+16632]
  009fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009ff	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00a05	48 8d 54 24 60	 lea	 rdx, QWORD PTR bufHead$80590[rsp]
  00a0a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR password$[rsp]
  00a12	e8 00 00 00 00	 call	 crypthead
  00a17	89 44 24 58	 mov	 DWORD PTR sizeHead$80591[rsp], eax

; 887  :         zi->ci.crypt_header_size = sizeHead;

  00a1b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00a20	8b 44 24 58	 mov	 eax, DWORD PTR sizeHead$80591[rsp]
  00a24	89 81 00 41 00
	00		 mov	 DWORD PTR [rcx+16640], eax

; 888  : 
; 889  :         if (ZWRITE(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  00a2a	44 8b 4c 24 58	 mov	 r9d, DWORD PTR sizeHead$80591[rsp]
  00a2f	4c 8d 44 24 60	 lea	 r8, QWORD PTR bufHead$80590[rsp]
  00a34	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00a39	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00a3d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00a42	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00a46	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00a4b	ff 50 10	 call	 QWORD PTR [rax+16]
  00a4e	3b 44 24 58	 cmp	 eax, DWORD PTR sizeHead$80591[rsp]
  00a52	74 08		 je	 SHORT $LN2@zipOpenNew

; 890  :                 err = ZIP_ERRNO;

  00a54	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN2@zipOpenNew:
$LN3@zipOpenNew:

; 891  :     }
; 892  : #    endif
; 893  : 
; 894  :     if (err==Z_OK)

  00a5c	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00a61	75 0c		 jne	 SHORT $LN1@zipOpenNew

; 895  :         zi->in_opened_file_inzip = 1;

  00a63	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00a68	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [rax+88], 1
$LN1@zipOpenNew:

; 896  :     return err;

  00a6f	8b 44 24 48	 mov	 eax, DWORD PTR err$[rsp]
$LN50@zipOpenNew:

; 897  : }

  00a73	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00a77	c3		 ret	 0
zipOpenNewFileInZip3 ENDP
_TEXT	ENDS
PUBLIC	zipOpen
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$zipOpen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen
_TEXT	SEGMENT
pathname$ = 48
append$ = 56
zipOpen	PROC						; COMDAT

; 686  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 687  :     return zipOpen2(pathname,append,NULL,NULL);

  0000d	45 33 c9	 xor	 r9d, r9d
  00010	45 33 c0	 xor	 r8d, r8d
  00013	8b 54 24 38	 mov	 edx, DWORD PTR append$[rsp]
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathname$[rsp]
  0001c	e8 00 00 00 00	 call	 zipOpen2

; 688  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
zipOpen	ENDP
PUBLIC	zipClose
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipClose DD imagerel $LN27
	DD	imagerel $LN27+857
	DD	imagerel $unwind$zipClose
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipClose DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipClose
_TEXT	SEGMENT
centraldir_pos_inzip$ = 32
size_centraldir$ = 36
err$ = 40
size_global_comment$ = 44
zi$ = 48
ldi$80727 = 56
file$ = 80
global_comment$ = 88
zipClose PROC						; COMDAT

; 1136 : {

$LN27:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1137 :     zip_internal* zi;
; 1138 :     int err = 0;

  0000e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1139 :     uLong size_centraldir = 0;

  00016	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR size_centraldir$[rsp], 0

; 1140 :     uLong centraldir_pos_inzip;
; 1141 :     uInt size_global_comment;
; 1142 :     if (file == NULL)

  0001e	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00024	75 0a		 jne	 SHORT $LN24@zipClose

; 1143 :         return ZIP_PARAMERROR;

  00026	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0002b	e9 24 03 00 00	 jmp	 $LN25@zipClose
$LN24@zipClose:

; 1144 :     zi = (zip_internal*)file;

  00030	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00035	48 89 44 24 30	 mov	 QWORD PTR zi$[rsp], rax

; 1145 : 
; 1146 :     if (zi->in_opened_file_inzip == 1)

  0003a	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  0003f	83 78 58 01	 cmp	 DWORD PTR [rax+88], 1
  00043	75 0e		 jne	 SHORT $LN23@zipClose

; 1147 :     {
; 1148 :         err = zipCloseFileInZip (file);

  00045	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0004a	e8 00 00 00 00	 call	 zipCloseFileInZip
  0004f	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN23@zipClose:

; 1149 :     }
; 1150 : 
; 1151 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1152 :     if (global_comment==NULL)

  00053	48 83 7c 24 58
	00		 cmp	 QWORD PTR global_comment$[rsp], 0
  00059	75 11		 jne	 SHORT $LN22@zipClose

; 1153 :         global_comment = zi->globalcomment;

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00060	48 8b 80 18 41
	00 00		 mov	 rax, QWORD PTR [rax+16664]
  00067	48 89 44 24 58	 mov	 QWORD PTR global_comment$[rsp], rax
$LN22@zipClose:

; 1154 : #endif
; 1155 :     if (global_comment==NULL)

  0006c	48 83 7c 24 58
	00		 cmp	 QWORD PTR global_comment$[rsp], 0
  00072	75 0a		 jne	 SHORT $LN21@zipClose

; 1156 :         size_global_comment = 0;

  00074	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR size_global_comment$[rsp], 0

; 1157 :     else

  0007c	eb 0e		 jmp	 SHORT $LN20@zipClose
$LN21@zipClose:

; 1158 :         size_global_comment = (uInt)strlen(global_comment);

  0007e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR global_comment$[rsp]
  00083	e8 00 00 00 00	 call	 strlen
  00088	89 44 24 2c	 mov	 DWORD PTR size_global_comment$[rsp], eax
$LN20@zipClose:

; 1159 : 
; 1160 :     centraldir_pos_inzip = ZTELL(zi->z_filefunc,zi->filestream);

  0008c	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  00091	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0009a	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0009e	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  000a3	ff 50 18	 call	 QWORD PTR [rax+24]
  000a6	89 44 24 20	 mov	 DWORD PTR centraldir_pos_inzip$[rsp], eax

; 1161 :     if (err==ZIP_OK)

  000aa	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000af	0f 85 8b 00 00
	00		 jne	 $LN19@zipClose

; 1162 :     {
; 1163 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block ;

  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  000ba	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  000be	48 89 44 24 38	 mov	 QWORD PTR ldi$80727[rsp], rax
$LN18@zipClose:

; 1164 :         while (ldi!=NULL)

  000c3	48 83 7c 24 38
	00		 cmp	 QWORD PTR ldi$80727[rsp], 0
  000c9	74 75		 je	 SHORT $LN17@zipClose

; 1165 :         {
; 1166 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  000cb	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000d0	75 4d		 jne	 SHORT $LN16@zipClose
  000d2	48 8b 44 24 38	 mov	 rax, QWORD PTR ldi$80727[rsp]
  000d7	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  000db	76 42		 jbe	 SHORT $LN16@zipClose

; 1167 :                 if (ZWRITE(zi->z_filefunc,zi->filestream,
; 1168 :                            ldi->data,ldi->filled_in_this_block)
; 1169 :                               !=ldi->filled_in_this_block )

  000dd	4c 8b 44 24 38	 mov	 r8, QWORD PTR ldi$80727[rsp]
  000e2	49 83 c0 14	 add	 r8, 20
  000e6	48 8b 44 24 38	 mov	 rax, QWORD PTR ldi$80727[rsp]
  000eb	44 8b 48 0c	 mov	 r9d, DWORD PTR [rax+12]
  000ef	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  000f4	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  000fd	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00101	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00106	ff 50 10	 call	 QWORD PTR [rax+16]
  00109	44 8b d8	 mov	 r11d, eax
  0010c	48 8b 44 24 38	 mov	 rax, QWORD PTR ldi$80727[rsp]
  00111	44 3b 58 0c	 cmp	 r11d, DWORD PTR [rax+12]
  00115	74 08		 je	 SHORT $LN15@zipClose

; 1170 :                     err = ZIP_ERRNO;

  00117	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN15@zipClose:
$LN16@zipClose:

; 1171 : 
; 1172 :             size_centraldir += ldi->filled_in_this_block;

  0011f	48 8b 44 24 38	 mov	 rax, QWORD PTR ldi$80727[rsp]
  00124	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00127	8b 44 24 24	 mov	 eax, DWORD PTR size_centraldir$[rsp]
  0012b	03 c1		 add	 eax, ecx
  0012d	89 44 24 24	 mov	 DWORD PTR size_centraldir$[rsp], eax

; 1173 :             ldi = ldi->next_datablock;

  00131	48 8b 44 24 38	 mov	 rax, QWORD PTR ldi$80727[rsp]
  00136	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00139	48 89 44 24 38	 mov	 QWORD PTR ldi$80727[rsp], rax

; 1174 :         }

  0013e	eb 83		 jmp	 SHORT $LN18@zipClose
$LN17@zipClose:
$LN19@zipClose:

; 1175 :     }
; 1176 :     free_datablock(zi->central_dir.first_block);

  00140	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00145	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00149	e8 00 00 00 00	 call	 free_datablock

; 1177 : 
; 1178 :     if (err==ZIP_OK) /* Magic End */

  0014e	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00153	75 23		 jne	 SHORT $LN14@zipClose

; 1179 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  00155	41 b9 04 00 00
	00		 mov	 r9d, 4
  0015b	41 b8 50 4b 05
	06		 mov	 r8d, 101010256		; 06054b50H
  00161	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  00166	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0016a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0016f	e8 00 00 00 00	 call	 ziplocal_putValue
  00174	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN14@zipClose:

; 1180 : 
; 1181 :     if (err==ZIP_OK) /* number of this disk */

  00178	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0017d	75 20		 jne	 SHORT $LN13@zipClose

; 1182 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  0017f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00185	45 33 c0	 xor	 r8d, r8d
  00188	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  0018d	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00191	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00196	e8 00 00 00 00	 call	 ziplocal_putValue
  0019b	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN13@zipClose:

; 1183 : 
; 1184 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0019f	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  001a4	75 20		 jne	 SHORT $LN12@zipClose

; 1185 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  001a6	41 b9 02 00 00
	00		 mov	 r9d, 2
  001ac	45 33 c0	 xor	 r8d, r8d
  001af	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  001b4	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  001bd	e8 00 00 00 00	 call	 ziplocal_putValue
  001c2	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN12@zipClose:

; 1186 : 
; 1187 :     if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  001c6	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  001cb	75 29		 jne	 SHORT $LN11@zipClose

; 1188 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  001cd	41 b9 02 00 00
	00		 mov	 r9d, 2
  001d3	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  001d8	44 8b 80 10 41
	00 00		 mov	 r8d, DWORD PTR [rax+16656]
  001df	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  001e4	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  001ed	e8 00 00 00 00	 call	 ziplocal_putValue
  001f2	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN11@zipClose:

; 1189 : 
; 1190 :     if (err==ZIP_OK) /* total number of entries in the central dir */

  001f6	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  001fb	75 29		 jne	 SHORT $LN10@zipClose

; 1191 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  001fd	41 b9 02 00 00
	00		 mov	 r9d, 2
  00203	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00208	44 8b 80 10 41
	00 00		 mov	 r8d, DWORD PTR [rax+16656]
  0020f	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  00214	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00218	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0021d	e8 00 00 00 00	 call	 ziplocal_putValue
  00222	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN10@zipClose:

; 1192 : 
; 1193 :     if (err==ZIP_OK) /* size of the central directory */

  00226	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0022b	75 22		 jne	 SHORT $LN9@zipClose

; 1194 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  0022d	41 b9 04 00 00
	00		 mov	 r9d, 4
  00233	44 8b 44 24 24	 mov	 r8d, DWORD PTR size_centraldir$[rsp]
  00238	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  0023d	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00241	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00246	e8 00 00 00 00	 call	 ziplocal_putValue
  0024b	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN9@zipClose:

; 1195 : 
; 1196 :     if (err==ZIP_OK) /* offset of start of central directory with respect to the

  0024f	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00254	75 30		 jne	 SHORT $LN8@zipClose

; 1197 :                             starting disk number */
; 1198 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,
; 1199 :                                 (uLong)(centraldir_pos_inzip - zi->add_position_when_writting_offset),4);

  00256	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  0025b	8b 80 0c 41 00
	00		 mov	 eax, DWORD PTR [rax+16652]
  00261	44 8b 44 24 20	 mov	 r8d, DWORD PTR centraldir_pos_inzip$[rsp]
  00266	44 2b c0	 sub	 r8d, eax
  00269	41 b9 04 00 00
	00		 mov	 r9d, 4
  0026f	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  00274	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00278	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0027d	e8 00 00 00 00	 call	 ziplocal_putValue
  00282	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN8@zipClose:

; 1200 : 
; 1201 :     if (err==ZIP_OK) /* zipfile comment length */

  00286	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0028b	75 22		 jne	 SHORT $LN7@zipClose

; 1202 :         err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  0028d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00293	44 8b 44 24 2c	 mov	 r8d, DWORD PTR size_global_comment$[rsp]
  00298	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  0029d	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002a1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  002a6	e8 00 00 00 00	 call	 ziplocal_putValue
  002ab	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN7@zipClose:

; 1203 : 
; 1204 :     if ((err==ZIP_OK) && (size_global_comment>0))

  002af	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  002b4	75 39		 jne	 SHORT $LN6@zipClose
  002b6	83 7c 24 2c 00	 cmp	 DWORD PTR size_global_comment$[rsp], 0
  002bb	76 32		 jbe	 SHORT $LN6@zipClose

; 1205 :         if (ZWRITE(zi->z_filefunc,zi->filestream,
; 1206 :                    global_comment,size_global_comment) != size_global_comment)

  002bd	44 8b 4c 24 2c	 mov	 r9d, DWORD PTR size_global_comment$[rsp]
  002c2	4c 8b 44 24 58	 mov	 r8, QWORD PTR global_comment$[rsp]
  002c7	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  002cc	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  002d5	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002d9	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  002de	ff 50 10	 call	 QWORD PTR [rax+16]
  002e1	3b 44 24 2c	 cmp	 eax, DWORD PTR size_global_comment$[rsp]
  002e5	74 08		 je	 SHORT $LN5@zipClose

; 1207 :                 err = ZIP_ERRNO;

  002e7	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN5@zipClose:
$LN6@zipClose:

; 1208 : 
; 1209 :     if (ZCLOSE(zi->z_filefunc,zi->filestream) != 0)

  002ef	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  002f4	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  002fd	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00301	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00306	ff 50 28	 call	 QWORD PTR [rax+40]
  00309	85 c0		 test	 eax, eax
  0030b	74 0f		 je	 SHORT $LN4@zipClose

; 1210 :         if (err == ZIP_OK)

  0030d	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00312	75 08		 jne	 SHORT $LN3@zipClose

; 1211 :             err = ZIP_ERRNO;

  00314	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN3@zipClose:
$LN4@zipClose:

; 1212 : 
; 1213 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1214 :     TRYFREE(zi->globalcomment);

  0031c	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00321	48 83 b8 18 41
	00 00 00	 cmp	 QWORD PTR [rax+16664], 0
  00329	74 12		 je	 SHORT $LN2@zipClose
  0032b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00330	48 8b 89 18 41
	00 00		 mov	 rcx, QWORD PTR [rcx+16664]
  00337	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@zipClose:

; 1215 : #endif
; 1216 :     TRYFREE(zi);

  0033d	48 83 7c 24 30
	00		 cmp	 QWORD PTR zi$[rsp], 0
  00343	74 0b		 je	 SHORT $LN1@zipClose
  00345	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0034a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@zipClose:

; 1217 : 
; 1218 :     return err;

  00350	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
$LN25@zipClose:

; 1219 : }

  00354	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00358	c3		 ret	 0
zipClose ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip2
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2 DD imagerel $LN3
	DD	imagerel $LN3+194
	DD	imagerel $unwind$zipOpenNewFileInZip2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2 DD 021b01H
	DD	011011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip2
_TEXT	SEGMENT
file$ = 144
filename$ = 152
zipfi$ = 160
extrafield_local$ = 168
size_extrafield_local$ = 176
extrafield_global$ = 184
size_extrafield_global$ = 192
comment$ = 200
method$ = 208
level$ = 216
raw$ = 224
zipOpenNewFileInZip2 PROC				; COMDAT

; 914  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 915  :     return zipOpenNewFileInZip3 (file, filename, zipfi,
; 916  :                                  extrafield_local, size_extrafield_local,
; 917  :                                  extrafield_global, size_extrafield_global,
; 918  :                                  comment, method, level, raw,
; 919  :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 920  :                                  NULL, 0);

  0001b	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00023	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  0002c	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00034	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0003c	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00044	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0004b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0004f	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00056	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0005a	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00061	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00065	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0006d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00072	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00079	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0007d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00085	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008a	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00091	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00095	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  0009d	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000a5	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000ad	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000b5	e8 00 00 00 00	 call	 zipOpenNewFileInZip3

; 921  : }

  000ba	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000c1	c3		 ret	 0
zipOpenNewFileInZip2 ENDP
PUBLIC	zipOpenNewFileInZip
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$zipOpenNewFileInZip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip DD 011801H
	DD	0c218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip
_TEXT	SEGMENT
file$ = 112
filename$ = 120
zipfi$ = 128
extrafield_local$ = 136
size_extrafield_local$ = 144
extrafield_global$ = 152
size_extrafield_global$ = 160
comment$ = 168
method$ = 176
level$ = 184
zipOpenNewFileInZip PROC				; COMDAT

; 937  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 938  :     return zipOpenNewFileInZip2 (file, filename, zipfi,
; 939  :                                  extrafield_local, size_extrafield_local,
; 940  :                                  extrafield_global, size_extrafield_global,
; 941  :                                  comment, method, level, 0);

  00018	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  00020	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00027	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0002b	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00032	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00036	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0003e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00043	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0004a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0004e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00056	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00062	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00066	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  0006e	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  00076	48 8b 54 24 78	 mov	 rdx, QWORD PTR filename$[rsp]
  0007b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR file$[rsp]
  00080	e8 00 00 00 00	 call	 zipOpenNewFileInZip2

; 942  : }

  00085	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00089	c3		 ret	 0
zipOpenNewFileInZip ENDP
_TEXT	ENDS
END
