; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	unz_copyright
EXTRN	strcmp:PROC
	ORG $+1
unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:/'
	DB	'/www.winimage.com/zLibDll', 00H
PUBLIC	unzGetGlobalComment
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
pdata	SEGMENT
$pdata$unzGetGlobalComment DD imagerel $LN9
	DD	imagerel $LN9+254
	DD	imagerel $unwind$unzGetGlobalComment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalComment DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGetGlobalComment
_TEXT	SEGMENT
s$ = 32
uReadThis$ = 40
err$ = 44
file$ = 64
szComment$ = 72
uSizeBuf$ = 80
unzGetGlobalComment PROC				; COMDAT

; 1536 : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1537 :     int err=UNZ_OK;

  00013	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1538 :     unz_s* s;
; 1539 :     uLong uReadThis ;
; 1540 :     if (file==NULL)

  0001b	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  00021	75 0a		 jne	 SHORT $LN6@unzGetGlob

; 1541 :         return UNZ_PARAMERROR;

  00023	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00028	e9 cc 00 00 00	 jmp	 $LN7@unzGetGlob
$LN6@unzGetGlob:

; 1542 :     s=(unz_s*)file;

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1543 : 
; 1544 :     uReadThis = uSizeBuf;

  00037	8b 44 24 50	 mov	 eax, DWORD PTR uSizeBuf$[rsp]
  0003b	89 44 24 28	 mov	 DWORD PTR uReadThis$[rsp], eax

; 1545 :     if (uReadThis>s->gi.size_comment)

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00044	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00047	39 44 24 28	 cmp	 DWORD PTR uReadThis$[rsp], eax
  0004b	76 0c		 jbe	 SHORT $LN5@unzGetGlob

; 1546 :         uReadThis = s->gi.size_comment;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00052	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00055	89 44 24 28	 mov	 DWORD PTR uReadThis$[rsp], eax
$LN5@unzGetGlob:

; 1547 : 
; 1548 :     if (ZSEEK(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005e	44 8b 40 60	 mov	 r8d, DWORD PTR [rax+96]
  00062	41 83 c0 16	 add	 r8d, 22
  00066	45 33 c9	 xor	 r9d, r9d
  00069	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0006e	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00077	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00080	ff 50 20	 call	 QWORD PTR [rax+32]
  00083	85 c0		 test	 eax, eax
  00085	74 07		 je	 SHORT $LN4@unzGetGlob

; 1549 :         return UNZ_ERRNO;

  00087	b8 ff ff ff ff	 mov	 eax, -1
  0008c	eb 6b		 jmp	 SHORT $LN7@unzGetGlob
$LN4@unzGetGlob:

; 1550 : 
; 1551 :     if (uReadThis>0)

  0008e	83 7c 24 28 00	 cmp	 DWORD PTR uReadThis$[rsp], 0
  00093	76 39		 jbe	 SHORT $LN3@unzGetGlob

; 1552 :     {
; 1553 :       *szComment='\0';

  00095	48 8b 44 24 48	 mov	 rax, QWORD PTR szComment$[rsp]
  0009a	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1554 :       if (ZREAD(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  0009d	44 8b 4c 24 28	 mov	 r9d, DWORD PTR uReadThis$[rsp]
  000a2	4c 8b 44 24 48	 mov	 r8, QWORD PTR szComment$[rsp]
  000a7	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  000ac	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000b5	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000be	ff 50 08	 call	 QWORD PTR [rax+8]
  000c1	3b 44 24 28	 cmp	 eax, DWORD PTR uReadThis$[rsp]
  000c5	74 07		 je	 SHORT $LN2@unzGetGlob

; 1555 :         return UNZ_ERRNO;

  000c7	b8 ff ff ff ff	 mov	 eax, -1
  000cc	eb 2b		 jmp	 SHORT $LN7@unzGetGlob
$LN2@unzGetGlob:
$LN3@unzGetGlob:

; 1556 :     }
; 1557 : 
; 1558 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  000ce	48 83 7c 24 48
	00		 cmp	 QWORD PTR szComment$[rsp], 0
  000d4	74 1f		 je	 SHORT $LN1@unzGetGlob
  000d6	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000db	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  000de	39 44 24 50	 cmp	 DWORD PTR uSizeBuf$[rsp], eax
  000e2	76 11		 jbe	 SHORT $LN1@unzGetGlob

; 1559 :         *(szComment+s->gi.size_comment)='\0';

  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000e9	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  000ec	48 8b 44 24 48	 mov	 rax, QWORD PTR szComment$[rsp]
  000f1	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
$LN1@unzGetGlob:

; 1560 :     return (int)uReadThis;

  000f5	8b 44 24 28	 mov	 eax, DWORD PTR uReadThis$[rsp]
$LN7@unzGetGlob:

; 1561 : }

  000f9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fd	c3		 ret	 0
unzGetGlobalComment ENDP
_TEXT	ENDS
PUBLIC	unzGetLocalExtrafield
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetLocalExtrafield DD imagerel $LN11
	DD	imagerel $LN11+297
	DD	imagerel $unwind$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetLocalExtrafield DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGetLocalExtrafield
_TEXT	SEGMENT
size_to_read$ = 32
s$ = 40
pfile_in_zip_read_info$ = 48
read_now$ = 56
file$ = 80
buf$ = 88
len$ = 96
unzGetLocalExtrafield PROC				; COMDAT

; 1442 : {

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1443 :     unz_s* s;
; 1444 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1445 :     uInt read_now;
; 1446 :     uLong size_to_read;
; 1447 : 
; 1448 :     if (file==NULL)

  00013	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00019	75 0a		 jne	 SHORT $LN8@unzGetLoca

; 1449 :         return UNZ_PARAMERROR;

  0001b	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00020	e9 ff 00 00 00	 jmp	 $LN9@unzGetLoca
$LN8@unzGetLoca:

; 1450 :     s=(unz_s*)file;

  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  0002a	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 1451 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0002f	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00034	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0003b	48 89 44 24 30	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1452 : 
; 1453 :     if (pfile_in_zip_read_info==NULL)

  00040	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00046	75 0a		 jne	 SHORT $LN7@unzGetLoca

; 1454 :         return UNZ_PARAMERROR;

  00048	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004d	e9 d2 00 00 00	 jmp	 $LN9@unzGetLoca
$LN7@unzGetLoca:

; 1455 : 
; 1456 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -
; 1457 :                 pfile_in_zip_read_info->pos_local_extrafield);

  00052	48 8b 54 24 30	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0005c	8b 48 70	 mov	 ecx, DWORD PTR [rax+112]
  0005f	8b 42 6c	 mov	 eax, DWORD PTR [rdx+108]
  00062	2b c1		 sub	 eax, ecx
  00064	89 44 24 20	 mov	 DWORD PTR size_to_read$[rsp], eax

; 1458 : 
; 1459 :     if (buf==NULL)

  00068	48 83 7c 24 58
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0006e	75 09		 jne	 SHORT $LN6@unzGetLoca

; 1460 :         return (int)size_to_read;

  00070	8b 44 24 20	 mov	 eax, DWORD PTR size_to_read$[rsp]
  00074	e9 ab 00 00 00	 jmp	 $LN9@unzGetLoca
$LN6@unzGetLoca:

; 1461 : 
; 1462 :     if (len>size_to_read)

  00079	8b 44 24 20	 mov	 eax, DWORD PTR size_to_read$[rsp]
  0007d	39 44 24 60	 cmp	 DWORD PTR len$[rsp], eax
  00081	76 0a		 jbe	 SHORT $LN5@unzGetLoca

; 1463 :         read_now = (uInt)size_to_read;

  00083	8b 44 24 20	 mov	 eax, DWORD PTR size_to_read$[rsp]
  00087	89 44 24 38	 mov	 DWORD PTR read_now$[rsp], eax

; 1464 :     else

  0008b	eb 08		 jmp	 SHORT $LN4@unzGetLoca
$LN5@unzGetLoca:

; 1465 :         read_now = (uInt)len ;

  0008d	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  00091	89 44 24 38	 mov	 DWORD PTR read_now$[rsp], eax
$LN4@unzGetLoca:

; 1466 : 
; 1467 :     if (read_now==0)

  00095	83 7c 24 38 00	 cmp	 DWORD PTR read_now$[rsp], 0
  0009a	75 07		 jne	 SHORT $LN3@unzGetLoca

; 1468 :         return 0;

  0009c	33 c0		 xor	 eax, eax
  0009e	e9 81 00 00 00	 jmp	 $LN9@unzGetLoca
$LN3@unzGetLoca:

; 1469 : 
; 1470 :     if (ZSEEK(pfile_in_zip_read_info->z_filefunc,
; 1471 :               pfile_in_zip_read_info->filestream,
; 1472 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1473 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1474 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000a8	44 8b 40 68	 mov	 r8d, DWORD PTR [rax+104]
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000b1	44 03 40 70	 add	 r8d, DWORD PTR [rax+112]
  000b5	45 33 c9	 xor	 r9d, r9d
  000b8	48 8b 54 24 30	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000bd	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  000c4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000c9	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  000d0	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000d5	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]
  000db	85 c0		 test	 eax, eax
  000dd	74 07		 je	 SHORT $LN2@unzGetLoca

; 1475 :         return UNZ_ERRNO;

  000df	b8 ff ff ff ff	 mov	 eax, -1
  000e4	eb 3e		 jmp	 SHORT $LN9@unzGetLoca
$LN2@unzGetLoca:

; 1476 : 
; 1477 :     if (ZREAD(pfile_in_zip_read_info->z_filefunc,
; 1478 :               pfile_in_zip_read_info->filestream,
; 1479 :               buf,read_now)!=read_now)

  000e6	44 8b 4c 24 38	 mov	 r9d, DWORD PTR read_now$[rsp]
  000eb	4c 8b 44 24 58	 mov	 r8, QWORD PTR buf$[rsp]
  000f0	48 8b 54 24 30	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000f5	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  000fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00101	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  00108	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0010d	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  00113	3b 44 24 38	 cmp	 eax, DWORD PTR read_now$[rsp]
  00117	74 07		 je	 SHORT $LN1@unzGetLoca

; 1480 :         return UNZ_ERRNO;

  00119	b8 ff ff ff ff	 mov	 eax, -1
  0011e	eb 04		 jmp	 SHORT $LN9@unzGetLoca
$LN1@unzGetLoca:

; 1481 : 
; 1482 :     return (int)read_now;

  00120	8b 44 24 38	 mov	 eax, DWORD PTR read_now$[rsp]
$LN9@unzGetLoca:

; 1483 : }

  00124	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00128	c3		 ret	 0
unzGetLocalExtrafield ENDP
_TEXT	ENDS
PUBLIC	unzeof
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzeof DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$unzeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzeof DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzeof
_TEXT	SEGMENT
s$ = 0
pfile_in_zip_read_info$ = 8
file$ = 32
unzeof	PROC						; COMDAT

; 1407 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1408 :     unz_s* s;
; 1409 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1410 :     if (file==NULL)

  00009	48 83 7c 24 20
	00		 cmp	 QWORD PTR file$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN4@unzeof

; 1411 :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00016	eb 41		 jmp	 SHORT $LN5@unzeof
$LN4@unzeof:

; 1412 :     s=(unz_s*)file;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]
  0001d	48 89 04 24	 mov	 QWORD PTR s$[rsp], rax

; 1413 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR s$[rsp]
  00025	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0002c	48 89 44 24 08	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1414 : 
; 1415 :     if (pfile_in_zip_read_info==NULL)

  00031	48 83 7c 24 08
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00037	75 07		 jne	 SHORT $LN3@unzeof

; 1416 :         return UNZ_PARAMERROR;

  00039	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0003e	eb 19		 jmp	 SHORT $LN5@unzeof
$LN3@unzeof:

; 1417 : 
; 1418 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00040	48 8b 44 24 08	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00045	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [rax+128], 0
  0004c	75 09		 jne	 SHORT $LN2@unzeof

; 1419 :         return 1;

  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	eb 04		 jmp	 SHORT $LN5@unzeof

; 1420 :     else

  00055	eb 02		 jmp	 SHORT $LN1@unzeof
$LN2@unzeof:

; 1421 :         return 0;

  00057	33 c0		 xor	 eax, eax
$LN1@unzeof:
$LN5@unzeof:

; 1422 : }

  00059	48 83 c4 18	 add	 rsp, 24
  0005d	c3		 ret	 0
unzeof	ENDP
_TEXT	ENDS
PUBLIC	unztell
;	COMDAT pdata
pdata	SEGMENT
$pdata$unztell DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$unztell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unztell DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unztell
_TEXT	SEGMENT
s$ = 0
pfile_in_zip_read_info$ = 8
file$ = 32
unztell	PROC						; COMDAT

; 1387 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1388 :     unz_s* s;
; 1389 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1390 :     if (file==NULL)

  00009	48 83 7c 24 20
	00		 cmp	 QWORD PTR file$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN2@unztell

; 1391 :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00016	eb 30		 jmp	 SHORT $LN3@unztell
$LN2@unztell:

; 1392 :     s=(unz_s*)file;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]
  0001d	48 89 04 24	 mov	 QWORD PTR s$[rsp], rax

; 1393 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR s$[rsp]
  00025	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0002c	48 89 44 24 08	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1394 : 
; 1395 :     if (pfile_in_zip_read_info==NULL)

  00031	48 83 7c 24 08
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00037	75 07		 jne	 SHORT $LN1@unztell

; 1396 :         return UNZ_PARAMERROR;

  00039	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0003e	eb 08		 jmp	 SHORT $LN3@unztell
$LN1@unztell:

; 1397 : 
; 1398 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  00040	48 8b 44 24 08	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00045	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
$LN3@unztell:

; 1399 : }

  00048	48 83 c4 18	 add	 rsp, 24
  0004c	c3		 ret	 0
unztell	ENDP
_TEXT	ENDS
PUBLIC	unzGetFilePos
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetFilePos DD imagerel $LN6
	DD	imagerel $LN6+99
	DD	imagerel $unwind$unzGetFilePos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetFilePos DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGetFilePos
_TEXT	SEGMENT
s$ = 0
file$ = 32
file_pos$ = 40
unzGetFilePos PROC					; COMDAT

; 906  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 907  :     unz_s* s;
; 908  : 
; 909  :     if (file==NULL || file_pos==NULL)

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR file$[rsp], 0
  00014	74 08		 je	 SHORT $LN2@unzGetFile
  00016	48 83 7c 24 28
	00		 cmp	 QWORD PTR file_pos$[rsp], 0
  0001c	75 07		 jne	 SHORT $LN3@unzGetFile
$LN2@unzGetFile:

; 910  :         return UNZ_PARAMERROR;

  0001e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00023	eb 39		 jmp	 SHORT $LN4@unzGetFile
$LN3@unzGetFile:

; 911  :     s=(unz_s*)file;

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]
  0002a	48 89 04 24	 mov	 QWORD PTR s$[rsp], rax

; 912  :     if (!s->current_file_ok)

  0002e	48 8b 04 24	 mov	 rax, QWORD PTR s$[rsp]
  00032	83 78 5c 00	 cmp	 DWORD PTR [rax+92], 0
  00036	75 07		 jne	 SHORT $LN1@unzGetFile

; 913  :         return UNZ_END_OF_LIST_OF_FILE;

  00038	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  0003d	eb 1f		 jmp	 SHORT $LN4@unzGetFile
$LN1@unzGetFile:

; 914  : 
; 915  :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR file_pos$[rsp]
  00044	48 8b 04 24	 mov	 rax, QWORD PTR s$[rsp]
  00048	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  0004b	89 01		 mov	 DWORD PTR [rcx], eax

; 916  :     file_pos->num_of_file           = s->num_file;

  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR file_pos$[rsp]
  00052	48 8b 04 24	 mov	 rax, QWORD PTR s$[rsp]
  00056	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00059	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 917  : 
; 918  :     return UNZ_OK;

  0005c	33 c0		 xor	 eax, eax
$LN4@unzGetFile:

; 919  : }

  0005e	48 83 c4 18	 add	 rsp, 24
  00062	c3		 ret	 0
unzGetFilePos ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_DosDateToTmuDate DD imagerel unzlocal_DosDateToTmuDate
	DD	imagerel unzlocal_DosDateToTmuDate+177
	DD	imagerel $unwind$unzlocal_DosDateToTmuDate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_DosDateToTmuDate DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_DosDateToTmuDate
_TEXT	SEGMENT
uDate$ = 0
ulDosDate$ = 32
ptm$ = 40
unzlocal_DosDateToTmuDate PROC				; COMDAT

; 551  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 18	 sub	 rsp, 24

; 552  :     uLong uDate;
; 553  :     uDate = (uLong)(ulDosDate>>16);

  0000d	8b 44 24 20	 mov	 eax, DWORD PTR ulDosDate$[rsp]
  00011	c1 e8 10	 shr	 eax, 16
  00014	89 04 24	 mov	 DWORD PTR uDate$[rsp], eax

; 554  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  00017	8b 0c 24	 mov	 ecx, DWORD PTR uDate$[rsp]
  0001a	83 e1 1f	 and	 ecx, 31
  0001d	48 8b 44 24 28	 mov	 rax, QWORD PTR ptm$[rsp]
  00022	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 555  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  00025	8b 04 24	 mov	 eax, DWORD PTR uDate$[rsp]
  00028	25 e0 01 00 00	 and	 eax, 480		; 000001e0H
  0002d	33 d2		 xor	 edx, edx
  0002f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00034	f7 f1		 div	 ecx
  00036	8b c8		 mov	 ecx, eax
  00038	83 e9 01	 sub	 ecx, 1
  0003b	48 8b 44 24 28	 mov	 rax, QWORD PTR ptm$[rsp]
  00040	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 556  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  00043	8b 04 24	 mov	 eax, DWORD PTR uDate$[rsp]
  00046	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  0004b	33 d2		 xor	 edx, edx
  0004d	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00052	f7 f1		 div	 ecx
  00054	8b c8		 mov	 ecx, eax
  00056	81 c1 bc 07 00
	00		 add	 ecx, 1980		; 000007bcH
  0005c	48 8b 44 24 28	 mov	 rax, QWORD PTR ptm$[rsp]
  00061	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 557  : 
; 558  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  00064	8b 44 24 20	 mov	 eax, DWORD PTR ulDosDate$[rsp]
  00068	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  0006d	33 d2		 xor	 edx, edx
  0006f	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00074	f7 f1		 div	 ecx
  00076	8b c8		 mov	 ecx, eax
  00078	48 8b 44 24 28	 mov	 rax, QWORD PTR ptm$[rsp]
  0007d	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 559  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  00080	8b 44 24 20	 mov	 eax, DWORD PTR ulDosDate$[rsp]
  00084	25 e0 07 00 00	 and	 eax, 2016		; 000007e0H
  00089	33 d2		 xor	 edx, edx
  0008b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00090	f7 f1		 div	 ecx
  00092	8b c8		 mov	 ecx, eax
  00094	48 8b 44 24 28	 mov	 rax, QWORD PTR ptm$[rsp]
  00099	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 560  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  0009c	8b 4c 24 20	 mov	 ecx, DWORD PTR ulDosDate$[rsp]
  000a0	83 e1 1f	 and	 ecx, 31
  000a3	d1 e1		 shl	 ecx, 1
  000a5	48 8b 44 24 28	 mov	 rax, QWORD PTR ptm$[rsp]
  000aa	89 08		 mov	 DWORD PTR [rax], ecx

; 561  : }

  000ac	48 83 c4 18	 add	 rsp, 24
  000b0	c3		 ret	 0
unzlocal_DosDateToTmuDate ENDP
_TEXT	ENDS
PUBLIC	unzGetGlobalInfo
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetGlobalInfo DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$unzGetGlobalInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalInfo DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGetGlobalInfo
_TEXT	SEGMENT
s$ = 0
file$ = 32
pglobal_info$ = 40
unzGetGlobalInfo PROC					; COMDAT

; 535  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 536  :     unz_s* s;
; 537  :     if (file==NULL)

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR file$[rsp], 0
  00014	75 07		 jne	 SHORT $LN1@unzGetGlob@2

; 538  :         return UNZ_PARAMERROR;

  00016	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0001b	eb 1b		 jmp	 SHORT $LN2@unzGetGlob@2
$LN1@unzGetGlob@2:

; 539  :     s=(unz_s*)file;

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]
  00022	48 89 04 24	 mov	 QWORD PTR s$[rsp], rax

; 540  :     *pglobal_info=s->gi;

  00026	48 8b 0c 24	 mov	 rcx, QWORD PTR s$[rsp]
  0002a	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0002e	48 8b 44 24 28	 mov	 rax, QWORD PTR pglobal_info$[rsp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 541  :     return UNZ_OK;

  00036	33 c0		 xor	 eax, eax
$LN2@unzGetGlob@2:

; 542  : }

  00038	48 83 c4 18	 add	 rsp, 24
  0003c	c3		 ret	 0
unzGetGlobalInfo ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_SearchCentralDir DD imagerel unzlocal_SearchCentralDir
	DD	imagerel unzlocal_SearchCentralDir+521
	DD	imagerel $unwind$unzlocal_SearchCentralDir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_SearchCentralDir DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_SearchCentralDir
_TEXT	SEGMENT
uSizeFile$ = 32
uPosFound$ = 36
uBackRead$ = 40
uMaxBack$ = 44
buf$ = 48
i$79972 = 56
uReadPos$79971 = 60
uReadSize$79970 = 64
tv89 = 68
pzlib_filefunc_def$ = 96
filestream$ = 104
unzlocal_SearchCentralDir PROC				; COMDAT

; 334  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 335  :     unsigned char* buf;
; 336  :     uLong uSizeFile;
; 337  :     uLong uBackRead;
; 338  :     uLong uMaxBack=0xffff; /* maximum size of global comment */

  0000e	c7 44 24 2c ff
	ff 00 00	 mov	 DWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 339  :     uLong uPosFound=0;

  00016	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR uPosFound$[rsp], 0

; 340  : 
; 341  :     if (ZSEEK(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0001e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00024	45 33 c0	 xor	 r8d, r8d
  00027	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00031	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0003a	ff 50 20	 call	 QWORD PTR [rax+32]
  0003d	85 c0		 test	 eax, eax
  0003f	74 07		 je	 SHORT $LN14@unzlocal_S

; 342  :         return 0;

  00041	33 c0		 xor	 eax, eax
  00043	e9 bc 01 00 00	 jmp	 $LN15@unzlocal_S
$LN14@unzlocal_S:

; 343  : 
; 344  : 
; 345  :     uSizeFile = ZTELL(*pzlib_filefunc_def,filestream);

  00048	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0004d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00052	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00056	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0005b	ff 50 18	 call	 QWORD PTR [rax+24]
  0005e	89 44 24 20	 mov	 DWORD PTR uSizeFile$[rsp], eax

; 346  : 
; 347  :     if (uMaxBack>uSizeFile)

  00062	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  00066	39 44 24 2c	 cmp	 DWORD PTR uMaxBack$[rsp], eax
  0006a	76 08		 jbe	 SHORT $LN13@unzlocal_S

; 348  :         uMaxBack = uSizeFile;

  0006c	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  00070	89 44 24 2c	 mov	 DWORD PTR uMaxBack$[rsp], eax
$LN13@unzlocal_S:

; 349  : 
; 350  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00074	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0007f	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 351  :     if (buf==NULL)

  00084	48 83 7c 24 30
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0008a	75 07		 jne	 SHORT $LN12@unzlocal_S

; 352  :         return 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 71 01 00 00	 jmp	 $LN15@unzlocal_S
$LN12@unzlocal_S:

; 353  : 
; 354  :     uBackRead = 4;

  00093	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR uBackRead$[rsp], 4
$LN11@unzlocal_S:

; 355  :     while (uBackRead<uMaxBack)

  0009b	8b 44 24 2c	 mov	 eax, DWORD PTR uMaxBack$[rsp]
  0009f	39 44 24 28	 cmp	 DWORD PTR uBackRead$[rsp], eax
  000a3	0f 83 44 01 00
	00		 jae	 $LN10@unzlocal_S

; 356  :     {
; 357  :         uLong uReadSize,uReadPos ;
; 358  :         int i;
; 359  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a9	8b 44 24 28	 mov	 eax, DWORD PTR uBackRead$[rsp]
  000ad	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000b2	3b 44 24 2c	 cmp	 eax, DWORD PTR uMaxBack$[rsp]
  000b6	76 0a		 jbe	 SHORT $LN9@unzlocal_S

; 360  :             uBackRead = uMaxBack;

  000b8	8b 44 24 2c	 mov	 eax, DWORD PTR uMaxBack$[rsp]
  000bc	89 44 24 28	 mov	 DWORD PTR uBackRead$[rsp], eax

; 361  :         else

  000c0	eb 0d		 jmp	 SHORT $LN8@unzlocal_S
$LN9@unzlocal_S:

; 362  :             uBackRead+=BUFREADCOMMENT;

  000c2	8b 44 24 28	 mov	 eax, DWORD PTR uBackRead$[rsp]
  000c6	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000cb	89 44 24 28	 mov	 DWORD PTR uBackRead$[rsp], eax
$LN8@unzlocal_S:

; 363  :         uReadPos = uSizeFile-uBackRead ;

  000cf	8b 4c 24 28	 mov	 ecx, DWORD PTR uBackRead$[rsp]
  000d3	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  000d7	2b c1		 sub	 eax, ecx
  000d9	89 44 24 3c	 mov	 DWORD PTR uReadPos$79971[rsp], eax

; 364  : 
; 365  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 366  :                      (BUFREADCOMMENT+4) : (uSizeFile-uReadPos);

  000dd	8b 4c 24 3c	 mov	 ecx, DWORD PTR uReadPos$79971[rsp]
  000e1	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  000e5	2b c1		 sub	 eax, ecx
  000e7	3d 04 04 00 00	 cmp	 eax, 1028		; 00000404H
  000ec	76 0a		 jbe	 SHORT $LN17@unzlocal_S
  000ee	c7 44 24 44 04
	04 00 00	 mov	 DWORD PTR tv89[rsp], 1028 ; 00000404H
  000f6	eb 0e		 jmp	 SHORT $LN18@unzlocal_S
$LN17@unzlocal_S:
  000f8	8b 4c 24 3c	 mov	 ecx, DWORD PTR uReadPos$79971[rsp]
  000fc	8b 44 24 20	 mov	 eax, DWORD PTR uSizeFile$[rsp]
  00100	2b c1		 sub	 eax, ecx
  00102	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN18@unzlocal_S:
  00106	8b 44 24 44	 mov	 eax, DWORD PTR tv89[rsp]
  0010a	89 44 24 40	 mov	 DWORD PTR uReadSize$79970[rsp], eax

; 367  :         if (ZSEEK(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0010e	45 33 c9	 xor	 r9d, r9d
  00111	44 8b 44 24 3c	 mov	 r8d, DWORD PTR uReadPos$79971[rsp]
  00116	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  0011b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00120	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00124	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00129	ff 50 20	 call	 QWORD PTR [rax+32]
  0012c	85 c0		 test	 eax, eax
  0012e	74 05		 je	 SHORT $LN7@unzlocal_S

; 368  :             break;

  00130	e9 b8 00 00 00	 jmp	 $LN10@unzlocal_S
$LN7@unzlocal_S:

; 369  : 
; 370  :         if (ZREAD(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00135	44 8b 4c 24 40	 mov	 r9d, DWORD PTR uReadSize$79970[rsp]
  0013a	4c 8b 44 24 30	 mov	 r8, QWORD PTR buf$[rsp]
  0013f	48 8b 54 24 68	 mov	 rdx, QWORD PTR filestream$[rsp]
  00144	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00149	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0014d	48 8b 44 24 60	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00152	ff 50 08	 call	 QWORD PTR [rax+8]
  00155	3b 44 24 40	 cmp	 eax, DWORD PTR uReadSize$79970[rsp]
  00159	74 05		 je	 SHORT $LN6@unzlocal_S

; 371  :             break;

  0015b	e9 8d 00 00 00	 jmp	 $LN10@unzlocal_S
$LN6@unzlocal_S:

; 372  : 
; 373  :         for (i=(int)uReadSize-3; (i--)>0;)

  00160	8b 44 24 40	 mov	 eax, DWORD PTR uReadSize$79970[rsp]
  00164	83 e8 03	 sub	 eax, 3
  00167	89 44 24 38	 mov	 DWORD PTR i$79972[rsp], eax
$LN5@unzlocal_S:
  0016b	8b 4c 24 38	 mov	 ecx, DWORD PTR i$79972[rsp]
  0016f	8b 44 24 38	 mov	 eax, DWORD PTR i$79972[rsp]
  00173	83 e8 01	 sub	 eax, 1
  00176	89 44 24 38	 mov	 DWORD PTR i$79972[rsp], eax
  0017a	85 c9		 test	 ecx, ecx
  0017c	7e 61		 jle	 SHORT $LN4@unzlocal_S

; 374  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 375  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  0017e	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$79972[rsp]
  00183	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00188	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0018c	83 f8 50	 cmp	 eax, 80			; 00000050H
  0018f	75 4c		 jne	 SHORT $LN3@unzlocal_S
  00191	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$79972[rsp]
  00196	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0019b	0f b6 44 08 01	 movzx	 eax, BYTE PTR [rax+rcx+1]
  001a0	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001a3	75 38		 jne	 SHORT $LN3@unzlocal_S
  001a5	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$79972[rsp]
  001aa	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  001af	0f b6 44 08 02	 movzx	 eax, BYTE PTR [rax+rcx+2]
  001b4	83 f8 05	 cmp	 eax, 5
  001b7	75 24		 jne	 SHORT $LN3@unzlocal_S
  001b9	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR i$79972[rsp]
  001be	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  001c3	0f b6 44 08 03	 movzx	 eax, BYTE PTR [rax+rcx+3]
  001c8	83 f8 06	 cmp	 eax, 6
  001cb	75 10		 jne	 SHORT $LN3@unzlocal_S

; 376  :             {
; 377  :                 uPosFound = uReadPos+i;

  001cd	8b 4c 24 38	 mov	 ecx, DWORD PTR i$79972[rsp]
  001d1	8b 44 24 3c	 mov	 eax, DWORD PTR uReadPos$79971[rsp]
  001d5	03 c1		 add	 eax, ecx
  001d7	89 44 24 24	 mov	 DWORD PTR uPosFound$[rsp], eax

; 378  :                 break;

  001db	eb 02		 jmp	 SHORT $LN4@unzlocal_S
$LN3@unzlocal_S:

; 379  :             }

  001dd	eb 8c		 jmp	 SHORT $LN5@unzlocal_S
$LN4@unzlocal_S:

; 380  : 
; 381  :         if (uPosFound!=0)

  001df	83 7c 24 24 00	 cmp	 DWORD PTR uPosFound$[rsp], 0
  001e4	74 02		 je	 SHORT $LN2@unzlocal_S

; 382  :             break;

  001e6	eb 05		 jmp	 SHORT $LN10@unzlocal_S
$LN2@unzlocal_S:

; 383  :     }

  001e8	e9 ae fe ff ff	 jmp	 $LN11@unzlocal_S
$LN10@unzlocal_S:

; 384  :     TRYFREE(buf);

  001ed	48 83 7c 24 30
	00		 cmp	 QWORD PTR buf$[rsp], 0
  001f3	74 0b		 je	 SHORT $LN1@unzlocal_S
  001f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@unzlocal_S:

; 385  :     return uPosFound;

  00200	8b 44 24 24	 mov	 eax, DWORD PTR uPosFound$[rsp]
$LN15@unzlocal_S:

; 386  : }

  00204	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00208	c3		 ret	 0
unzlocal_SearchCentralDir ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$strcmpcasenosensitive_internal DD imagerel strcmpcasenosensitive_internal
	DD	imagerel strcmpcasenosensitive_internal+232
	DD	imagerel $unwind$strcmpcasenosensitive_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$strcmpcasenosensitive_internal DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT strcmpcasenosensitive_internal
_TEXT	SEGMENT
c1$79933 = 0
c2$79934 = 1
tv84 = 4
fileName1$ = 32
fileName2$ = 40
strcmpcasenosensitive_internal PROC			; COMDAT

; 265  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24
$LN8@strcmpcase:

; 266  :     for (;;)
; 267  :     {
; 268  :         char c1=*(fileName1++);

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR fileName1$[rsp]
  00013	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00016	88 04 24	 mov	 BYTE PTR c1$79933[rsp], al
  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR fileName1$[rsp]
  0001e	48 83 c0 01	 add	 rax, 1
  00022	48 89 44 24 20	 mov	 QWORD PTR fileName1$[rsp], rax

; 269  :         char c2=*(fileName2++);

  00027	48 8b 44 24 28	 mov	 rax, QWORD PTR fileName2$[rsp]
  0002c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002f	88 44 24 01	 mov	 BYTE PTR c2$79934[rsp], al
  00033	48 8b 44 24 28	 mov	 rax, QWORD PTR fileName2$[rsp]
  00038	48 83 c0 01	 add	 rax, 1
  0003c	48 89 44 24 28	 mov	 QWORD PTR fileName2$[rsp], rax

; 270  :         if ((c1>='a') && (c1<='z'))

  00041	0f be 04 24	 movsx	 eax, BYTE PTR c1$79933[rsp]
  00045	83 f8 61	 cmp	 eax, 97			; 00000061H
  00048	7c 13		 jl	 SHORT $LN6@strcmpcase
  0004a	0f be 04 24	 movsx	 eax, BYTE PTR c1$79933[rsp]
  0004e	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00051	7f 0a		 jg	 SHORT $LN6@strcmpcase

; 271  :             c1 -= 0x20;

  00053	0f be 04 24	 movsx	 eax, BYTE PTR c1$79933[rsp]
  00057	83 e8 20	 sub	 eax, 32			; 00000020H
  0005a	88 04 24	 mov	 BYTE PTR c1$79933[rsp], al
$LN6@strcmpcase:

; 272  :         if ((c2>='a') && (c2<='z'))

  0005d	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  00062	83 f8 61	 cmp	 eax, 97			; 00000061H
  00065	7c 16		 jl	 SHORT $LN5@strcmpcase
  00067	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  0006c	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0006f	7f 0c		 jg	 SHORT $LN5@strcmpcase

; 273  :             c2 -= 0x20;

  00071	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  00076	83 e8 20	 sub	 eax, 32			; 00000020H
  00079	88 44 24 01	 mov	 BYTE PTR c2$79934[rsp], al
$LN5@strcmpcase:

; 274  :         if (c1=='\0')

  0007d	0f be 04 24	 movsx	 eax, BYTE PTR c1$79933[rsp]
  00081	85 c0		 test	 eax, eax
  00083	75 21		 jne	 SHORT $LN4@strcmpcase

; 275  :             return ((c2=='\0') ? 0 : -1);

  00085	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  0008a	85 c0		 test	 eax, eax
  0008c	75 0a		 jne	 SHORT $LN11@strcmpcase
  0008e	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00096	eb 08		 jmp	 SHORT $LN12@strcmpcase
$LN11@strcmpcase:
  00098	c7 44 24 04 ff
	ff ff ff	 mov	 DWORD PTR tv84[rsp], -1
$LN12@strcmpcase:
  000a0	8b 44 24 04	 mov	 eax, DWORD PTR tv84[rsp]
  000a4	eb 3d		 jmp	 SHORT $LN9@strcmpcase
$LN4@strcmpcase:

; 276  :         if (c2=='\0')

  000a6	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  000ab	85 c0		 test	 eax, eax
  000ad	75 07		 jne	 SHORT $LN3@strcmpcase

; 277  :             return 1;

  000af	b8 01 00 00 00	 mov	 eax, 1
  000b4	eb 2d		 jmp	 SHORT $LN9@strcmpcase
$LN3@strcmpcase:

; 278  :         if (c1<c2)

  000b6	0f be 0c 24	 movsx	 ecx, BYTE PTR c1$79933[rsp]
  000ba	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  000bf	3b c8		 cmp	 ecx, eax
  000c1	7d 07		 jge	 SHORT $LN2@strcmpcase

; 279  :             return -1;

  000c3	b8 ff ff ff ff	 mov	 eax, -1
  000c8	eb 19		 jmp	 SHORT $LN9@strcmpcase
$LN2@strcmpcase:

; 280  :         if (c1>c2)

  000ca	0f be 0c 24	 movsx	 ecx, BYTE PTR c1$79933[rsp]
  000ce	0f be 44 24 01	 movsx	 eax, BYTE PTR c2$79934[rsp]
  000d3	3b c8		 cmp	 ecx, eax
  000d5	7e 07		 jle	 SHORT $LN1@strcmpcase

; 281  :             return 1;

  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	eb 05		 jmp	 SHORT $LN9@strcmpcase
$LN1@strcmpcase:

; 282  :     }

  000de	e9 2b ff ff ff	 jmp	 $LN8@strcmpcase
$LN9@strcmpcase:

; 283  : }

  000e3	48 83 c4 18	 add	 rsp, 24
  000e7	c3		 ret	 0
strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_getByte DD imagerel unzlocal_getByte
	DD	imagerel unzlocal_getByte+123
	DD	imagerel $unwind$unzlocal_getByte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_getByte DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_getByte
_TEXT	SEGMENT
err$ = 32
c$ = 36
pzlib_filefunc_def$ = 64
filestream$ = 72
pi$ = 80
unzlocal_getByte PROC					; COMDAT

; 175  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 176  :     unsigned char c;
; 177  :     int err = (int)ZREAD(*pzlib_filefunc_def,filestream,&c,1);

  00013	41 b9 01 00 00
	00		 mov	 r9d, 1
  00019	4c 8d 44 24 24	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00028	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00031	ff 50 08	 call	 QWORD PTR [rax+8]
  00034	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 178  :     if (err==1)

  00038	83 7c 24 20 01	 cmp	 DWORD PTR err$[rsp], 1
  0003d	75 12		 jne	 SHORT $LN4@unzlocal_g

; 179  :     {
; 180  :         *pi = (int)c;

  0003f	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR c$[rsp]
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR pi$[rsp]
  00049	89 08		 mov	 DWORD PTR [rax], ecx

; 181  :         return UNZ_OK;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 27		 jmp	 SHORT $LN5@unzlocal_g

; 182  :     }
; 183  :     else

  0004f	eb 25		 jmp	 SHORT $LN3@unzlocal_g
$LN4@unzlocal_g:

; 184  :     {
; 185  :         if (ZERROR(*pzlib_filefunc_def,filestream))

  00051	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0005b	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00064	ff 50 30	 call	 QWORD PTR [rax+48]
  00067	85 c0		 test	 eax, eax
  00069	74 09		 je	 SHORT $LN2@unzlocal_g

; 186  :             return UNZ_ERRNO;

  0006b	b8 ff ff ff ff	 mov	 eax, -1
  00070	eb 04		 jmp	 SHORT $LN5@unzlocal_g

; 187  :         else

  00072	eb 02		 jmp	 SHORT $LN1@unzlocal_g
$LN2@unzlocal_g:

; 188  :             return UNZ_EOF;

  00074	33 c0		 xor	 eax, eax
$LN1@unzlocal_g:
$LN3@unzlocal_g:
$LN5@unzlocal_g:

; 189  :     }
; 190  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
unzlocal_getByte ENDP
_TEXT	ENDS
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
pdata	SEGMENT
$pdata$update_keys DD imagerel update_keys
	DD	imagerel update_keys+194
	DD	imagerel $unwind$update_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_keys DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_keys
_TEXT	SEGMENT
keyshift$79846 = 0
pkeys$ = 32
pcrc_32_tab$ = 40
c$ = 48
update_keys PROC					; COMDAT

; 49   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR c$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	33 c1		 xor	 eax, ecx
  00020	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00025	48 63 c8	 movsxd	 rcx, eax
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0002d	8b 10		 mov	 edx, DWORD PTR [rax]
  0002f	c1 ea 08	 shr	 edx, 8
  00032	48 8b 44 24 28	 mov	 rax, QWORD PTR pcrc_32_tab$[rsp]
  00037	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  0003a	33 ca		 xor	 ecx, edx
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00041	89 08		 mov	 DWORD PTR [rax], ecx

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00048	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00055	03 48 04	 add	 ecx, DWORD PTR [rax+4]
  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0005d	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00068	69 c9 05 84 08
	08		 imul	 ecx, 134775813		; 08088405H
  0006e	83 c1 01	 add	 ecx, 1
  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00076	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0007e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00081	c1 e8 18	 shr	 eax, 24
  00084	89 04 24	 mov	 DWORD PTR keyshift$79846[rsp], eax

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0008c	8b 0c 24	 mov	 ecx, DWORD PTR keyshift$79846[rsp]
  0008f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00092	33 c1		 xor	 eax, ecx
  00094	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00099	48 63 c8	 movsxd	 rcx, eax
  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  000a1	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000a4	c1 ea 08	 shr	 edx, 8
  000a7	48 8b 44 24 28	 mov	 rax, QWORD PTR pcrc_32_tab$[rsp]
  000ac	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  000af	33 ca		 xor	 ecx, edx
  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  000b6	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 56   :     }
; 57   :     return c;

  000b9	8b 44 24 30	 mov	 eax, DWORD PTR c$[rsp]

; 58   : }

  000bd	48 83 c4 18	 add	 rsp, 24
  000c1	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decrypt_byte DD imagerel decrypt_byte
	DD	imagerel decrypt_byte+58
	DD	imagerel $unwind$decrypt_byte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decrypt_byte DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decrypt_byte
_TEXT	SEGMENT
temp$ = 0
pkeys$ = 32
pcrc_32_tab$ = 40
decrypt_byte PROC					; COMDAT

; 36   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00013	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00016	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001b	83 c8 02	 or	 eax, 2
  0001e	89 04 24	 mov	 DWORD PTR temp$[rsp], eax

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00021	8b 0c 24	 mov	 ecx, DWORD PTR temp$[rsp]
  00024	83 f1 01	 xor	 ecx, 1
  00027	8b 04 24	 mov	 eax, DWORD PTR temp$[rsp]
  0002a	0f af c1	 imul	 eax, ecx
  0002d	c1 e8 08	 shr	 eax, 8
  00030	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  00035	48 83 c4 18	 add	 rsp, 24
  00039	c3		 ret	 0
decrypt_byte ENDP
PUBLIC	unzCloseCurrentFile
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
pdata	SEGMENT
$pdata$unzCloseCurrentFile DD imagerel $LN10
	DD	imagerel $LN10+252
	DD	imagerel $unwind$unzCloseCurrentFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzCloseCurrentFile DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzCloseCurrentFile
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
err$ = 48
file$ = 80
unzCloseCurrentFile PROC				; COMDAT

; 1491 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1492 :     int err=UNZ_OK;

  00009	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1493 : 
; 1494 :     unz_s* s;
; 1495 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1496 :     if (file==NULL)

  00011	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00017	75 0a		 jne	 SHORT $LN7@unzCloseCu

; 1497 :         return UNZ_PARAMERROR;

  00019	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0001e	e9 d4 00 00 00	 jmp	 $LN8@unzCloseCu
$LN7@unzCloseCu:

; 1498 :     s=(unz_s*)file;

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1499 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00032	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00039	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1500 : 
; 1501 :     if (pfile_in_zip_read_info==NULL)

  0003e	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00044	75 0a		 jne	 SHORT $LN6@unzCloseCu

; 1502 :         return UNZ_PARAMERROR;

  00046	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004b	e9 a7 00 00 00	 jmp	 $LN8@unzCloseCu
$LN6@unzCloseCu:

; 1503 : 
; 1504 : 
; 1505 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&
; 1506 :         (!pfile_in_zip_read_info->raw))

  00050	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00055	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [rax+128], 0
  0005c	75 28		 jne	 SHORT $LN5@unzCloseCu
  0005e	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00063	83 b8 d8 00 00
	00 00		 cmp	 DWORD PTR [rax+216], 0
  0006a	75 1a		 jne	 SHORT $LN5@unzCloseCu

; 1507 :     {
; 1508 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  0006c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00071	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00076	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00079	39 41 74	 cmp	 DWORD PTR [rcx+116], eax
  0007c	74 08		 je	 SHORT $LN4@unzCloseCu

; 1509 :             err=UNZ_CRCERROR;

  0007e	c7 44 24 30 97
	ff ff ff	 mov	 DWORD PTR err$[rsp], -105 ; ffffffffffffff97H
$LN4@unzCloseCu:
$LN5@unzCloseCu:

; 1510 :     }
; 1511 : 
; 1512 : 
; 1513 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0008b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008f	74 0e		 je	 SHORT $LN3@unzCloseCu
  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00096	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@unzCloseCu:

; 1514 :     pfile_in_zip_read_info->read_buffer = NULL;

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000a4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1515 :     if (pfile_in_zip_read_info->stream_initialised)

  000ab	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000b0	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  000b4	74 0e		 je	 SHORT $LN2@unzCloseCu

; 1516 :         inflateEnd(&pfile_in_zip_read_info->stream);

  000b6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000bb	48 83 c1 08	 add	 rcx, 8
  000bf	e8 00 00 00 00	 call	 inflateEnd
$LN2@unzCloseCu:

; 1517 : 
; 1518 :     pfile_in_zip_read_info->stream_initialised = 0;

  000c4	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000c9	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [rax+100], 0

; 1519 :     TRYFREE(pfile_in_zip_read_info);

  000d0	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  000d6	74 0b		 je	 SHORT $LN1@unzCloseCu
  000d8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@unzCloseCu:

; 1520 : 
; 1521 :     s->pfile_in_zip_read=NULL;

  000e3	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000e8	48 c7 80 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+192], 0

; 1522 : 
; 1523 :     return err;

  000f3	8b 44 24 30	 mov	 eax, DWORD PTR err$[rsp]
$LN8@unzCloseCu:

; 1524 : }

  000f7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fb	c3		 ret	 0
unzCloseCurrentFile ENDP
_TEXT	ENDS
PUBLIC	unzClose
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzClose DD imagerel $LN6
	DD	imagerel $LN6+111
	DD	imagerel $unwind$unzClose
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzClose DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzClose
_TEXT	SEGMENT
s$ = 32
file$ = 64
unzClose PROC						; COMDAT

; 513  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 514  :     unz_s* s;
; 515  :     if (file==NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR file$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN3@unzClose

; 516  :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00016	eb 52		 jmp	 SHORT $LN4@unzClose
$LN3@unzClose:

; 517  :     s=(unz_s*)file;

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR file$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 518  : 
; 519  :     if (s->pfile_in_zip_read!=NULL)

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00027	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0002f	74 0a		 je	 SHORT $LN2@unzClose

; 520  :         unzCloseCurrentFile(file);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00036	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN2@unzClose:

; 521  : 
; 522  :     ZCLOSE(s->z_filefunc, s->filestream);

  0003b	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00040	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00049	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00052	ff 50 28	 call	 QWORD PTR [rax+40]

; 523  :     TRYFREE(s);

  00055	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  0005b	74 0b		 je	 SHORT $LN1@unzClose
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@unzClose:

; 524  :     return UNZ_OK;

  00068	33 c0		 xor	 eax, eax
$LN4@unzClose:

; 525  : }

  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
unzClose ENDP
_TEXT	ENDS
PUBLIC	unzStringFileNameCompare
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzStringFileNameCompare DD imagerel $LN5
	DD	imagerel $LN5+78
	DD	imagerel $unwind$unzStringFileNameCompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzStringFileNameCompare DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzStringFileNameCompare
_TEXT	SEGMENT
fileName1$ = 48
fileName2$ = 56
iCaseSensitivity$ = 64
unzStringFileNameCompare PROC				; COMDAT

; 309  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 310  :     if (iCaseSensitivity==0)

  00013	83 7c 24 40 00	 cmp	 DWORD PTR iCaseSensitivity$[rsp], 0
  00018	75 08		 jne	 SHORT $LN2@unzStringF

; 311  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;

  0001a	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR iCaseSensitivity$[rsp], 2
$LN2@unzStringF:

; 312  : 
; 313  :     if (iCaseSensitivity==1)

  00022	83 7c 24 40 01	 cmp	 DWORD PTR iCaseSensitivity$[rsp], 1
  00027	75 11		 jne	 SHORT $LN1@unzStringF

; 314  :         return strcmp(fileName1,fileName2);

  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR fileName2$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fileName1$[rsp]
  00033	e8 00 00 00 00	 call	 strcmp
  00038	eb 0f		 jmp	 SHORT $LN3@unzStringF
$LN1@unzStringF:

; 315  : 
; 316  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  0003a	48 8b 54 24 38	 mov	 rdx, QWORD PTR fileName2$[rsp]
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fileName1$[rsp]
  00044	e8 00 00 00 00	 call	 strcmpcasenosensitive_internal
$LN3@unzStringF:

; 317  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
unzStringFileNameCompare ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_getLong DD imagerel unzlocal_getLong
	DD	imagerel unzlocal_getLong+235
	DD	imagerel $unwind$unzlocal_getLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_getLong DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_getLong
_TEXT	SEGMENT
x$ = 32
i$ = 36
err$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
unzlocal_getLong PROC					; COMDAT

; 233  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 234  :     uLong x ;
; 235  :     int i;
; 236  :     int err;
; 237  : 
; 238  :     err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00013	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00022	e8 00 00 00 00	 call	 unzlocal_getByte
  00027	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 239  :     x = (uLong)i;

  0002b	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0002f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 240  : 
; 241  :     if (err==UNZ_OK)

  00033	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00038	75 18		 jne	 SHORT $LN5@unzlocal_g@2

; 242  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	e8 00 00 00 00	 call	 unzlocal_getByte
  0004e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN5@unzlocal_g@2:

; 243  :     x += ((uLong)i)<<8;

  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00056	c1 e1 08	 shl	 ecx, 8
  00059	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0005d	03 c1		 add	 eax, ecx
  0005f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 244  : 
; 245  :     if (err==UNZ_OK)

  00063	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00068	75 18		 jne	 SHORT $LN4@unzlocal_g@2

; 246  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  0006a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0006f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	e8 00 00 00 00	 call	 unzlocal_getByte
  0007e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN4@unzlocal_g@2:

; 247  :     x += ((uLong)i)<<16;

  00082	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00086	c1 e1 10	 shl	 ecx, 16
  00089	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0008d	03 c1		 add	 eax, ecx
  0008f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 248  : 
; 249  :     if (err==UNZ_OK)

  00093	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00098	75 18		 jne	 SHORT $LN3@unzlocal_g@2

; 250  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  0009a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0009f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000a9	e8 00 00 00 00	 call	 unzlocal_getByte
  000ae	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN3@unzlocal_g@2:

; 251  :     x += ((uLong)i)<<24;

  000b2	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  000b6	c1 e1 18	 shl	 ecx, 24
  000b9	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000bd	03 c1		 add	 eax, ecx
  000bf	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 252  : 
; 253  :     if (err==UNZ_OK)

  000c3	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000c8	75 0d		 jne	 SHORT $LN2@unzlocal_g@2

; 254  :         *pX = x;

  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000d3	89 01		 mov	 DWORD PTR [rcx], eax

; 255  :     else

  000d5	eb 0b		 jmp	 SHORT $LN1@unzlocal_g@2
$LN2@unzlocal_g@2:

; 256  :         *pX = 0;

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  000dc	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@unzlocal_g@2:

; 257  :     return err;

  000e2	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 258  : }

  000e6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ea	c3		 ret	 0
unzlocal_getLong ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_getShort DD imagerel unzlocal_getShort
	DD	imagerel unzlocal_getShort+139
	DD	imagerel $unwind$unzlocal_getShort
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_getShort DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_getShort
_TEXT	SEGMENT
x$ = 32
i$ = 36
err$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
unzlocal_getShort PROC					; COMDAT

; 205  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 206  :     uLong x ;
; 207  :     int i;
; 208  :     int err;
; 209  : 
; 210  :     err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  00013	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00022	e8 00 00 00 00	 call	 unzlocal_getByte
  00027	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 211  :     x = (uLong)i;

  0002b	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0002f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 212  : 
; 213  :     if (err==UNZ_OK)

  00033	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00038	75 18		 jne	 SHORT $LN3@unzlocal_g@3

; 214  :         err = unzlocal_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	e8 00 00 00 00	 call	 unzlocal_getByte
  0004e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN3@unzlocal_g@3:

; 215  :     x += ((uLong)i)<<8;

  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00056	c1 e1 08	 shl	 ecx, 8
  00059	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0005d	03 c1		 add	 eax, ecx
  0005f	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 216  : 
; 217  :     if (err==UNZ_OK)

  00063	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00068	75 0d		 jne	 SHORT $LN2@unzlocal_g@3

; 218  :         *pX = x;

  0006a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  0006f	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00073	89 01		 mov	 DWORD PTR [rcx], eax

; 219  :     else

  00075	eb 0b		 jmp	 SHORT $LN1@unzlocal_g@3
$LN2@unzlocal_g@3:

; 220  :         *pX = 0;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@unzlocal_g@3:

; 221  :     return err;

  00082	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 222  : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
unzlocal_getShort ENDP
_TEXT	ENDS
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\crypt.h
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+111
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 66   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 67   :     *(pkeys+0) = 305419896L;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00018	c7 00 78 56 34
	12		 mov	 DWORD PTR [rax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0001e	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00023	c7 40 04 89 67
	45 23		 mov	 DWORD PTR [rax+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  0002a	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  0002f	c7 40 08 90 78
	56 34		 mov	 DWORD PTR [rax+8], 878082192 ; 34567890H
$LN2@init_keys@2:

; 70   :     while (*passwd != '\0') {

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0003b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003e	85 c0		 test	 eax, eax
  00040	74 28		 je	 SHORT $LN1@init_keys@2

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  00047	44 0f be 00	 movsx	 r8d, BYTE PTR [rax]
  0004b	48 8b 54 24 40	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00050	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00055	e8 00 00 00 00	 call	 update_keys

; 72   :         passwd++;

  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0005f	48 83 c0 01	 add	 rax, 1
  00063	48 89 44 24 30	 mov	 QWORD PTR passwd$[rsp], rax

; 73   :     }

  00068	eb cc		 jmp	 SHORT $LN2@init_keys@2
$LN1@init_keys@2:

; 74   : }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
init_keys ENDP
PUBLIC	unzReadCurrentFile
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\unzip.c
pdata	SEGMENT
$pdata$unzReadCurrentFile DD imagerel $LN37
	DD	imagerel $LN37+1440
	DD	imagerel $unwind$unzReadCurrentFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzReadCurrentFile DD 031501H
	DD	07011e215H
	DD	03010H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzReadCurrentFile
_TEXT	SEGMENT
s$ = 32
pfile_in_zip_read_info$ = 40
iRead$ = 48
err$ = 52
uReadThis$80385 = 56
i$80392 = 60
i$80401 = 64
uDoCopy$80400 = 68
bufBefore$80411 = 72
uOutThis$80412 = 80
flush$80413 = 84
uTotalOutAfter$80410 = 88
uTotalOutBefore$80409 = 92
tv195 = 96
tv261 = 100
file$ = 144
buf$ = 152
len$ = 160
unzReadCurrentFile PROC					; COMDAT

; 1228 : {

$LN37:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	53		 push	 rbx
  00010	57		 push	 rdi
  00011	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1229 :     int err=UNZ_OK;

  00015	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1230 :     uInt iRead = 0;

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR iRead$[rsp], 0

; 1231 :     unz_s* s;
; 1232 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1233 :     if (file==NULL)

  00025	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  0002e	75 0a		 jne	 SHORT $LN30@unzReadCur

; 1234 :         return UNZ_PARAMERROR;

  00030	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00035	e9 5f 05 00 00	 jmp	 $LN31@unzReadCur
$LN30@unzReadCur:

; 1235 :     s=(unz_s*)file;

  0003a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1236 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004c	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00053	48 89 44 24 28	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1237 : 
; 1238 :     if (pfile_in_zip_read_info==NULL)

  00058	48 83 7c 24 28
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  0005e	75 0a		 jne	 SHORT $LN29@unzReadCur

; 1239 :         return UNZ_PARAMERROR;

  00060	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00065	e9 2f 05 00 00	 jmp	 $LN31@unzReadCur
$LN29@unzReadCur:

; 1240 : 
; 1241 : 
; 1242 :     if ((pfile_in_zip_read_info->read_buffer == NULL))

  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0006f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00073	75 0a		 jne	 SHORT $LN28@unzReadCur

; 1243 :         return UNZ_END_OF_LIST_OF_FILE;

  00075	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  0007a	e9 1a 05 00 00	 jmp	 $LN31@unzReadCur
$LN28@unzReadCur:

; 1244 :     if (len==0)

  0007f	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  00087	75 07		 jne	 SHORT $LN27@unzReadCur

; 1245 :         return 0;

  00089	33 c0		 xor	 eax, eax
  0008b	e9 09 05 00 00	 jmp	 $LN31@unzReadCur
$LN27@unzReadCur:

; 1246 : 
; 1247 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;

  00090	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00095	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0009d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 1248 : 
; 1249 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;

  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000a6	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  000ad	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 1250 : 
; 1251 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&
; 1252 :         (!(pfile_in_zip_read_info->raw)))

  000b0	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000b5	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000bb	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR len$[rsp], eax
  000c2	76 21		 jbe	 SHORT $LN26@unzReadCur
  000c4	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000c9	83 b8 d8 00 00
	00 00		 cmp	 DWORD PTR [rax+216], 0
  000d0	75 13		 jne	 SHORT $LN26@unzReadCur

; 1253 :         pfile_in_zip_read_info->stream.avail_out =
; 1254 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;

  000d2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000d7	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000dc	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000e2	89 41 20	 mov	 DWORD PTR [rcx+32], eax
$LN26@unzReadCur:

; 1255 : 
; 1256 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1257 :            pfile_in_zip_read_info->stream.avail_in) &&
; 1258 :          (pfile_in_zip_read_info->raw))

  000e5	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000ea	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  000ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000f2	03 41 10	 add	 eax, DWORD PTR [rcx+16]
  000f5	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR len$[rsp], eax
  000fc	76 26		 jbe	 SHORT $LN25@unzReadCur
  000fe	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00103	83 b8 d8 00 00
	00 00		 cmp	 DWORD PTR [rax+216], 0
  0010a	74 18		 je	 SHORT $LN25@unzReadCur

; 1259 :         pfile_in_zip_read_info->stream.avail_out =
; 1260 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1261 :             pfile_in_zip_read_info->stream.avail_in;

  0010c	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00111	8b 48 7c	 mov	 ecx, DWORD PTR [rax+124]
  00114	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00119	03 48 10	 add	 ecx, DWORD PTR [rax+16]
  0011c	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00121	89 48 20	 mov	 DWORD PTR [rax+32], ecx
$LN25@unzReadCur:
$LN24@unzReadCur:

; 1262 : 
; 1263 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  00124	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00129	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  0012d	0f 86 55 04 00
	00		 jbe	 $LN23@unzReadCur

; 1264 :     {
; 1265 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&
; 1266 :             (pfile_in_zip_read_info->rest_read_compressed>0))

  00133	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00138	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  0013c	0f 85 c8 01 00
	00		 jne	 $LN22@unzReadCur
  00142	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00147	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  0014b	0f 86 b9 01 00
	00		 jbe	 $LN22@unzReadCur

; 1267 :         {
; 1268 :             uInt uReadThis = UNZ_BUFSIZE;

  00151	c7 44 24 38 00
	40 00 00	 mov	 DWORD PTR uReadThis$80385[rsp], 16384 ; 00004000H

; 1269 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  00159	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0015e	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$80385[rsp]
  00162	39 41 7c	 cmp	 DWORD PTR [rcx+124], eax
  00165	73 0c		 jae	 SHORT $LN21@unzReadCur

; 1270 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  00167	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0016c	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  0016f	89 44 24 38	 mov	 DWORD PTR uReadThis$80385[rsp], eax
$LN21@unzReadCur:

; 1271 :             if (uReadThis == 0)

  00173	83 7c 24 38 00	 cmp	 DWORD PTR uReadThis$80385[rsp], 0
  00178	75 07		 jne	 SHORT $LN20@unzReadCur

; 1272 :                 return UNZ_EOF;

  0017a	33 c0		 xor	 eax, eax
  0017c	e9 18 04 00 00	 jmp	 $LN31@unzReadCur
$LN20@unzReadCur:

; 1273 :             if (ZSEEK(pfile_in_zip_read_info->z_filefunc,
; 1274 :                       pfile_in_zip_read_info->filestream,
; 1275 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1276 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1277 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  00181	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00186	44 8b 40 60	 mov	 r8d, DWORD PTR [rax+96]
  0018a	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0018f	44 03 80 d4 00
	00 00		 add	 r8d, DWORD PTR [rax+212]
  00196	45 33 c9	 xor	 r9d, r9d
  00199	48 8b 54 24 28	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0019e	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  001a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  001aa	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  001b1	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  001b6	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]
  001bc	85 c0		 test	 eax, eax
  001be	74 0a		 je	 SHORT $LN19@unzReadCur

; 1278 :                 return UNZ_ERRNO;

  001c0	b8 ff ff ff ff	 mov	 eax, -1
  001c5	e9 cf 03 00 00	 jmp	 $LN31@unzReadCur
$LN19@unzReadCur:

; 1279 :             if (ZREAD(pfile_in_zip_read_info->z_filefunc,
; 1280 :                       pfile_in_zip_read_info->filestream,
; 1281 :                       pfile_in_zip_read_info->read_buffer,
; 1282 :                       uReadThis)!=uReadThis)

  001ca	44 8b 4c 24 38	 mov	 r9d, DWORD PTR uReadThis$80385[rsp]
  001cf	4c 8b 44 24 28	 mov	 r8, QWORD PTR pfile_in_zip_read_info$[rsp]
  001d4	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  001d7	48 8b 54 24 28	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  001dc	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  001e3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  001e8	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  001ef	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  001f4	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  001fa	3b 44 24 38	 cmp	 eax, DWORD PTR uReadThis$80385[rsp]
  001fe	74 0a		 je	 SHORT $LN18@unzReadCur

; 1283 :                 return UNZ_ERRNO;

  00200	b8 ff ff ff ff	 mov	 eax, -1
  00205	e9 8f 03 00 00	 jmp	 $LN31@unzReadCur
$LN18@unzReadCur:

; 1284 : 
; 1285 : 
; 1286 : #            ifndef NOUNCRYPT
; 1287 :             if(s->encrypted)

  0020a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0020f	83 b8 c8 00 00
	00 00		 cmp	 DWORD PTR [rax+200], 0
  00216	0f 84 a7 00 00
	00		 je	 $LN17@unzReadCur

; 1288 :             {
; 1289 :                 uInt i;
; 1290 :                 for(i=0;i<uReadThis;i++)

  0021c	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$80392[rsp], 0
  00224	eb 0b		 jmp	 SHORT $LN16@unzReadCur
$LN15@unzReadCur:
  00226	8b 44 24 3c	 mov	 eax, DWORD PTR i$80392[rsp]
  0022a	83 c0 01	 add	 eax, 1
  0022d	89 44 24 3c	 mov	 DWORD PTR i$80392[rsp], eax
$LN16@unzReadCur:
  00231	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$80385[rsp]
  00235	39 44 24 3c	 cmp	 DWORD PTR i$80392[rsp], eax
  00239	0f 83 84 00 00
	00		 jae	 $LN14@unzReadCur

; 1291 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1292 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1293 :                               pfile_in_zip_read_info->read_buffer[i]);

  0023f	8b 7c 24 3c	 mov	 edi, DWORD PTR i$80392[rsp]
  00243	48 8b 5c 24 28	 mov	 rbx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00248	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  0024b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00250	48 81 c1 cc 00
	00 00		 add	 rcx, 204		; 000000ccH
  00257	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0025c	48 8b 92 d8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+216]
  00263	e8 00 00 00 00	 call	 decrypt_byte
  00268	0f be 14 3b	 movsx	 edx, BYTE PTR [rbx+rdi]
  0026c	33 d0		 xor	 edx, eax
  0026e	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$80392[rsp]
  00272	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00277	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0027a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0027d	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$80392[rsp]
  00281	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00286	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00289	44 0f be 04 08	 movsx	 r8d, BYTE PTR [rax+rcx]
  0028e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00293	48 81 c1 cc 00
	00 00		 add	 rcx, 204		; 000000ccH
  0029a	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0029f	48 8b 92 d8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+216]
  002a6	e8 00 00 00 00	 call	 update_keys
  002ab	44 8b d8	 mov	 r11d, eax
  002ae	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$80392[rsp]
  002b2	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ba	44 88 1c 01	 mov	 BYTE PTR [rcx+rax], r11b
  002be	e9 63 ff ff ff	 jmp	 $LN15@unzReadCur
$LN14@unzReadCur:
$LN17@unzReadCur:

; 1294 :             }
; 1295 : #            endif
; 1296 : 
; 1297 : 
; 1298 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  002c3	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002c8	8b 48 60	 mov	 ecx, DWORD PTR [rax+96]
  002cb	03 4c 24 38	 add	 ecx, DWORD PTR uReadThis$80385[rsp]
  002cf	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002d4	89 48 60	 mov	 DWORD PTR [rax+96], ecx

; 1299 : 
; 1300 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;

  002d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  002dc	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$80385[rsp]
  002e0	8b 49 7c	 mov	 ecx, DWORD PTR [rcx+124]
  002e3	2b c8		 sub	 ecx, eax
  002e5	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002ea	89 48 7c	 mov	 DWORD PTR [rax+124], ecx

; 1301 : 
; 1302 :             pfile_in_zip_read_info->stream.next_in =
; 1303 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;

  002ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  002f2	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002f7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002fa	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1304 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  002fe	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00303	8b 44 24 38	 mov	 eax, DWORD PTR uReadThis$80385[rsp]
  00307	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN22@unzReadCur:

; 1305 :         }
; 1306 : 
; 1307 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  0030a	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0030f	83 b8 d0 00 00
	00 00		 cmp	 DWORD PTR [rax+208], 0
  00316	74 12		 je	 SHORT $LN12@unzReadCur
  00318	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0031d	83 b8 d8 00 00
	00 00		 cmp	 DWORD PTR [rax+216], 0
  00324	0f 84 6a 01 00
	00		 je	 $LN13@unzReadCur
$LN12@unzReadCur:

; 1308 :         {
; 1309 :             uInt uDoCopy,i ;
; 1310 : 
; 1311 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&
; 1312 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))

  0032a	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0032f	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  00333	75 2d		 jne	 SHORT $LN11@unzReadCur
  00335	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0033a	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  0033e	75 22		 jne	 SHORT $LN11@unzReadCur

; 1313 :                 return (iRead==0) ? UNZ_EOF : iRead;

  00340	83 7c 24 30 00	 cmp	 DWORD PTR iRead$[rsp], 0
  00345	75 0a		 jne	 SHORT $LN33@unzReadCur
  00347	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv195[rsp], 0
  0034f	eb 08		 jmp	 SHORT $LN34@unzReadCur
$LN33@unzReadCur:
  00351	8b 44 24 30	 mov	 eax, DWORD PTR iRead$[rsp]
  00355	89 44 24 60	 mov	 DWORD PTR tv195[rsp], eax
$LN34@unzReadCur:
  00359	8b 44 24 60	 mov	 eax, DWORD PTR tv195[rsp]
  0035d	e9 37 02 00 00	 jmp	 $LN31@unzReadCur
$LN11@unzReadCur:

; 1314 : 
; 1315 :             if (pfile_in_zip_read_info->stream.avail_out <
; 1316 :                             pfile_in_zip_read_info->stream.avail_in)

  00362	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00367	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0036c	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0036f	39 41 20	 cmp	 DWORD PTR [rcx+32], eax
  00372	73 0e		 jae	 SHORT $LN10@unzReadCur

; 1317 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;

  00374	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00379	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0037c	89 44 24 44	 mov	 DWORD PTR uDoCopy$80400[rsp], eax

; 1318 :             else

  00380	eb 0c		 jmp	 SHORT $LN9@unzReadCur
$LN10@unzReadCur:

; 1319 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;

  00382	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00387	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0038a	89 44 24 44	 mov	 DWORD PTR uDoCopy$80400[rsp], eax
$LN9@unzReadCur:

; 1320 : 
; 1321 :             for (i=0;i<uDoCopy;i++)

  0038e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$80401[rsp], 0
  00396	eb 0b		 jmp	 SHORT $LN8@unzReadCur
$LN7@unzReadCur:
  00398	8b 44 24 40	 mov	 eax, DWORD PTR i$80401[rsp]
  0039c	83 c0 01	 add	 eax, 1
  0039f	89 44 24 40	 mov	 DWORD PTR i$80401[rsp], eax
$LN8@unzReadCur:
  003a3	8b 44 24 44	 mov	 eax, DWORD PTR uDoCopy$80400[rsp]
  003a7	39 44 24 40	 cmp	 DWORD PTR i$80401[rsp], eax
  003ab	73 25		 jae	 SHORT $LN6@unzReadCur

; 1322 :                 *(pfile_in_zip_read_info->stream.next_out+i) =
; 1323 :                         *(pfile_in_zip_read_info->stream.next_in+i);

  003ad	44 8b 44 24 40	 mov	 r8d, DWORD PTR i$80401[rsp]
  003b2	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003b7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003bb	8b 54 24 40	 mov	 edx, DWORD PTR i$80401[rsp]
  003bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003c4	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  003c8	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  003cd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003d0	eb c6		 jmp	 SHORT $LN7@unzReadCur
$LN6@unzReadCur:

; 1324 : 
; 1325 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,
; 1326 :                                 pfile_in_zip_read_info->stream.next_out,
; 1327 :                                 uDoCopy);

  003d2	44 8b 44 24 44	 mov	 r8d, DWORD PTR uDoCopy$80400[rsp]
  003d7	48 8b 54 24 28	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003dc	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  003e0	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003e5	8b 48 74	 mov	 ecx, DWORD PTR [rax+116]
  003e8	e8 00 00 00 00	 call	 crc32
  003ed	44 8b d8	 mov	 r11d, eax
  003f0	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  003f5	44 89 58 74	 mov	 DWORD PTR [rax+116], r11d

; 1328 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  003f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  003fe	8b 44 24 44	 mov	 eax, DWORD PTR uDoCopy$80400[rsp]
  00402	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [rcx+128]
  00408	2b c8		 sub	 ecx, eax
  0040a	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0040f	89 88 80 00 00
	00		 mov	 DWORD PTR [rax+128], ecx

; 1329 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  00415	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0041a	8b 44 24 44	 mov	 eax, DWORD PTR uDoCopy$80400[rsp]
  0041e	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00421	2b c8		 sub	 ecx, eax
  00423	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00428	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1330 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  0042b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00430	8b 44 24 44	 mov	 eax, DWORD PTR uDoCopy$80400[rsp]
  00434	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00437	2b c8		 sub	 ecx, eax
  00439	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0043e	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 1331 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;

  00441	8b 4c 24 44	 mov	 ecx, DWORD PTR uDoCopy$80400[rsp]
  00445	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0044a	48 03 48 18	 add	 rcx, QWORD PTR [rax+24]
  0044e	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00453	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1332 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  00457	8b 4c 24 44	 mov	 ecx, DWORD PTR uDoCopy$80400[rsp]
  0045b	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00460	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  00464	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00469	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1333 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  0046d	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00472	8b 48 24	 mov	 ecx, DWORD PTR [rax+36]
  00475	03 4c 24 44	 add	 ecx, DWORD PTR uDoCopy$80400[rsp]
  00479	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0047e	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 1334 :             iRead += uDoCopy;

  00481	8b 4c 24 44	 mov	 ecx, DWORD PTR uDoCopy$80400[rsp]
  00485	8b 44 24 30	 mov	 eax, DWORD PTR iRead$[rsp]
  00489	03 c1		 add	 eax, ecx
  0048b	89 44 24 30	 mov	 DWORD PTR iRead$[rsp], eax

; 1335 :         }
; 1336 :         else

  0048f	e9 ef 00 00 00	 jmp	 $LN5@unzReadCur
$LN13@unzReadCur:

; 1337 :         {
; 1338 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1339 :             const Bytef *bufBefore;
; 1340 :             uLong uOutThis;
; 1341 :             int flush=Z_SYNC_FLUSH;

  00494	c7 44 24 54 02
	00 00 00	 mov	 DWORD PTR flush$80413[rsp], 2

; 1342 : 
; 1343 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  0049c	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004a1	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  004a4	89 44 24 5c	 mov	 DWORD PTR uTotalOutBefore$80409[rsp], eax

; 1344 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  004a8	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004ad	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  004b1	48 89 44 24 48	 mov	 QWORD PTR bufBefore$80411[rsp], rax

; 1345 : 
; 1346 :             /*
; 1347 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1348 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1349 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1350 :                 flush = Z_FINISH;
; 1351 :             */
; 1352 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  004b6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  004bb	48 83 c1 08	 add	 rcx, 8
  004bf	8b 54 24 54	 mov	 edx, DWORD PTR flush$80413[rsp]
  004c3	e8 00 00 00 00	 call	 inflate
  004c8	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 1353 : 
; 1354 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  004cc	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  004d1	7c 14		 jl	 SHORT $LN4@unzReadCur
  004d3	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004d8	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  004dd	74 08		 je	 SHORT $LN4@unzReadCur

; 1355 :               err = Z_DATA_ERROR;

  004df	c7 44 24 34 fd
	ff ff ff	 mov	 DWORD PTR err$[rsp], -3
$LN4@unzReadCur:

; 1356 : 
; 1357 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  004e7	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  004ec	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  004ef	89 44 24 58	 mov	 DWORD PTR uTotalOutAfter$80410[rsp], eax

; 1358 :             uOutThis = uTotalOutAfter-uTotalOutBefore;

  004f3	8b 4c 24 5c	 mov	 ecx, DWORD PTR uTotalOutBefore$80409[rsp]
  004f7	8b 44 24 58	 mov	 eax, DWORD PTR uTotalOutAfter$80410[rsp]
  004fb	2b c1		 sub	 eax, ecx
  004fd	89 44 24 50	 mov	 DWORD PTR uOutThis$80412[rsp], eax

; 1359 : 
; 1360 :             pfile_in_zip_read_info->crc32 =
; 1361 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1362 :                         (uInt)(uOutThis));

  00501	44 8b 44 24 50	 mov	 r8d, DWORD PTR uOutThis$80412[rsp]
  00506	48 8b 54 24 48	 mov	 rdx, QWORD PTR bufBefore$80411[rsp]
  0050b	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00510	8b 48 74	 mov	 ecx, DWORD PTR [rax+116]
  00513	e8 00 00 00 00	 call	 crc32
  00518	44 8b d8	 mov	 r11d, eax
  0051b	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00520	44 89 58 74	 mov	 DWORD PTR [rax+116], r11d

; 1363 : 
; 1364 :             pfile_in_zip_read_info->rest_read_uncompressed -=
; 1365 :                 uOutThis;

  00524	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00529	8b 44 24 50	 mov	 eax, DWORD PTR uOutThis$80412[rsp]
  0052d	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [rcx+128]
  00533	2b c8		 sub	 ecx, eax
  00535	48 8b 44 24 28	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0053a	89 88 80 00 00
	00		 mov	 DWORD PTR [rax+128], ecx

; 1366 : 
; 1367 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  00540	8b 44 24 5c	 mov	 eax, DWORD PTR uTotalOutBefore$80409[rsp]
  00544	8b 4c 24 58	 mov	 ecx, DWORD PTR uTotalOutAfter$80410[rsp]
  00548	2b c8		 sub	 ecx, eax
  0054a	8b 44 24 30	 mov	 eax, DWORD PTR iRead$[rsp]
  0054e	03 c1		 add	 eax, ecx
  00550	89 44 24 30	 mov	 DWORD PTR iRead$[rsp], eax

; 1368 : 
; 1369 :             if (err==Z_STREAM_END)

  00554	83 7c 24 34 01	 cmp	 DWORD PTR err$[rsp], 1
  00559	75 1f		 jne	 SHORT $LN3@unzReadCur

; 1370 :                 return (iRead==0) ? UNZ_EOF : iRead;

  0055b	83 7c 24 30 00	 cmp	 DWORD PTR iRead$[rsp], 0
  00560	75 0a		 jne	 SHORT $LN35@unzReadCur
  00562	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv261[rsp], 0
  0056a	eb 08		 jmp	 SHORT $LN36@unzReadCur
$LN35@unzReadCur:
  0056c	8b 44 24 30	 mov	 eax, DWORD PTR iRead$[rsp]
  00570	89 44 24 64	 mov	 DWORD PTR tv261[rsp], eax
$LN36@unzReadCur:
  00574	8b 44 24 64	 mov	 eax, DWORD PTR tv261[rsp]
  00578	eb 1f		 jmp	 SHORT $LN31@unzReadCur
$LN3@unzReadCur:

; 1371 :             if (err!=Z_OK)

  0057a	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  0057f	74 02		 je	 SHORT $LN2@unzReadCur

; 1372 :                 break;

  00581	eb 05		 jmp	 SHORT $LN23@unzReadCur
$LN2@unzReadCur:
$LN5@unzReadCur:

; 1373 :         }
; 1374 :     }

  00583	e9 9c fb ff ff	 jmp	 $LN24@unzReadCur
$LN23@unzReadCur:

; 1375 : 
; 1376 :     if (err==Z_OK)

  00588	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  0058d	75 06		 jne	 SHORT $LN1@unzReadCur

; 1377 :         return iRead;

  0058f	8b 44 24 30	 mov	 eax, DWORD PTR iRead$[rsp]
  00593	eb 04		 jmp	 SHORT $LN31@unzReadCur
$LN1@unzReadCur:

; 1378 :     return err;

  00595	8b 44 24 34	 mov	 eax, DWORD PTR err$[rsp]
$LN31@unzReadCur:

; 1379 : }

  00599	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0059d	5f		 pop	 rdi
  0059e	5b		 pop	 rbx
  0059f	c3		 ret	 0
unzReadCurrentFile ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_CheckCurrentFileCoherencyHeader DD imagerel unzlocal_CheckCurrentFileCoherencyHeader
	DD	imagerel unzlocal_CheckCurrentFileCoherencyHeader+835
	DD	imagerel $unwind$unzlocal_CheckCurrentFileCoherencyHeader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_CheckCurrentFileCoherencyHeader DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
uData$ = 32
size_extra_field$ = 36
uMagic$ = 40
err$ = 44
size_filename$ = 48
uFlags$ = 52
s$ = 80
piSizeVar$ = 88
poffset_local_extrafield$ = 96
psize_local_extrafield$ = 104
unzlocal_CheckCurrentFileCoherencyHeader PROC		; COMDAT

; 964  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 965  :     uLong uMagic,uData,uFlags;
; 966  :     uLong size_filename;
; 967  :     uLong size_extra_field;
; 968  :     int err=UNZ_OK;

  00018	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 969  : 
; 970  :     *piSizeVar = 0;

  00020	48 8b 44 24 58	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  00025	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 971  :     *poffset_local_extrafield = 0;

  0002b	48 8b 44 24 60	 mov	 rax, QWORD PTR poffset_local_extrafield$[rsp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 972  :     *psize_local_extrafield = 0;

  00036	48 8b 44 24 68	 mov	 rax, QWORD PTR psize_local_extrafield$[rsp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 973  : 
; 974  :     if (ZSEEK(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 975  :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00046	44 8b 80 bc 00
	00 00		 mov	 r8d, DWORD PTR [rax+188]
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00052	44 03 40 50	 add	 r8d, DWORD PTR [rax+80]
  00056	45 33 c9	 xor	 r9d, r9d
  00059	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0005e	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00062	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00067	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0006b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00070	ff 50 20	 call	 QWORD PTR [rax+32]
  00073	85 c0		 test	 eax, eax
  00075	74 0a		 je	 SHORT $LN25@unzlocal_C

; 976  :         return UNZ_ERRNO;

  00077	b8 ff ff ff ff	 mov	 eax, -1
  0007c	e9 bd 02 00 00	 jmp	 $LN26@unzlocal_C
$LN25@unzlocal_C:

; 977  : 
; 978  : 
; 979  :     if (err==UNZ_OK)

  00081	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00086	75 38		 jne	 SHORT $LN24@unzlocal_C

; 980  :         if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00088	4c 8d 44 24 28	 lea	 r8, QWORD PTR uMagic$[rsp]
  0008d	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00092	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00096	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0009b	e8 00 00 00 00	 call	 unzlocal_getLong
  000a0	85 c0		 test	 eax, eax
  000a2	74 0a		 je	 SHORT $LN23@unzlocal_C

; 981  :             err=UNZ_ERRNO;

  000a4	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  000ac	eb 12		 jmp	 SHORT $LN22@unzlocal_C
$LN23@unzlocal_C:

; 982  :         else if (uMagic!=0x04034b50)

  000ae	81 7c 24 28 50
	4b 03 04	 cmp	 DWORD PTR uMagic$[rsp], 67324752 ; 04034b50H
  000b6	74 08		 je	 SHORT $LN21@unzlocal_C

; 983  :             err=UNZ_BADZIPFILE;

  000b8	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN21@unzlocal_C:
$LN22@unzlocal_C:
$LN24@unzlocal_C:

; 984  : 
; 985  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000c0	4c 8d 44 24 20	 lea	 r8, QWORD PTR uData$[rsp]
  000c5	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  000ca	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000d3	e8 00 00 00 00	 call	 unzlocal_getShort
  000d8	85 c0		 test	 eax, eax
  000da	74 08		 je	 SHORT $LN20@unzlocal_C

; 986  :         err=UNZ_ERRNO;

  000dc	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN20@unzlocal_C:

; 987  : /*
; 988  :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 989  :         err=UNZ_BADZIPFILE;
; 990  : */
; 991  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  000e4	4c 8d 44 24 34	 lea	 r8, QWORD PTR uFlags$[rsp]
  000e9	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  000ee	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000f7	e8 00 00 00 00	 call	 unzlocal_getShort
  000fc	85 c0		 test	 eax, eax
  000fe	74 08		 je	 SHORT $LN19@unzlocal_C

; 992  :         err=UNZ_ERRNO;

  00100	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN19@unzlocal_C:

; 993  : 
; 994  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  00108	4c 8d 44 24 20	 lea	 r8, QWORD PTR uData$[rsp]
  0010d	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00112	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00116	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0011b	e8 00 00 00 00	 call	 unzlocal_getShort
  00120	85 c0		 test	 eax, eax
  00122	74 0a		 je	 SHORT $LN18@unzlocal_C

; 995  :         err=UNZ_ERRNO;

  00124	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  0012c	eb 1d		 jmp	 SHORT $LN17@unzlocal_C
$LN18@unzlocal_C:

; 996  :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  0012e	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00133	75 16		 jne	 SHORT $LN16@unzlocal_C
  00135	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0013a	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0013d	39 44 24 20	 cmp	 DWORD PTR uData$[rsp], eax
  00141	74 08		 je	 SHORT $LN16@unzlocal_C

; 997  :         err=UNZ_BADZIPFILE;

  00143	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN16@unzlocal_C:
$LN17@unzlocal_C:

; 998  : 
; 999  :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1000 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))

  0014b	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00150	75 1e		 jne	 SHORT $LN15@unzlocal_C
  00152	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00157	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  0015b	74 13		 je	 SHORT $LN15@unzlocal_C
  0015d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00162	83 78 78 08	 cmp	 DWORD PTR [rax+120], 8
  00166	74 08		 je	 SHORT $LN15@unzlocal_C

; 1001 :         err=UNZ_BADZIPFILE;

  00168	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN15@unzlocal_C:

; 1002 : 
; 1003 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  00170	4c 8d 44 24 20	 lea	 r8, QWORD PTR uData$[rsp]
  00175	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0017a	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0017e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00183	e8 00 00 00 00	 call	 unzlocal_getLong
  00188	85 c0		 test	 eax, eax
  0018a	74 08		 je	 SHORT $LN14@unzlocal_C

; 1004 :         err=UNZ_ERRNO;

  0018c	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN14@unzlocal_C:

; 1005 : 
; 1006 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  00194	4c 8d 44 24 20	 lea	 r8, QWORD PTR uData$[rsp]
  00199	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0019e	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001a7	e8 00 00 00 00	 call	 unzlocal_getLong
  001ac	85 c0		 test	 eax, eax
  001ae	74 0a		 je	 SHORT $LN13@unzlocal_C

; 1007 :         err=UNZ_ERRNO;

  001b0	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 1008 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) &&

  001b8	eb 2b		 jmp	 SHORT $LN12@unzlocal_C
$LN13@unzlocal_C:

; 1009 :                               ((uFlags & 8)==0))

  001ba	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  001bf	75 24		 jne	 SHORT $LN11@unzlocal_C
  001c1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001c6	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  001cc	39 44 24 20	 cmp	 DWORD PTR uData$[rsp], eax
  001d0	74 13		 je	 SHORT $LN11@unzlocal_C
  001d2	8b 44 24 34	 mov	 eax, DWORD PTR uFlags$[rsp]
  001d6	83 e0 08	 and	 eax, 8
  001d9	85 c0		 test	 eax, eax
  001db	75 08		 jne	 SHORT $LN11@unzlocal_C

; 1010 :         err=UNZ_BADZIPFILE;

  001dd	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN11@unzlocal_C:
$LN12@unzlocal_C:

; 1011 : 
; 1012 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  001e5	4c 8d 44 24 20	 lea	 r8, QWORD PTR uData$[rsp]
  001ea	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  001ef	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001f3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001f8	e8 00 00 00 00	 call	 unzlocal_getLong
  001fd	85 c0		 test	 eax, eax
  001ff	74 0a		 je	 SHORT $LN10@unzlocal_C

; 1013 :         err=UNZ_ERRNO;

  00201	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 1014 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) &&

  00209	eb 2b		 jmp	 SHORT $LN9@unzlocal_C
$LN10@unzlocal_C:

; 1015 :                               ((uFlags & 8)==0))

  0020b	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00210	75 24		 jne	 SHORT $LN8@unzlocal_C
  00212	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00217	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [rax+132]
  0021d	39 44 24 20	 cmp	 DWORD PTR uData$[rsp], eax
  00221	74 13		 je	 SHORT $LN8@unzlocal_C
  00223	8b 44 24 34	 mov	 eax, DWORD PTR uFlags$[rsp]
  00227	83 e0 08	 and	 eax, 8
  0022a	85 c0		 test	 eax, eax
  0022c	75 08		 jne	 SHORT $LN8@unzlocal_C

; 1016 :         err=UNZ_BADZIPFILE;

  0022e	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN8@unzlocal_C:
$LN9@unzlocal_C:

; 1017 : 
; 1018 :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  00236	4c 8d 44 24 20	 lea	 r8, QWORD PTR uData$[rsp]
  0023b	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00240	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00244	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00249	e8 00 00 00 00	 call	 unzlocal_getLong
  0024e	85 c0		 test	 eax, eax
  00250	74 0a		 je	 SHORT $LN7@unzlocal_C

; 1019 :         err=UNZ_ERRNO;

  00252	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 1020 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) &&

  0025a	eb 2b		 jmp	 SHORT $LN6@unzlocal_C
$LN7@unzlocal_C:

; 1021 :                               ((uFlags & 8)==0))

  0025c	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00261	75 24		 jne	 SHORT $LN5@unzlocal_C
  00263	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00268	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0026e	39 44 24 20	 cmp	 DWORD PTR uData$[rsp], eax
  00272	74 13		 je	 SHORT $LN5@unzlocal_C
  00274	8b 44 24 34	 mov	 eax, DWORD PTR uFlags$[rsp]
  00278	83 e0 08	 and	 eax, 8
  0027b	85 c0		 test	 eax, eax
  0027d	75 08		 jne	 SHORT $LN5@unzlocal_C

; 1022 :         err=UNZ_BADZIPFILE;

  0027f	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN5@unzlocal_C:
$LN6@unzlocal_C:

; 1023 : 
; 1024 : 
; 1025 :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  00287	4c 8d 44 24 30	 lea	 r8, QWORD PTR size_filename$[rsp]
  0028c	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00291	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00295	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0029a	e8 00 00 00 00	 call	 unzlocal_getShort
  0029f	85 c0		 test	 eax, eax
  002a1	74 0a		 je	 SHORT $LN4@unzlocal_C

; 1026 :         err=UNZ_ERRNO;

  002a3	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
  002ab	eb 20		 jmp	 SHORT $LN3@unzlocal_C
$LN4@unzlocal_C:

; 1027 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  002ad	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  002b2	75 19		 jne	 SHORT $LN2@unzlocal_C
  002b4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002b9	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [rax+140]
  002bf	39 44 24 30	 cmp	 DWORD PTR size_filename$[rsp], eax
  002c3	74 08		 je	 SHORT $LN2@unzlocal_C

; 1028 :         err=UNZ_BADZIPFILE;

  002c5	c7 44 24 2c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN2@unzlocal_C:
$LN3@unzlocal_C:

; 1029 : 
; 1030 :     *piSizeVar += (uInt)size_filename;

  002cd	48 8b 44 24 58	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  002d2	8b 08		 mov	 ecx, DWORD PTR [rax]
  002d4	03 4c 24 30	 add	 ecx, DWORD PTR size_filename$[rsp]
  002d8	48 8b 44 24 58	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  002dd	89 08		 mov	 DWORD PTR [rax], ecx

; 1031 : 
; 1032 :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  002df	4c 8d 44 24 24	 lea	 r8, QWORD PTR size_extra_field$[rsp]
  002e4	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  002e9	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002ed	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002f2	e8 00 00 00 00	 call	 unzlocal_getShort
  002f7	85 c0		 test	 eax, eax
  002f9	74 08		 je	 SHORT $LN1@unzlocal_C

; 1033 :         err=UNZ_ERRNO;

  002fb	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@unzlocal_C:

; 1034 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
; 1035 :                                     SIZEZIPLOCALHEADER + size_filename;

  00303	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00308	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [rax+188]
  0030e	8b 44 24 30	 mov	 eax, DWORD PTR size_filename$[rsp]
  00312	8d 4c 01 1e	 lea	 ecx, DWORD PTR [rcx+rax+30]
  00316	48 8b 44 24 60	 mov	 rax, QWORD PTR poffset_local_extrafield$[rsp]
  0031b	89 08		 mov	 DWORD PTR [rax], ecx

; 1036 :     *psize_local_extrafield = (uInt)size_extra_field;

  0031d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR psize_local_extrafield$[rsp]
  00322	8b 44 24 24	 mov	 eax, DWORD PTR size_extra_field$[rsp]
  00326	89 01		 mov	 DWORD PTR [rcx], eax

; 1037 : 
; 1038 :     *piSizeVar += (uInt)size_extra_field;

  00328	48 8b 44 24 58	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  0032d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0032f	03 4c 24 24	 add	 ecx, DWORD PTR size_extra_field$[rsp]
  00333	48 8b 44 24 58	 mov	 rax, QWORD PTR piSizeVar$[rsp]
  00338	89 08		 mov	 DWORD PTR [rax], ecx

; 1039 : 
; 1040 :     return err;

  0033a	8b 44 24 2c	 mov	 eax, DWORD PTR err$[rsp]
$LN26@unzlocal_C:

; 1041 : }

  0033e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00342	c3		 ret	 0
unzlocal_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzlocal_GetCurrentFileInfoInternal DD imagerel unzlocal_GetCurrentFileInfoInternal
	DD	imagerel unzlocal_GetCurrentFileInfoInternal+1694
	DD	imagerel $unwind$unzlocal_GetCurrentFileInfoInternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzlocal_GetCurrentFileInfoInternal DD 041d01H
	DD	015011dH
	DD	060157016H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzlocal_GetCurrentFileInfoInternal
_TEXT	SEGMENT
s$ = 32
uMagic$ = 40
file_info$ = 48
lSeek$ = 128
file_info_internal$ = 132
err$ = 136
uSizeRead$80120 = 140
uSizeRead$80127 = 144
uSizeRead$80138 = 148
file$ = 192
pfile_info$ = 200
pfile_info_internal$ = 208
szFileName$ = 216
fileNameBufferSize$ = 224
extraField$ = 232
extraFieldBufferSize$ = 240
szComment$ = 248
commentBufferSize$ = 256
unzlocal_GetCurrentFileInfoInternal PROC		; COMDAT

; 592  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 593  :     unz_s* s;
; 594  :     unz_file_info file_info;
; 595  :     unz_file_info_internal file_info_internal;
; 596  :     int err=UNZ_OK;

  0001d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR err$[rsp], 0

; 597  :     uLong uMagic;
; 598  :     long lSeek=0;

  00028	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0

; 599  : 
; 600  :     if (file==NULL)

  00033	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  0003c	75 0a		 jne	 SHORT $LN46@unzlocal_G@2

; 601  :         return UNZ_PARAMERROR;

  0003e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00043	e9 4c 06 00 00	 jmp	 $LN47@unzlocal_G@2
$LN46@unzlocal_G@2:

; 602  :     s=(unz_s*)file;

  00048	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00050	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 603  :     if (ZSEEK(s->z_filefunc, s->filestream,
; 604  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 605  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005a	44 8b 40 58	 mov	 r8d, DWORD PTR [rax+88]
  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00063	44 03 40 50	 add	 r8d, DWORD PTR [rax+80]
  00067	45 33 c9	 xor	 r9d, r9d
  0006a	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0006f	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00073	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00078	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00081	ff 50 20	 call	 QWORD PTR [rax+32]
  00084	85 c0		 test	 eax, eax
  00086	74 0b		 je	 SHORT $LN45@unzlocal_G@2

; 606  :         err=UNZ_ERRNO;

  00088	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN45@unzlocal_G@2:

; 607  : 
; 608  : 
; 609  :     /* we check the magic */
; 610  :     if (err==UNZ_OK)

  00093	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0009b	75 3e		 jne	 SHORT $LN44@unzlocal_G@2

; 611  :         if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  0009d	4c 8d 44 24 28	 lea	 r8, QWORD PTR uMagic$[rsp]
  000a2	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  000a7	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000b0	e8 00 00 00 00	 call	 unzlocal_getLong
  000b5	85 c0		 test	 eax, eax
  000b7	74 0d		 je	 SHORT $LN43@unzlocal_G@2

; 612  :             err=UNZ_ERRNO;

  000b9	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
  000c4	eb 15		 jmp	 SHORT $LN42@unzlocal_G@2
$LN43@unzlocal_G@2:

; 613  :         else if (uMagic!=0x02014b50)

  000c6	81 7c 24 28 50
	4b 01 02	 cmp	 DWORD PTR uMagic$[rsp], 33639248 ; 02014b50H
  000ce	74 0b		 je	 SHORT $LN41@unzlocal_G@2

; 614  :             err=UNZ_BADZIPFILE;

  000d0	c7 84 24 88 00
	00 00 99 ff ff
	ff		 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN41@unzlocal_G@2:
$LN42@unzlocal_G@2:
$LN44@unzlocal_G@2:

; 615  : 
; 616  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  000db	4c 8d 44 24 30	 lea	 r8, QWORD PTR file_info$[rsp]
  000e0	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  000e5	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000ee	e8 00 00 00 00	 call	 unzlocal_getShort
  000f3	85 c0		 test	 eax, eax
  000f5	74 0b		 je	 SHORT $LN40@unzlocal_G@2

; 617  :         err=UNZ_ERRNO;

  000f7	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN40@unzlocal_G@2:

; 618  : 
; 619  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  00102	4c 8d 44 24 34	 lea	 r8, QWORD PTR file_info$[rsp+4]
  00107	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0010c	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00110	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00115	e8 00 00 00 00	 call	 unzlocal_getShort
  0011a	85 c0		 test	 eax, eax
  0011c	74 0b		 je	 SHORT $LN39@unzlocal_G@2

; 620  :         err=UNZ_ERRNO;

  0011e	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN39@unzlocal_G@2:

; 621  : 
; 622  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  00129	4c 8d 44 24 38	 lea	 r8, QWORD PTR file_info$[rsp+8]
  0012e	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00133	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00137	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0013c	e8 00 00 00 00	 call	 unzlocal_getShort
  00141	85 c0		 test	 eax, eax
  00143	74 0b		 je	 SHORT $LN38@unzlocal_G@2

; 623  :         err=UNZ_ERRNO;

  00145	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN38@unzlocal_G@2:

; 624  : 
; 625  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  00150	4c 8d 44 24 3c	 lea	 r8, QWORD PTR file_info$[rsp+12]
  00155	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0015a	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0015e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00163	e8 00 00 00 00	 call	 unzlocal_getShort
  00168	85 c0		 test	 eax, eax
  0016a	74 0b		 je	 SHORT $LN37@unzlocal_G@2

; 626  :         err=UNZ_ERRNO;

  0016c	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN37@unzlocal_G@2:

; 627  : 
; 628  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  00177	4c 8d 44 24 40	 lea	 r8, QWORD PTR file_info$[rsp+16]
  0017c	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00181	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00185	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0018a	e8 00 00 00 00	 call	 unzlocal_getLong
  0018f	85 c0		 test	 eax, eax
  00191	74 0b		 je	 SHORT $LN36@unzlocal_G@2

; 629  :         err=UNZ_ERRNO;

  00193	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN36@unzlocal_G@2:

; 630  : 
; 631  :     unzlocal_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  0019e	48 8d 54 24 68	 lea	 rdx, QWORD PTR file_info$[rsp+56]
  001a3	8b 4c 24 40	 mov	 ecx, DWORD PTR file_info$[rsp+16]
  001a7	e8 00 00 00 00	 call	 unzlocal_DosDateToTmuDate

; 632  : 
; 633  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  001ac	4c 8d 44 24 44	 lea	 r8, QWORD PTR file_info$[rsp+20]
  001b1	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  001b6	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001bf	e8 00 00 00 00	 call	 unzlocal_getLong
  001c4	85 c0		 test	 eax, eax
  001c6	74 0b		 je	 SHORT $LN35@unzlocal_G@2

; 634  :         err=UNZ_ERRNO;

  001c8	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN35@unzlocal_G@2:

; 635  : 
; 636  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  001d3	4c 8d 44 24 48	 lea	 r8, QWORD PTR file_info$[rsp+24]
  001d8	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  001dd	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001e6	e8 00 00 00 00	 call	 unzlocal_getLong
  001eb	85 c0		 test	 eax, eax
  001ed	74 0b		 je	 SHORT $LN34@unzlocal_G@2

; 637  :         err=UNZ_ERRNO;

  001ef	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN34@unzlocal_G@2:

; 638  : 
; 639  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  001fa	4c 8d 44 24 4c	 lea	 r8, QWORD PTR file_info$[rsp+28]
  001ff	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00204	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00208	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0020d	e8 00 00 00 00	 call	 unzlocal_getLong
  00212	85 c0		 test	 eax, eax
  00214	74 0b		 je	 SHORT $LN33@unzlocal_G@2

; 640  :         err=UNZ_ERRNO;

  00216	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN33@unzlocal_G@2:

; 641  : 
; 642  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  00221	4c 8d 44 24 50	 lea	 r8, QWORD PTR file_info$[rsp+32]
  00226	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0022b	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0022f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00234	e8 00 00 00 00	 call	 unzlocal_getShort
  00239	85 c0		 test	 eax, eax
  0023b	74 0b		 je	 SHORT $LN32@unzlocal_G@2

; 643  :         err=UNZ_ERRNO;

  0023d	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN32@unzlocal_G@2:

; 644  : 
; 645  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  00248	4c 8d 44 24 54	 lea	 r8, QWORD PTR file_info$[rsp+36]
  0024d	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00252	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00256	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0025b	e8 00 00 00 00	 call	 unzlocal_getShort
  00260	85 c0		 test	 eax, eax
  00262	74 0b		 je	 SHORT $LN31@unzlocal_G@2

; 646  :         err=UNZ_ERRNO;

  00264	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN31@unzlocal_G@2:

; 647  : 
; 648  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  0026f	4c 8d 44 24 58	 lea	 r8, QWORD PTR file_info$[rsp+40]
  00274	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00279	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0027d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00282	e8 00 00 00 00	 call	 unzlocal_getShort
  00287	85 c0		 test	 eax, eax
  00289	74 0b		 je	 SHORT $LN30@unzlocal_G@2

; 649  :         err=UNZ_ERRNO;

  0028b	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN30@unzlocal_G@2:

; 650  : 
; 651  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  00296	4c 8d 44 24 5c	 lea	 r8, QWORD PTR file_info$[rsp+44]
  0029b	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  002a0	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002a4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  002a9	e8 00 00 00 00	 call	 unzlocal_getShort
  002ae	85 c0		 test	 eax, eax
  002b0	74 0b		 je	 SHORT $LN29@unzlocal_G@2

; 652  :         err=UNZ_ERRNO;

  002b2	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN29@unzlocal_G@2:

; 653  : 
; 654  :     if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  002bd	4c 8d 44 24 60	 lea	 r8, QWORD PTR file_info$[rsp+48]
  002c2	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  002c7	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  002d0	e8 00 00 00 00	 call	 unzlocal_getShort
  002d5	85 c0		 test	 eax, eax
  002d7	74 0b		 je	 SHORT $LN28@unzlocal_G@2

; 655  :         err=UNZ_ERRNO;

  002d9	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN28@unzlocal_G@2:

; 656  : 
; 657  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  002e4	4c 8d 44 24 64	 lea	 r8, QWORD PTR file_info$[rsp+52]
  002e9	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  002ee	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  002f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  002f7	e8 00 00 00 00	 call	 unzlocal_getLong
  002fc	85 c0		 test	 eax, eax
  002fe	74 0b		 je	 SHORT $LN27@unzlocal_G@2

; 658  :         err=UNZ_ERRNO;

  00300	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN27@unzlocal_G@2:

; 659  : 
; 660  :     if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  0030b	4c 8d 84 24 84
	00 00 00	 lea	 r8, QWORD PTR file_info_internal$[rsp]
  00313	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00318	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0031c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00321	e8 00 00 00 00	 call	 unzlocal_getLong
  00326	85 c0		 test	 eax, eax
  00328	74 0b		 je	 SHORT $LN26@unzlocal_G@2

; 661  :         err=UNZ_ERRNO;

  0032a	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN26@unzlocal_G@2:

; 662  : 
; 663  :     lSeek+=file_info.size_filename;

  00335	8b 4c 24 50	 mov	 ecx, DWORD PTR file_info$[rsp+32]
  00339	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR lSeek$[rsp]
  00340	03 c1		 add	 eax, ecx
  00342	89 84 24 80 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 664  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  00349	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00351	0f 85 ad 00 00
	00		 jne	 $LN25@unzlocal_G@2
  00357	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR szFileName$[rsp], 0
  00360	0f 84 9e 00 00
	00		 je	 $LN25@unzlocal_G@2

; 665  :     {
; 666  :         uLong uSizeRead ;
; 667  :         if (file_info.size_filename<fileNameBufferSize)

  00366	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  0036d	39 44 24 50	 cmp	 DWORD PTR file_info$[rsp+32], eax
  00371	73 1d		 jae	 SHORT $LN24@unzlocal_G@2

; 668  :         {
; 669  :             *(szFileName+file_info.size_filename)='\0';

  00373	8b 4c 24 50	 mov	 ecx, DWORD PTR file_info$[rsp+32]
  00377	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR szFileName$[rsp]
  0037f	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 670  :             uSizeRead = file_info.size_filename;

  00383	8b 44 24 50	 mov	 eax, DWORD PTR file_info$[rsp+32]
  00387	89 84 24 8c 00
	00 00		 mov	 DWORD PTR uSizeRead$80120[rsp], eax

; 671  :         }
; 672  :         else

  0038e	eb 0e		 jmp	 SHORT $LN23@unzlocal_G@2
$LN24@unzlocal_G@2:

; 673  :             uSizeRead = fileNameBufferSize;

  00390	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  00397	89 84 24 8c 00
	00 00		 mov	 DWORD PTR uSizeRead$80120[rsp], eax
$LN23@unzlocal_G@2:

; 674  : 
; 675  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  0039e	83 7c 24 50 00	 cmp	 DWORD PTR file_info$[rsp+32], 0
  003a3	76 48		 jbe	 SHORT $LN22@unzlocal_G@2
  003a5	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR fileNameBufferSize$[rsp], 0
  003ad	76 3e		 jbe	 SHORT $LN22@unzlocal_G@2

; 676  :             if (ZREAD(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  003af	44 8b 8c 24 8c
	00 00 00	 mov	 r9d, DWORD PTR uSizeRead$80120[rsp]
  003b7	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR szFileName$[rsp]
  003bf	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  003c4	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  003c8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  003cd	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  003d1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  003d6	ff 50 08	 call	 QWORD PTR [rax+8]
  003d9	3b 84 24 8c 00
	00 00		 cmp	 eax, DWORD PTR uSizeRead$80120[rsp]
  003e0	74 0b		 je	 SHORT $LN21@unzlocal_G@2

; 677  :                 err=UNZ_ERRNO;

  003e2	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN21@unzlocal_G@2:
$LN22@unzlocal_G@2:

; 678  :         lSeek -= uSizeRead;

  003ed	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR uSizeRead$80120[rsp]
  003f4	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR lSeek$[rsp]
  003fb	2b c1		 sub	 eax, ecx
  003fd	89 84 24 80 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax
$LN25@unzlocal_G@2:

; 679  :     }
; 680  : 
; 681  : 
; 682  :     if ((err==UNZ_OK) && (extraField!=NULL))

  00404	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0040c	0f 85 f3 00 00
	00		 jne	 $LN20@unzlocal_G@2
  00412	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR extraField$[rsp], 0
  0041b	0f 84 e4 00 00
	00		 je	 $LN20@unzlocal_G@2

; 683  :     {
; 684  :         uLong uSizeRead ;
; 685  :         if (file_info.size_file_extra<extraFieldBufferSize)

  00421	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00428	39 44 24 54	 cmp	 DWORD PTR file_info$[rsp+36], eax
  0042c	73 0d		 jae	 SHORT $LN19@unzlocal_G@2

; 686  :             uSizeRead = file_info.size_file_extra;

  0042e	8b 44 24 54	 mov	 eax, DWORD PTR file_info$[rsp+36]
  00432	89 84 24 90 00
	00 00		 mov	 DWORD PTR uSizeRead$80127[rsp], eax

; 687  :         else

  00439	eb 0e		 jmp	 SHORT $LN18@unzlocal_G@2
$LN19@unzlocal_G@2:

; 688  :             uSizeRead = extraFieldBufferSize;

  0043b	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00442	89 84 24 90 00
	00 00		 mov	 DWORD PTR uSizeRead$80127[rsp], eax
$LN18@unzlocal_G@2:

; 689  : 
; 690  :         if (lSeek!=0)

  00449	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR lSeek$[rsp], 0
  00451	74 44		 je	 SHORT $LN17@unzlocal_G@2

; 691  :             if (ZSEEK(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00453	41 b9 01 00 00
	00		 mov	 r9d, 1
  00459	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR lSeek$[rsp]
  00461	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00466	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0046a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0046f	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00473	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00478	ff 50 20	 call	 QWORD PTR [rax+32]
  0047b	85 c0		 test	 eax, eax
  0047d	75 0d		 jne	 SHORT $LN16@unzlocal_G@2

; 692  :                 lSeek=0;

  0047f	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0

; 693  :             else

  0048a	eb 0b		 jmp	 SHORT $LN15@unzlocal_G@2
$LN16@unzlocal_G@2:

; 694  :                 err=UNZ_ERRNO;

  0048c	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN15@unzlocal_G@2:
$LN17@unzlocal_G@2:

; 695  :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00497	83 7c 24 54 00	 cmp	 DWORD PTR file_info$[rsp+36], 0
  0049c	76 48		 jbe	 SHORT $LN14@unzlocal_G@2
  0049e	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR extraFieldBufferSize$[rsp], 0
  004a6	76 3e		 jbe	 SHORT $LN14@unzlocal_G@2

; 696  :             if (ZREAD(s->z_filefunc, s->filestream,extraField,uSizeRead)!=uSizeRead)

  004a8	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR uSizeRead$80127[rsp]
  004b0	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR extraField$[rsp]
  004b8	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  004bd	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  004c1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  004c6	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  004ca	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  004cf	ff 50 08	 call	 QWORD PTR [rax+8]
  004d2	3b 84 24 90 00
	00 00		 cmp	 eax, DWORD PTR uSizeRead$80127[rsp]
  004d9	74 0b		 je	 SHORT $LN13@unzlocal_G@2

; 697  :                 err=UNZ_ERRNO;

  004db	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN13@unzlocal_G@2:
$LN14@unzlocal_G@2:

; 698  :         lSeek += file_info.size_file_extra - uSizeRead;

  004e6	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR uSizeRead$80127[rsp]
  004ed	8b 4c 24 54	 mov	 ecx, DWORD PTR file_info$[rsp+36]
  004f1	2b c8		 sub	 ecx, eax
  004f3	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR lSeek$[rsp]
  004fa	03 c1		 add	 eax, ecx
  004fc	89 84 24 80 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 699  :     }
; 700  :     else

  00503	eb 14		 jmp	 SHORT $LN12@unzlocal_G@2
$LN20@unzlocal_G@2:

; 701  :         lSeek+=file_info.size_file_extra;

  00505	8b 4c 24 54	 mov	 ecx, DWORD PTR file_info$[rsp+36]
  00509	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR lSeek$[rsp]
  00510	03 c1		 add	 eax, ecx
  00512	89 84 24 80 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax
$LN12@unzlocal_G@2:

; 702  : 
; 703  : 
; 704  :     if ((err==UNZ_OK) && (szComment!=NULL))

  00519	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00521	0f 85 03 01 00
	00		 jne	 $LN11@unzlocal_G@2
  00527	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR szComment$[rsp], 0
  00530	0f 84 f4 00 00
	00		 je	 $LN11@unzlocal_G@2

; 705  :     {
; 706  :         uLong uSizeRead ;
; 707  :         if (file_info.size_file_comment<commentBufferSize)

  00536	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  0053d	39 44 24 58	 cmp	 DWORD PTR file_info$[rsp+40], eax
  00541	73 1d		 jae	 SHORT $LN10@unzlocal_G@2

; 708  :         {
; 709  :             *(szComment+file_info.size_file_comment)='\0';

  00543	8b 4c 24 58	 mov	 ecx, DWORD PTR file_info$[rsp+40]
  00547	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  0054f	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 710  :             uSizeRead = file_info.size_file_comment;

  00553	8b 44 24 58	 mov	 eax, DWORD PTR file_info$[rsp+40]
  00557	89 84 24 94 00
	00 00		 mov	 DWORD PTR uSizeRead$80138[rsp], eax

; 711  :         }
; 712  :         else

  0055e	eb 0e		 jmp	 SHORT $LN9@unzlocal_G@2
$LN10@unzlocal_G@2:

; 713  :             uSizeRead = commentBufferSize;

  00560	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  00567	89 84 24 94 00
	00 00		 mov	 DWORD PTR uSizeRead$80138[rsp], eax
$LN9@unzlocal_G@2:

; 714  : 
; 715  :         if (lSeek!=0)

  0056e	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR lSeek$[rsp], 0
  00576	74 44		 je	 SHORT $LN8@unzlocal_G@2

; 716  :             if (ZSEEK(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00578	41 b9 01 00 00
	00		 mov	 r9d, 1
  0057e	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR lSeek$[rsp]
  00586	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0058b	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0058f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00594	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00598	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0059d	ff 50 20	 call	 QWORD PTR [rax+32]
  005a0	85 c0		 test	 eax, eax
  005a2	75 0d		 jne	 SHORT $LN7@unzlocal_G@2

; 717  :                 lSeek=0;

  005a4	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lSeek$[rsp], 0

; 718  :             else

  005af	eb 0b		 jmp	 SHORT $LN6@unzlocal_G@2
$LN7@unzlocal_G@2:

; 719  :                 err=UNZ_ERRNO;

  005b1	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN6@unzlocal_G@2:
$LN8@unzlocal_G@2:

; 720  :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  005bc	83 7c 24 58 00	 cmp	 DWORD PTR file_info$[rsp+40], 0
  005c1	76 48		 jbe	 SHORT $LN5@unzlocal_G@2
  005c3	83 bc 24 00 01
	00 00 00	 cmp	 DWORD PTR commentBufferSize$[rsp], 0
  005cb	76 3e		 jbe	 SHORT $LN5@unzlocal_G@2

; 721  :             if (ZREAD(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  005cd	44 8b 8c 24 94
	00 00 00	 mov	 r9d, DWORD PTR uSizeRead$80138[rsp]
  005d5	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR szComment$[rsp]
  005dd	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  005e2	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  005e6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  005eb	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  005ef	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  005f4	ff 50 08	 call	 QWORD PTR [rax+8]
  005f7	3b 84 24 94 00
	00 00		 cmp	 eax, DWORD PTR uSizeRead$80138[rsp]
  005fe	74 0b		 je	 SHORT $LN4@unzlocal_G@2

; 722  :                 err=UNZ_ERRNO;

  00600	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1
$LN4@unzlocal_G@2:
$LN5@unzlocal_G@2:

; 723  :         lSeek+=file_info.size_file_comment - uSizeRead;

  0060b	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR uSizeRead$80138[rsp]
  00612	8b 4c 24 58	 mov	 ecx, DWORD PTR file_info$[rsp+40]
  00616	2b c8		 sub	 ecx, eax
  00618	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR lSeek$[rsp]
  0061f	03 c1		 add	 eax, ecx
  00621	89 84 24 80 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax

; 724  :     }
; 725  :     else

  00628	eb 14		 jmp	 SHORT $LN3@unzlocal_G@2
$LN11@unzlocal_G@2:

; 726  :         lSeek+=file_info.size_file_comment;

  0062a	8b 4c 24 58	 mov	 ecx, DWORD PTR file_info$[rsp+40]
  0062e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR lSeek$[rsp]
  00635	03 c1		 add	 eax, ecx
  00637	89 84 24 80 00
	00 00		 mov	 DWORD PTR lSeek$[rsp], eax
$LN3@unzlocal_G@2:

; 727  : 
; 728  :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  0063e	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00646	75 1f		 jne	 SHORT $LN2@unzlocal_G@2
  00648	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pfile_info$[rsp], 0
  00651	74 14		 je	 SHORT $LN2@unzlocal_G@2

; 729  :         *pfile_info=file_info;

  00653	48 8d 74 24 30	 lea	 rsi, QWORD PTR file_info$[rsp]
  00658	48 8b bc 24 c8
	00 00 00	 mov	 rdi, QWORD PTR pfile_info$[rsp]
  00660	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00665	f3 a4		 rep movsb
$LN2@unzlocal_G@2:

; 730  : 
; 731  :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  00667	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0066f	75 1c		 jne	 SHORT $LN1@unzlocal_G@2
  00671	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pfile_info_internal$[rsp], 0
  0067a	74 11		 je	 SHORT $LN1@unzlocal_G@2

; 732  :         *pfile_info_internal=file_info_internal;

  0067c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pfile_info_internal$[rsp]
  00684	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR file_info_internal$[rsp]
  0068b	89 01		 mov	 DWORD PTR [rcx], eax
$LN1@unzlocal_G@2:

; 733  : 
; 734  :     return err;

  0068d	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
$LN47@unzlocal_G@2:

; 735  : }

  00694	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0069b	5f		 pop	 rdi
  0069c	5e		 pop	 rsi
  0069d	c3		 ret	 0
unzlocal_GetCurrentFileInfoInternal ENDP
PUBLIC	$T82579
PUBLIC	unzOpenCurrentFile3
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile3 DD imagerel $LN28
	DD	imagerel $LN28+1301
	DD	imagerel $unwind$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile3 DD 041d01H
	DD	017011dH
	DD	060157016H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzOpenCurrentFile3
_TEXT	SEGMENT
s$ = 32
size_local_extrafield$ = 40
pfile_in_zip_read_info$ = 48
iSizeVar$ = 56
err$ = 60
offset_local_extrafield$ = 64
source$ = 72
i$80333 = 88
$T82579 = 96
tv94 = 160
file$ = 208
method$ = 216
level$ = 224
raw$ = 232
password$ = 240
unzOpenCurrentFile3 PROC				; COMDAT

; 1053 : {

$LN28:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1054 :     int err=UNZ_OK;

  0001d	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1055 :     uInt iSizeVar;
; 1056 :     unz_s* s;
; 1057 :     file_in_zip_read_info_s* pfile_in_zip_read_info;
; 1058 :     uLong offset_local_extrafield;  /* offset of the local extra field */
; 1059 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1060 : #    ifndef NOUNCRYPT
; 1061 :     char source[12];
; 1062 : #    else
; 1063 :     if (password != NULL)
; 1064 :         return UNZ_PARAMERROR;
; 1065 : #    endif
; 1066 : 
; 1067 :     if (file==NULL)

  00025	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  0002e	75 0a		 jne	 SHORT $LN25@unzOpenCur

; 1068 :         return UNZ_PARAMERROR;

  00030	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00035	e9 d1 04 00 00	 jmp	 $LN26@unzOpenCur
$LN25@unzOpenCur:

; 1069 :     s=(unz_s*)file;

  0003a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1070 :     if (!s->current_file_ok)

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004c	83 78 5c 00	 cmp	 DWORD PTR [rax+92], 0
  00050	75 0a		 jne	 SHORT $LN24@unzOpenCur

; 1071 :         return UNZ_PARAMERROR;

  00052	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00057	e9 af 04 00 00	 jmp	 $LN26@unzOpenCur
$LN24@unzOpenCur:

; 1072 : 
; 1073 :     if (s->pfile_in_zip_read != NULL)

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00061	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  00069	74 0d		 je	 SHORT $LN23@unzOpenCur

; 1074 :         unzCloseCurrentFile(file);

  0006b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00073	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN23@unzOpenCur:

; 1075 : 
; 1076 :     if (unzlocal_CheckCurrentFileCoherencyHeader(s,&iSizeVar,
; 1077 :                 &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  00078	4c 8d 4c 24 28	 lea	 r9, QWORD PTR size_local_extrafield$[rsp]
  0007d	4c 8d 44 24 40	 lea	 r8, QWORD PTR offset_local_extrafield$[rsp]
  00082	48 8d 54 24 38	 lea	 rdx, QWORD PTR iSizeVar$[rsp]
  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0008c	e8 00 00 00 00	 call	 unzlocal_CheckCurrentFileCoherencyHeader
  00091	85 c0		 test	 eax, eax
  00093	74 0a		 je	 SHORT $LN22@unzOpenCur

; 1078 :         return UNZ_BADZIPFILE;

  00095	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
  0009a	e9 6c 04 00 00	 jmp	 $LN26@unzOpenCur
$LN22@unzOpenCur:

; 1079 : 
; 1080 :     pfile_in_zip_read_info = (file_in_zip_read_info_s*)
; 1081 :                                         ALLOC(sizeof(file_in_zip_read_info_s));

  0009f	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000aa	48 89 44 24 30	 mov	 QWORD PTR pfile_in_zip_read_info$[rsp], rax

; 1082 :     if (pfile_in_zip_read_info==NULL)

  000af	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  000b5	75 0a		 jne	 SHORT $LN21@unzOpenCur

; 1083 :         return UNZ_INTERNALERROR;

  000b7	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  000bc	e9 4a 04 00 00	 jmp	 $LN26@unzOpenCur
$LN21@unzOpenCur:

; 1084 : 
; 1085 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  000c1	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000cc	48 8b d0	 mov	 rdx, rax
  000cf	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000d4	48 89 10	 mov	 QWORD PTR [rax], rdx

; 1086 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  000d7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000dc	8b 44 24 40	 mov	 eax, DWORD PTR offset_local_extrafield$[rsp]
  000e0	89 41 68	 mov	 DWORD PTR [rcx+104], eax

; 1087 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;

  000e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  000e8	8b 44 24 28	 mov	 eax, DWORD PTR size_local_extrafield$[rsp]
  000ec	89 41 6c	 mov	 DWORD PTR [rcx+108], eax

; 1088 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  000ef	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  000f4	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0

; 1089 :     pfile_in_zip_read_info->raw=raw;

  000fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00100	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00107	89 81 d8 00 00
	00		 mov	 DWORD PTR [rcx+216], eax

; 1090 : 
; 1091 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  0010d	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00112	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00116	75 1d		 jne	 SHORT $LN20@unzOpenCur

; 1092 :     {
; 1093 :         TRYFREE(pfile_in_zip_read_info);

  00118	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  0011e	74 0b		 je	 SHORT $LN19@unzOpenCur
  00120	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN19@unzOpenCur:

; 1094 :         return UNZ_INTERNALERROR;

  0012b	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00130	e9 d6 03 00 00	 jmp	 $LN26@unzOpenCur
$LN20@unzOpenCur:

; 1095 :     }
; 1096 : 
; 1097 :     pfile_in_zip_read_info->stream_initialised=0;

  00135	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0013a	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [rax+100], 0

; 1098 : 
; 1099 :     if (method!=NULL)

  00141	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR method$[rsp], 0
  0014a	74 12		 je	 SHORT $LN18@unzOpenCur

; 1100 :         *method = (int)s->cur_file_info.compression_method;

  0014c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR method$[rsp]
  00154	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00159	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0015c	89 01		 mov	 DWORD PTR [rcx], eax
$LN18@unzOpenCur:

; 1101 : 
; 1102 :     if (level!=NULL)

  0015e	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR level$[rsp], 0
  00167	74 6e		 je	 SHORT $LN17@unzOpenCur

; 1103 :     {
; 1104 :         *level = 6;

  00169	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  00171	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 1105 :         switch (s->cur_file_info.flag & 0x06)

  00177	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0017c	8b 40 74	 mov	 eax, DWORD PTR [rax+116]
  0017f	83 e0 06	 and	 eax, 6
  00182	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv94[rsp], eax
  00189	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR tv94[rsp], 2
  00191	74 36		 je	 SHORT $LN12@unzOpenCur
  00193	83 bc 24 a0 00
	00 00 04	 cmp	 DWORD PTR tv94[rsp], 4
  0019b	74 1c		 je	 SHORT $LN13@unzOpenCur
  0019d	83 bc 24 a0 00
	00 00 06	 cmp	 DWORD PTR tv94[rsp], 6
  001a5	74 02		 je	 SHORT $LN14@unzOpenCur
  001a7	eb 2e		 jmp	 SHORT $LN15@unzOpenCur
$LN14@unzOpenCur:

; 1106 :         {
; 1107 :           case 6 : *level = 1; break;

  001a9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  001b1	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
  001b7	eb 1e		 jmp	 SHORT $LN15@unzOpenCur
$LN13@unzOpenCur:

; 1108 :           case 4 : *level = 2; break;

  001b9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  001c1	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2
  001c7	eb 0e		 jmp	 SHORT $LN15@unzOpenCur
$LN12@unzOpenCur:

; 1109 :           case 2 : *level = 9; break;

  001c9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR level$[rsp]
  001d1	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9
$LN15@unzOpenCur:
$LN17@unzOpenCur:

; 1110 :         }
; 1111 :     }
; 1112 : 
; 1113 :     if ((s->cur_file_info.compression_method!=0) &&
; 1114 :         (s->cur_file_info.compression_method!=Z_DEFLATED))

  001d7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001dc	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  001e0	74 13		 je	 SHORT $LN11@unzOpenCur
  001e2	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001e7	83 78 78 08	 cmp	 DWORD PTR [rax+120], 8
  001eb	74 08		 je	 SHORT $LN11@unzOpenCur

; 1115 :         err=UNZ_BADZIPFILE;

  001ed	c7 44 24 3c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN11@unzOpenCur:

; 1116 : 
; 1117 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  001f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  001fa	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001ff	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00205	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 1118 :     pfile_in_zip_read_info->crc32=0;

  00208	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0020d	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [rax+116], 0

; 1119 :     pfile_in_zip_read_info->compression_method =
; 1120 :             s->cur_file_info.compression_method;

  00214	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00219	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0021e	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00221	89 81 d0 00 00
	00		 mov	 DWORD PTR [rcx+208], eax

; 1121 :     pfile_in_zip_read_info->filestream=s->filestream;

  00227	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0022c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00231	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00235	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 1122 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  0023c	48 8d 7c 24 60	 lea	 rdi, QWORD PTR $T82579[rsp]
  00241	48 8b 74 24 20	 mov	 rsi, QWORD PTR s$[rsp]
  00246	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0024b	f3 a4		 rep movsb
  0024d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR pfile_in_zip_read_info$[rsp]
  00252	48 8d 74 24 60	 lea	 rsi, QWORD PTR $T82579[rsp]
  00257	48 81 c7 88 00
	00 00		 add	 rdi, 136		; 00000088H
  0025e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00263	f3 a4		 rep movsb

; 1123 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  00265	48 8b 54 24 30	 mov	 rdx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0026a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0026f	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  00272	89 82 d4 00 00
	00		 mov	 DWORD PTR [rdx+212], eax

; 1124 : 
; 1125 :     pfile_in_zip_read_info->stream.total_out = 0;

  00278	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0027d	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [rax+36], 0

; 1126 : 
; 1127 :     if ((s->cur_file_info.compression_method==Z_DEFLATED) &&
; 1128 :         (!raw))

  00284	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00289	83 78 78 08	 cmp	 DWORD PTR [rax+120], 8
  0028d	0f 85 a3 00 00
	00		 jne	 $LN10@unzOpenCur
  00293	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR raw$[rsp], 0
  0029b	0f 85 95 00 00
	00		 jne	 $LN10@unzOpenCur

; 1129 :     {
; 1130 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;

  002a1	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002a6	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 1131 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;

  002ae	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002b3	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 1132 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;

  002bb	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002c0	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 1133 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;

  002c8	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002cd	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1134 :       pfile_in_zip_read_info->stream.avail_in = 0;

  002d5	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  002da	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 1135 : 
; 1136 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  002e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  002e6	48 83 c1 08	 add	 rcx, 8
  002ea	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  002f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05GDHACFMB@1?42?43?$AA@
  002f7	ba f1 ff ff ff	 mov	 edx, -15
  002fc	e8 00 00 00 00	 call	 inflateInit2_
  00301	89 44 24 3c	 mov	 DWORD PTR err$[rsp], eax

; 1137 :       if (err == Z_OK)

  00305	83 7c 24 3c 00	 cmp	 DWORD PTR err$[rsp], 0
  0030a	75 0e		 jne	 SHORT $LN9@unzOpenCur

; 1138 :         pfile_in_zip_read_info->stream_initialised=1;

  0030c	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00311	c7 40 64 01 00
	00 00		 mov	 DWORD PTR [rax+100], 1

; 1139 :       else

  00318	eb 1c		 jmp	 SHORT $LN8@unzOpenCur
$LN9@unzOpenCur:

; 1140 :       {
; 1141 :         TRYFREE(pfile_in_zip_read_info);

  0031a	48 83 7c 24 30
	00		 cmp	 QWORD PTR pfile_in_zip_read_info$[rsp], 0
  00320	74 0b		 je	 SHORT $LN7@unzOpenCur
  00322	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@unzOpenCur:

; 1142 :         return err;

  0032d	8b 44 24 3c	 mov	 eax, DWORD PTR err$[rsp]
  00331	e9 d5 01 00 00	 jmp	 $LN26@unzOpenCur
$LN8@unzOpenCur:
$LN10@unzOpenCur:

; 1143 :       }
; 1144 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1145 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1146 :          * after the compressed stream in order to complete decompression and
; 1147 :          * return Z_STREAM_END.
; 1148 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1149 :          * size of both compressed and uncompressed data
; 1150 :          */
; 1151 :     }
; 1152 :     pfile_in_zip_read_info->rest_read_compressed =
; 1153 :             s->cur_file_info.compressed_size ;

  00336	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0033b	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00340	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [rax+132]
  00346	89 41 7c	 mov	 DWORD PTR [rcx+124], eax

; 1154 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1155 :             s->cur_file_info.uncompressed_size ;

  00349	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfile_in_zip_read_info$[rsp]
  0034e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00353	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00359	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax

; 1156 : 
; 1157 : 
; 1158 :     pfile_in_zip_read_info->pos_in_zipfile =
; 1159 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1160 :               iSizeVar;

  0035f	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00364	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [rax+188]
  0036a	8b 44 24 38	 mov	 eax, DWORD PTR iSizeVar$[rsp]
  0036e	8d 4c 01 1e	 lea	 ecx, DWORD PTR [rcx+rax+30]
  00372	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00377	89 48 60	 mov	 DWORD PTR [rax+96], ecx

; 1161 : 
; 1162 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  0037a	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  0037f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 1163 : 
; 1164 :     s->pfile_in_zip_read = pfile_in_zip_read_info;

  00386	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0038b	48 8b 44 24 30	 mov	 rax, QWORD PTR pfile_in_zip_read_info$[rsp]
  00390	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax

; 1165 : 
; 1166 : #    ifndef NOUNCRYPT
; 1167 :     if (password != NULL)

  00397	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  003a0	0f 84 63 01 00
	00		 je	 $LN6@unzOpenCur

; 1168 :     {
; 1169 :         int i;
; 1170 :         s->pcrc_32_tab = get_crc_table();

  003a6	e8 00 00 00 00	 call	 get_crc_table
  003ab	48 8b d0	 mov	 rdx, rax
  003ae	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  003b3	48 89 90 d8 00
	00 00		 mov	 QWORD PTR [rax+216], rdx

; 1171 :         init_keys(password,s->keys,s->pcrc_32_tab);

  003ba	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  003bf	48 81 c2 cc 00
	00 00		 add	 rdx, 204		; 000000ccH
  003c6	4c 8b 44 24 20	 mov	 r8, QWORD PTR s$[rsp]
  003cb	4d 8b 80 d8 00
	00 00		 mov	 r8, QWORD PTR [r8+216]
  003d2	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR password$[rsp]
  003da	e8 00 00 00 00	 call	 init_keys

; 1172 :         if (ZSEEK(s->z_filefunc, s->filestream,
; 1173 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1174 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1175 :                   SEEK_SET)!=0)

  003df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  003e4	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  003eb	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  003f0	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  003f7	44 8b 41 60	 mov	 r8d, DWORD PTR [rcx+96]
  003fb	44 03 80 d4 00
	00 00		 add	 r8d, DWORD PTR [rax+212]
  00402	45 33 c9	 xor	 r9d, r9d
  00405	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0040a	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  0040e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00413	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00417	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0041c	ff 50 20	 call	 QWORD PTR [rax+32]
  0041f	85 c0		 test	 eax, eax
  00421	74 0a		 je	 SHORT $LN5@unzOpenCur

; 1176 :             return UNZ_INTERNALERROR;

  00423	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00428	e9 de 00 00 00	 jmp	 $LN26@unzOpenCur
$LN5@unzOpenCur:

; 1177 :         if(ZREAD(s->z_filefunc, s->filestream,source, 12)<12)

  0042d	41 b9 0c 00 00
	00		 mov	 r9d, 12
  00433	4c 8d 44 24 48	 lea	 r8, QWORD PTR source$[rsp]
  00438	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0043d	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00441	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00446	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0044a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0044f	ff 50 08	 call	 QWORD PTR [rax+8]
  00452	83 f8 0c	 cmp	 eax, 12
  00455	73 0a		 jae	 SHORT $LN4@unzOpenCur

; 1178 :             return UNZ_INTERNALERROR;

  00457	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  0045c	e9 aa 00 00 00	 jmp	 $LN26@unzOpenCur
$LN4@unzOpenCur:

; 1179 : 
; 1180 :         for (i = 0; i<12; i++)

  00461	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR i$80333[rsp], 0
  00469	eb 0b		 jmp	 SHORT $LN3@unzOpenCur
$LN2@unzOpenCur:
  0046b	8b 44 24 58	 mov	 eax, DWORD PTR i$80333[rsp]
  0046f	83 c0 01	 add	 eax, 1
  00472	89 44 24 58	 mov	 DWORD PTR i$80333[rsp], eax
$LN3@unzOpenCur:
  00476	83 7c 24 58 0c	 cmp	 DWORD PTR i$80333[rsp], 12
  0047b	7d 5c		 jge	 SHORT $LN1@unzOpenCur

; 1181 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);

  0047d	48 63 7c 24 58	 movsxd	 rdi, DWORD PTR i$80333[rsp]
  00482	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00487	48 81 c1 cc 00
	00 00		 add	 rcx, 204		; 000000ccH
  0048e	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00493	48 8b 92 d8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+216]
  0049a	e8 00 00 00 00	 call	 decrypt_byte
  0049f	0f be 4c 3c 48	 movsx	 ecx, BYTE PTR source$[rsp+rdi]
  004a4	33 c8		 xor	 ecx, eax
  004a6	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$80333[rsp]
  004ab	88 4c 04 48	 mov	 BYTE PTR source$[rsp+rax], cl
  004af	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$80333[rsp]
  004b4	44 0f be 44 04
	48		 movsx	 r8d, BYTE PTR source$[rsp+rax]
  004ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  004bf	48 81 c1 cc 00
	00 00		 add	 rcx, 204		; 000000ccH
  004c6	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  004cb	48 8b 92 d8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+216]
  004d2	e8 00 00 00 00	 call	 update_keys
  004d7	eb 92		 jmp	 SHORT $LN2@unzOpenCur
$LN1@unzOpenCur:

; 1182 : 
; 1183 :         s->pfile_in_zip_read->pos_in_zipfile+=12;

  004d9	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  004de	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  004e5	8b 48 60	 mov	 ecx, DWORD PTR [rax+96]
  004e8	83 c1 0c	 add	 ecx, 12
  004eb	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  004f0	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  004f7	89 48 60	 mov	 DWORD PTR [rax+96], ecx

; 1184 :         s->encrypted=1;

  004fa	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  004ff	c7 80 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+200], 1
$LN6@unzOpenCur:

; 1185 :     }
; 1186 : #    endif
; 1187 : 
; 1188 : 
; 1189 :     return UNZ_OK;

  00509	33 c0		 xor	 eax, eax
$LN26@unzOpenCur:

; 1190 : }

  0050b	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00512	5f		 pop	 rdi
  00513	5e		 pop	 rsi
  00514	c3		 ret	 0
unzOpenCurrentFile3 ENDP
_TEXT	ENDS
PUBLIC	unzGoToFilePos
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos DD imagerel $LN7
	DD	imagerel $LN7+207
	DD	imagerel $unwind$unzGoToFilePos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGoToFilePos
_TEXT	SEGMENT
s$ = 80
err$ = 88
tv83 = 92
file$ = 112
file_pos$ = 120
unzGoToFilePos PROC					; COMDAT

; 924  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 925  :     unz_s* s;
; 926  :     int err;
; 927  : 
; 928  :     if (file==NULL || file_pos==NULL)

  0000e	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  00014	74 08		 je	 SHORT $LN1@unzGoToFil
  00016	48 83 7c 24 78
	00		 cmp	 QWORD PTR file_pos$[rsp], 0
  0001c	75 0a		 jne	 SHORT $LN2@unzGoToFil
$LN1@unzGoToFil:

; 929  :         return UNZ_PARAMERROR;

  0001e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00023	e9 a2 00 00 00	 jmp	 $LN3@unzGoToFil
$LN2@unzGoToFil:

; 930  :     s=(unz_s*)file;

  00028	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  0002d	48 89 44 24 50	 mov	 QWORD PTR s$[rsp], rax

; 931  : 
; 932  :     /* jump to the right spot */
; 933  :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  00032	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00037	48 8b 44 24 78	 mov	 rax, QWORD PTR file_pos$[rsp]
  0003c	8b 00		 mov	 eax, DWORD PTR [rax]
  0003e	89 41 58	 mov	 DWORD PTR [rcx+88], eax

; 934  :     s->num_file           = file_pos->num_of_file;

  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00046	48 8b 44 24 78	 mov	 rax, QWORD PTR file_pos$[rsp]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0004e	89 41 54	 mov	 DWORD PTR [rcx+84], eax

; 935  : 
; 936  :     /* set the current file */
; 937  :     err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 938  :                                                &s->cur_file_info_internal,
; 939  :                                                NULL,0,NULL,0,NULL,0);

  00051	4c 8b 44 24 50	 mov	 r8, QWORD PTR s$[rsp]
  00056	49 81 c0 bc 00
	00 00		 add	 r8, 188			; 000000bcH
  0005d	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00062	48 83 c2 6c	 add	 rdx, 108		; 0000006cH
  00066	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  0006e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  00077	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0007f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00088	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00090	45 33 c9	 xor	 r9d, r9d
  00093	48 8b 4c 24 70	 mov	 rcx, QWORD PTR file$[rsp]
  00098	e8 00 00 00 00	 call	 unzlocal_GetCurrentFileInfoInternal
  0009d	89 44 24 58	 mov	 DWORD PTR err$[rsp], eax

; 940  :     /* return results */
; 941  :     s->current_file_ok = (err == UNZ_OK);

  000a1	83 7c 24 58 00	 cmp	 DWORD PTR err$[rsp], 0
  000a6	75 0a		 jne	 SHORT $LN5@unzGoToFil
  000a8	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  000b0	eb 08		 jmp	 SHORT $LN6@unzGoToFil
$LN5@unzGoToFil:
  000b2	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN6@unzGoToFil:
  000ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000bf	8b 44 24 5c	 mov	 eax, DWORD PTR tv83[rsp]
  000c3	89 41 5c	 mov	 DWORD PTR [rcx+92], eax

; 942  :     return err;

  000c6	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
$LN3@unzGoToFil:

; 943  : }

  000ca	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ce	c3		 ret	 0
unzGoToFilePos ENDP
_TEXT	ENDS
PUBLIC	unzGoToNextFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToNextFile DD imagerel $LN9
	DD	imagerel $LN9+301
	DD	imagerel $unwind$unzGoToNextFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToNextFile DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGoToNextFile
_TEXT	SEGMENT
s$ = 80
err$ = 88
tv132 = 92
file$ = 112
unzGoToNextFile PROC					; COMDAT

; 792  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 793  :     unz_s* s;
; 794  :     int err;
; 795  : 
; 796  :     if (file==NULL)

  00009	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  0000f	75 0a		 jne	 SHORT $LN4@unzGoToNex

; 797  :         return UNZ_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00016	e9 0d 01 00 00	 jmp	 $LN5@unzGoToNex
$LN4@unzGoToNex:

; 798  :     s=(unz_s*)file;

  0001b	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  00020	48 89 44 24 50	 mov	 QWORD PTR s$[rsp], rax

; 799  :     if (!s->current_file_ok)

  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0002a	83 78 5c 00	 cmp	 DWORD PTR [rax+92], 0
  0002e	75 0a		 jne	 SHORT $LN3@unzGoToNex

; 800  :         return UNZ_END_OF_LIST_OF_FILE;

  00030	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  00035	e9 ee 00 00 00	 jmp	 $LN5@unzGoToNex
$LN3@unzGoToNex:

; 801  :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0003f	81 78 48 ff ff
	00 00		 cmp	 DWORD PTR [rax+72], 65535 ; 0000ffffH
  00046	74 1f		 je	 SHORT $LN2@unzGoToNex

; 802  :       if (s->num_file+1==s->gi.number_entry)

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0004d	8b 48 54	 mov	 ecx, DWORD PTR [rax+84]
  00050	83 c1 01	 add	 ecx, 1
  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00058	3b 48 48	 cmp	 ecx, DWORD PTR [rax+72]
  0005b	75 0a		 jne	 SHORT $LN1@unzGoToNex

; 803  :         return UNZ_END_OF_LIST_OF_FILE;

  0005d	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  00062	e9 c1 00 00 00	 jmp	 $LN5@unzGoToNex
$LN1@unzGoToNex:
$LN2@unzGoToNex:

; 804  : 
; 805  :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +
; 806  :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0006c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [rax+140]
  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00077	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0007d	8d 4c 01 2e	 lea	 ecx, DWORD PTR [rcx+rax+46]
  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00086	03 88 94 00 00
	00		 add	 ecx, DWORD PTR [rax+148]
  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00091	03 48 58	 add	 ecx, DWORD PTR [rax+88]
  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00099	89 48 58	 mov	 DWORD PTR [rax+88], ecx

; 807  :     s->num_file++;

  0009c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a1	8b 48 54	 mov	 ecx, DWORD PTR [rax+84]
  000a4	83 c1 01	 add	 ecx, 1
  000a7	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ac	89 48 54	 mov	 DWORD PTR [rax+84], ecx

; 808  :     err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 809  :                                                &s->cur_file_info_internal,
; 810  :                                                NULL,0,NULL,0,NULL,0);

  000af	4c 8b 44 24 50	 mov	 r8, QWORD PTR s$[rsp]
  000b4	49 81 c0 bc 00
	00 00		 add	 r8, 188			; 000000bcH
  000bb	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  000c0	48 83 c2 6c	 add	 rdx, 108		; 0000006cH
  000c4	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  000cc	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  000d5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000dd	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  000e6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000ee	45 33 c9	 xor	 r9d, r9d
  000f1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR file$[rsp]
  000f6	e8 00 00 00 00	 call	 unzlocal_GetCurrentFileInfoInternal
  000fb	89 44 24 58	 mov	 DWORD PTR err$[rsp], eax

; 811  :     s->current_file_ok = (err == UNZ_OK);

  000ff	83 7c 24 58 00	 cmp	 DWORD PTR err$[rsp], 0
  00104	75 0a		 jne	 SHORT $LN7@unzGoToNex
  00106	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  0010e	eb 08		 jmp	 SHORT $LN8@unzGoToNex
$LN7@unzGoToNex:
  00110	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN8@unzGoToNex:
  00118	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0011d	8b 44 24 5c	 mov	 eax, DWORD PTR tv132[rsp]
  00121	89 41 5c	 mov	 DWORD PTR [rcx+92], eax

; 812  :     return err;

  00124	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
$LN5@unzGoToNex:

; 813  : }

  00128	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0012c	c3		 ret	 0
unzGoToNextFile ENDP
_TEXT	ENDS
PUBLIC	unzGoToFirstFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFirstFile DD imagerel $LN6
	DD	imagerel $LN6+199
	DD	imagerel $unwind$unzGoToFirstFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFirstFile DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGoToFirstFile
_TEXT	SEGMENT
s$ = 80
err$ = 88
tv82 = 92
file$ = 112
unzGoToFirstFile PROC					; COMDAT

; 770  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 771  :     int err=UNZ_OK;

  00009	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 772  :     unz_s* s;
; 773  :     if (file==NULL)

  00011	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  00017	75 0a		 jne	 SHORT $LN1@unzGoToFir

; 774  :         return UNZ_PARAMERROR;

  00019	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0001e	e9 9f 00 00 00	 jmp	 $LN2@unzGoToFir
$LN1@unzGoToFir:

; 775  :     s=(unz_s*)file;

  00023	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  00028	48 89 44 24 50	 mov	 QWORD PTR s$[rsp], rax

; 776  :     s->pos_in_central_dir=s->offset_central_dir;

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00037	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  0003a	89 41 58	 mov	 DWORD PTR [rcx+88], eax

; 777  :     s->num_file=0;

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00042	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0

; 778  :     err=unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 779  :                                              &s->cur_file_info_internal,
; 780  :                                              NULL,0,NULL,0,NULL,0);

  00049	4c 8b 44 24 50	 mov	 r8, QWORD PTR s$[rsp]
  0004e	49 81 c0 bc 00
	00 00		 add	 r8, 188			; 000000bcH
  00055	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0005a	48 83 c2 6c	 add	 rdx, 108		; 0000006cH
  0005e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  00066	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  0006f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00077	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00080	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00088	45 33 c9	 xor	 r9d, r9d
  0008b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR file$[rsp]
  00090	e8 00 00 00 00	 call	 unzlocal_GetCurrentFileInfoInternal
  00095	89 44 24 58	 mov	 DWORD PTR err$[rsp], eax

; 781  :     s->current_file_ok = (err == UNZ_OK);

  00099	83 7c 24 58 00	 cmp	 DWORD PTR err$[rsp], 0
  0009e	75 0a		 jne	 SHORT $LN4@unzGoToFir
  000a0	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  000a8	eb 08		 jmp	 SHORT $LN5@unzGoToFir
$LN4@unzGoToFir:
  000aa	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN5@unzGoToFir:
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000b7	8b 44 24 5c	 mov	 eax, DWORD PTR tv82[rsp]
  000bb	89 41 5c	 mov	 DWORD PTR [rcx+92], eax

; 782  :     return err;

  000be	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
$LN2@unzGoToFir:

; 783  : }

  000c2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000c6	c3		 ret	 0
unzGoToFirstFile ENDP
_TEXT	ENDS
PUBLIC	unzGetCurrentFileInfo
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$unzGetCurrentFileInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzGetCurrentFileInfo
_TEXT	SEGMENT
file$ = 96
pfile_info$ = 104
szFileName$ = 112
fileNameBufferSize$ = 120
extraField$ = 128
extraFieldBufferSize$ = 136
szComment$ = 144
commentBufferSize$ = 152
unzGetCurrentFileInfo PROC				; COMDAT

; 757  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 758  :     return unzlocal_GetCurrentFileInfoInternal(file,pfile_info,NULL,
; 759  :                                                 szFileName,fileNameBufferSize,
; 760  :                                                 extraField,extraFieldBufferSize,
; 761  :                                                 szComment,commentBufferSize);

  00018	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  0001f	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00023	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  0002b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00030	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00037	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0003b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  00043	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00048	8b 44 24 78	 mov	 eax, DWORD PTR fileNameBufferSize$[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00050	4c 8b 4c 24 70	 mov	 r9, QWORD PTR szFileName$[rsp]
  00055	45 33 c0	 xor	 r8d, r8d
  00058	48 8b 54 24 68	 mov	 rdx, QWORD PTR pfile_info$[rsp]
  0005d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR file$[rsp]
  00062	e8 00 00 00 00	 call	 unzlocal_GetCurrentFileInfoInternal

; 762  : }

  00067	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0006b	c3		 ret	 0
unzGetCurrentFileInfo ENDP
_TEXT	ENDS
PUBLIC	$T82616
PUBLIC	unzOpen2
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2 DD imagerel $LN21
	DD	imagerel $LN21+766
	DD	imagerel $unwind$unzOpen2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2 DD 041301H
	DD	02f0113H
	DD	0600b700cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzOpen2
_TEXT	SEGMENT
number_disk$ = 32
s$ = 40
uL$ = 48
err$ = 52
number_entry_CD$ = 56
number_disk_with_CD$ = 60
us$ = 64
central_pos$ = 288
$T82616 = 296
path$ = 400
pzlib_filefunc_def$ = 408
unzOpen2 PROC						; COMDAT

; 400  : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H

; 401  :     unz_s us;
; 402  :     unz_s *s;
; 403  :     uLong central_pos,uL;
; 404  : 
; 405  :     uLong number_disk;          /* number of the current dist, used for
; 406  :                                    spaning ZIP, unsupported, always 0*/
; 407  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 408  :                                    for spaning ZIP, unsupported, always 0*/
; 409  :     uLong number_entry_CD;      /* total number of entries in
; 410  :                                    the central dir
; 411  :                                    (same than number_entry on nospan) */
; 412  : 
; 413  :     int err=UNZ_OK;

  00013	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 414  : 
; 415  :     if (unz_copyright[0]!=' ')

  0001b	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR unz_copyright
  00022	83 f8 20	 cmp	 eax, 32			; 00000020H
  00025	74 07		 je	 SHORT $LN18@unzOpen2

; 416  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 c6 02 00 00	 jmp	 $LN19@unzOpen2
$LN18@unzOpen2:

; 417  : 
; 418  :     if (pzlib_filefunc_def==NULL)

  0002e	48 83 bc 24 98
	01 00 00 00	 cmp	 QWORD PTR pzlib_filefunc_def$[rsp], 0
  00037	75 0c		 jne	 SHORT $LN17@unzOpen2

; 419  :         fill_fopen_filefunc(&us.z_filefunc);

  00039	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  0003e	e8 00 00 00 00	 call	 fill_fopen_filefunc

; 420  :     else

  00043	eb 2b		 jmp	 SHORT $LN16@unzOpen2
$LN17@unzOpen2:

; 421  :         us.z_filefunc = *pzlib_filefunc_def;

  00045	48 8d bc 24 28
	01 00 00	 lea	 rdi, QWORD PTR $T82616[rsp]
  0004d	48 8b b4 24 98
	01 00 00	 mov	 rsi, QWORD PTR pzlib_filefunc_def$[rsp]
  00055	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0005a	f3 a4		 rep movsb
  0005c	48 8d 7c 24 40	 lea	 rdi, QWORD PTR us$[rsp]
  00061	48 8d b4 24 28
	01 00 00	 lea	 rsi, QWORD PTR $T82616[rsp]
  00069	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0006e	f3 a4		 rep movsb
$LN16@unzOpen2:

; 422  : 
; 423  :     us.filestream= (*(us.z_filefunc.zopen_file))(us.z_filefunc.opaque,
; 424  :                                                  path,
; 425  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 426  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);

  00070	41 b8 05 00 00
	00		 mov	 r8d, 5
  00076	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR path$[rsp]
  0007e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR us$[rsp+56]
  00083	ff 54 24 40	 call	 QWORD PTR us$[rsp]
  00087	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR us$[rsp+64], rax

; 427  :     if (us.filestream==NULL)

  0008f	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR us$[rsp+64], 0
  00098	75 07		 jne	 SHORT $LN15@unzOpen2

; 428  :         return NULL;

  0009a	33 c0		 xor	 eax, eax
  0009c	e9 53 02 00 00	 jmp	 $LN19@unzOpen2
$LN15@unzOpen2:

; 429  : 
; 430  :     central_pos = unzlocal_SearchCentralDir(&us.z_filefunc,us.filestream);

  000a1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  000a9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  000ae	e8 00 00 00 00	 call	 unzlocal_SearchCentralDir
  000b3	89 84 24 20 01
	00 00		 mov	 DWORD PTR central_pos$[rsp], eax

; 431  :     if (central_pos==0)

  000ba	83 bc 24 20 01
	00 00 00	 cmp	 DWORD PTR central_pos$[rsp], 0
  000c2	75 08		 jne	 SHORT $LN14@unzOpen2

; 432  :         err=UNZ_ERRNO;

  000c4	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN14@unzOpen2:

; 433  : 
; 434  :     if (ZSEEK(us.z_filefunc, us.filestream,
; 435  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000cc	45 33 c9	 xor	 r9d, r9d
  000cf	44 8b 84 24 20
	01 00 00	 mov	 r8d, DWORD PTR central_pos$[rsp]
  000d7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  000df	48 8b 4c 24 78	 mov	 rcx, QWORD PTR us$[rsp+56]
  000e4	ff 54 24 60	 call	 QWORD PTR us$[rsp+32]
  000e8	85 c0		 test	 eax, eax
  000ea	74 08		 je	 SHORT $LN13@unzOpen2

; 436  :         err=UNZ_ERRNO;

  000ec	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN13@unzOpen2:

; 437  : 
; 438  :     /* the signature, already checked */
; 439  :     if (unzlocal_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  000f4	4c 8d 44 24 30	 lea	 r8, QWORD PTR uL$[rsp]
  000f9	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  00101	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  00106	e8 00 00 00 00	 call	 unzlocal_getLong
  0010b	85 c0		 test	 eax, eax
  0010d	74 08		 je	 SHORT $LN12@unzOpen2

; 440  :         err=UNZ_ERRNO;

  0010f	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN12@unzOpen2:

; 441  : 
; 442  :     /* number of this disk */
; 443  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  00117	4c 8d 44 24 20	 lea	 r8, QWORD PTR number_disk$[rsp]
  0011c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  00124	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  00129	e8 00 00 00 00	 call	 unzlocal_getShort
  0012e	85 c0		 test	 eax, eax
  00130	74 08		 je	 SHORT $LN11@unzOpen2

; 444  :         err=UNZ_ERRNO;

  00132	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN11@unzOpen2:

; 445  : 
; 446  :     /* number of the disk with the start of the central directory */
; 447  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  0013a	4c 8d 44 24 3c	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  0013f	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  00147	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  0014c	e8 00 00 00 00	 call	 unzlocal_getShort
  00151	85 c0		 test	 eax, eax
  00153	74 08		 je	 SHORT $LN10@unzOpen2

; 448  :         err=UNZ_ERRNO;

  00155	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN10@unzOpen2:

; 449  : 
; 450  :     /* total number of entries in the central dir on this disk */
; 451  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  0015d	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+72]
  00165	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  0016d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  00172	e8 00 00 00 00	 call	 unzlocal_getShort
  00177	85 c0		 test	 eax, eax
  00179	74 08		 je	 SHORT $LN9@unzOpen2

; 452  :         err=UNZ_ERRNO;

  0017b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN9@unzOpen2:

; 453  : 
; 454  :     /* total number of entries in the central dir */
; 455  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  00183	4c 8d 44 24 38	 lea	 r8, QWORD PTR number_entry_CD$[rsp]
  00188	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  00190	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  00195	e8 00 00 00 00	 call	 unzlocal_getShort
  0019a	85 c0		 test	 eax, eax
  0019c	74 08		 je	 SHORT $LN8@unzOpen2

; 456  :         err=UNZ_ERRNO;

  0019e	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN8@unzOpen2:

; 457  : 
; 458  :     if ((number_entry_CD!=us.gi.number_entry) ||
; 459  :         (number_disk_with_CD!=0) ||
; 460  :         (number_disk!=0))

  001a6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR us$[rsp+72]
  001ad	39 44 24 38	 cmp	 DWORD PTR number_entry_CD$[rsp], eax
  001b1	75 0e		 jne	 SHORT $LN6@unzOpen2
  001b3	83 7c 24 3c 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  001b8	75 07		 jne	 SHORT $LN6@unzOpen2
  001ba	83 7c 24 20 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  001bf	74 08		 je	 SHORT $LN7@unzOpen2
$LN6@unzOpen2:

; 461  :         err=UNZ_BADZIPFILE;

  001c1	c7 44 24 34 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN7@unzOpen2:

; 462  : 
; 463  :     /* size of the central directory */
; 464  :     if (unzlocal_getLong(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  001c9	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+100]
  001d1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  001d9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  001de	e8 00 00 00 00	 call	 unzlocal_getLong
  001e3	85 c0		 test	 eax, eax
  001e5	74 08		 je	 SHORT $LN5@unzOpen2

; 465  :         err=UNZ_ERRNO;

  001e7	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN5@unzOpen2:

; 466  : 
; 467  :     /* offset of start of central directory with respect to the
; 468  :           starting disk number */
; 469  :     if (unzlocal_getLong(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  001ef	4c 8d 84 24 a8
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+104]
  001f7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  001ff	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  00204	e8 00 00 00 00	 call	 unzlocal_getLong
  00209	85 c0		 test	 eax, eax
  0020b	74 08		 je	 SHORT $LN4@unzOpen2

; 470  :         err=UNZ_ERRNO;

  0020d	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN4@unzOpen2:

; 471  : 
; 472  :     /* zipfile comment length */
; 473  :     if (unzlocal_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  00215	4c 8d 84 24 8c
	00 00 00	 lea	 r8, QWORD PTR us$[rsp+76]
  0021d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  00225	48 8d 4c 24 40	 lea	 rcx, QWORD PTR us$[rsp]
  0022a	e8 00 00 00 00	 call	 unzlocal_getShort
  0022f	85 c0		 test	 eax, eax
  00231	74 08		 je	 SHORT $LN3@unzOpen2

; 474  :         err=UNZ_ERRNO;

  00233	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN3@unzOpen2:

; 475  : 
; 476  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&
; 477  :         (err==UNZ_OK))

  0023b	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR us$[rsp+100]
  00242	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR us$[rsp+104]
  00249	03 c1		 add	 eax, ecx
  0024b	39 84 24 20 01
	00 00		 cmp	 DWORD PTR central_pos$[rsp], eax
  00252	73 0f		 jae	 SHORT $LN2@unzOpen2
  00254	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  00259	75 08		 jne	 SHORT $LN2@unzOpen2

; 478  :         err=UNZ_BADZIPFILE;

  0025b	c7 44 24 34 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN2@unzOpen2:

; 479  : 
; 480  :     if (err!=UNZ_OK)

  00263	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  00268	74 15		 je	 SHORT $LN1@unzOpen2

; 481  :     {
; 482  :         ZCLOSE(us.z_filefunc, us.filestream);

  0026a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR us$[rsp+64]
  00272	48 8b 4c 24 78	 mov	 rcx, QWORD PTR us$[rsp+56]
  00277	ff 54 24 68	 call	 QWORD PTR us$[rsp+40]

; 483  :         return NULL;

  0027b	33 c0		 xor	 eax, eax
  0027d	eb 75		 jmp	 SHORT $LN19@unzOpen2
$LN1@unzOpen2:

; 484  :     }
; 485  : 
; 486  :     us.byte_before_the_zipfile = central_pos -
; 487  :                             (us.offset_central_dir+us.size_central_dir);

  0027f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR us$[rsp+100]
  00286	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR us$[rsp+104]
  0028d	03 c8		 add	 ecx, eax
  0028f	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR central_pos$[rsp]
  00296	2b c1		 sub	 eax, ecx
  00298	89 84 24 90 00
	00 00		 mov	 DWORD PTR us$[rsp+80], eax

; 488  :     us.central_pos = central_pos;

  0029f	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR central_pos$[rsp]
  002a6	89 84 24 a0 00
	00 00		 mov	 DWORD PTR us$[rsp+96], eax

; 489  :     us.pfile_in_zip_read = NULL;

  002ad	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR us$[rsp+192], 0

; 490  :     us.encrypted = 0;

  002b9	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR us$[rsp+200], 0

; 491  : 
; 492  : 
; 493  :     s=(unz_s*)ALLOC(sizeof(unz_s));

  002c4	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  002c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002cf	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 494  :     *s=us;

  002d4	48 8d 74 24 40	 lea	 rsi, QWORD PTR us$[rsp]
  002d9	48 8b 7c 24 28	 mov	 rdi, QWORD PTR s$[rsp]
  002de	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  002e3	f3 a4		 rep movsb

; 495  :     unzGoToFirstFile((unzFile)s);

  002e5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  002ea	e8 00 00 00 00	 call	 unzGoToFirstFile

; 496  :     return (unzFile)s;

  002ef	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
$LN19@unzOpen2:

; 497  : }

  002f4	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  002fb	5f		 pop	 rdi
  002fc	5e		 pop	 rsi
  002fd	c3		 ret	 0
unzOpen2 ENDP
PUBLIC	unzOpenCurrentFile2
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile2 DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$unzOpenCurrentFile2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile2 DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzOpenCurrentFile2
_TEXT	SEGMENT
file$ = 64
method$ = 72
level$ = 80
raw$ = 88
unzOpenCurrentFile2 PROC				; COMDAT

; 1210 : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1211 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00018	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00021	44 8b 4c 24 58	 mov	 r9d, DWORD PTR raw$[rsp]
  00026	4c 8b 44 24 50	 mov	 r8, QWORD PTR level$[rsp]
  0002b	48 8b 54 24 48	 mov	 rdx, QWORD PTR method$[rsp]
  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00035	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1212 : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
unzOpenCurrentFile2 ENDP
_TEXT	ENDS
PUBLIC	unzOpenCurrentFilePassword
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFilePassword DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$unzOpenCurrentFilePassword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFilePassword DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzOpenCurrentFilePassword
_TEXT	SEGMENT
file$ = 64
password$ = 72
unzOpenCurrentFilePassword PROC				; COMDAT

; 1201 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1202 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR password$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00018	45 33 c9	 xor	 r9d, r9d
  0001b	45 33 c0	 xor	 r8d, r8d
  0001e	33 d2		 xor	 edx, edx
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  00025	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1203 : }

  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
unzOpenCurrentFilePassword ENDP
_TEXT	ENDS
PUBLIC	unzOpenCurrentFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$unzOpenCurrentFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzOpenCurrentFile
_TEXT	SEGMENT
file$ = 64
unzOpenCurrentFile PROC					; COMDAT

; 1194 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1195 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00012	45 33 c9	 xor	 r9d, r9d
  00015	45 33 c0	 xor	 r8d, r8d
  00018	33 d2		 xor	 edx, edx
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  0001f	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1196 : }

  00024	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00028	c3		 ret	 0
unzOpenCurrentFile ENDP
_TEXT	ENDS
PUBLIC	$T82796
PUBLIC	unzLocateFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzLocateFile DD imagerel $LN10
	DD	imagerel $LN10+494
	DD	imagerel $unwind$unzLocateFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzLocateFile DD 041801H
	DD	0430118H
	DD	060107011H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzLocateFile
_TEXT	SEGMENT
cur_file_infoSaved$ = 64
pos_in_central_dirSaved$ = 144
s$ = 152
cur_file_info_internalSaved$ = 160
num_fileSaved$ = 164
err$ = 168
szCurrentFileName$80206 = 176
$T82796 = 448
file$ = 560
szFileName$ = 568
iCaseSensitivity$ = 576
unzLocateFile PROC					; COMDAT

; 828  : {

$LN10:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H

; 829  :     unz_s* s;
; 830  :     int err;
; 831  : 
; 832  :     /* We remember the 'current' position in the file so that we can jump
; 833  :      * back there if we fail.
; 834  :      */
; 835  :     unz_file_info cur_file_infoSaved;
; 836  :     unz_file_info_internal cur_file_info_internalSaved;
; 837  :     uLong num_fileSaved;
; 838  :     uLong pos_in_central_dirSaved;
; 839  : 
; 840  : 
; 841  :     if (file==NULL)

  00018	48 83 bc 24 30
	02 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00021	75 0a		 jne	 SHORT $LN7@unzLocateF

; 842  :         return UNZ_PARAMERROR;

  00023	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00028	e9 b7 01 00 00	 jmp	 $LN8@unzLocateF
$LN7@unzLocateF:

; 843  : 
; 844  :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  0002d	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR szFileName$[rsp]
  00035	e8 00 00 00 00	 call	 strlen
  0003a	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  00040	72 0a		 jb	 SHORT $LN6@unzLocateF

; 845  :         return UNZ_PARAMERROR;

  00042	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00047	e9 98 01 00 00	 jmp	 $LN8@unzLocateF
$LN6@unzLocateF:

; 846  : 
; 847  :     s=(unz_s*)file;

  0004c	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR file$[rsp]
  00054	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR s$[rsp], rax

; 848  :     if (!s->current_file_ok)

  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00064	83 78 5c 00	 cmp	 DWORD PTR [rax+92], 0
  00068	75 0a		 jne	 SHORT $LN5@unzLocateF

; 849  :         return UNZ_END_OF_LIST_OF_FILE;

  0006a	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  0006f	e9 70 01 00 00	 jmp	 $LN8@unzLocateF
$LN5@unzLocateF:

; 850  : 
; 851  :     /* Save the current state */
; 852  :     num_fileSaved = s->num_file;

  00074	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0007c	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  0007f	89 84 24 a4 00
	00 00		 mov	 DWORD PTR num_fileSaved$[rsp], eax

; 853  :     pos_in_central_dirSaved = s->pos_in_central_dir;

  00086	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0008e	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  00091	89 84 24 90 00
	00 00		 mov	 DWORD PTR pos_in_central_dirSaved$[rsp], eax

; 854  :     cur_file_infoSaved = s->cur_file_info;

  00098	48 8d bc 24 c0
	01 00 00	 lea	 rdi, QWORD PTR $T82796[rsp]
  000a0	48 8b b4 24 98
	00 00 00	 mov	 rsi, QWORD PTR s$[rsp]
  000a8	48 83 c6 6c	 add	 rsi, 108		; 0000006cH
  000ac	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  000b1	f3 a4		 rep movsb
  000b3	48 8d 7c 24 40	 lea	 rdi, QWORD PTR cur_file_infoSaved$[rsp]
  000b8	48 8d b4 24 c0
	01 00 00	 lea	 rsi, QWORD PTR $T82796[rsp]
  000c0	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  000c5	f3 a4		 rep movsb

; 855  :     cur_file_info_internalSaved = s->cur_file_info_internal;

  000c7	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000cf	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [rax+188]
  000d5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR cur_file_info_internalSaved$[rsp], eax

; 856  : 
; 857  :     err = unzGoToFirstFile(file);

  000dc	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000e4	e8 00 00 00 00	 call	 unzGoToFirstFile
  000e9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax
$LN4@unzLocateF:

; 858  : 
; 859  :     while (err == UNZ_OK)

  000f0	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  000f8	0f 85 8e 00 00
	00		 jne	 $LN3@unzLocateF

; 860  :     {
; 861  :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 862  :         err = unzGetCurrentFileInfo(file,NULL,
; 863  :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 864  :                                     NULL,0,NULL,0);

  000fe	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00106	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0010f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00117	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00120	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00126	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR szCurrentFileName$80206[rsp]
  0012e	33 d2		 xor	 edx, edx
  00130	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00138	e8 00 00 00 00	 call	 unzGetCurrentFileInfo
  0013d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 865  :         if (err == UNZ_OK)

  00144	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0014c	75 39		 jne	 SHORT $LN2@unzLocateF

; 866  :         {
; 867  :             if (unzStringFileNameCompare(szCurrentFileName,
; 868  :                                             szFileName,iCaseSensitivity)==0)

  0014e	44 8b 84 24 40
	02 00 00	 mov	 r8d, DWORD PTR iCaseSensitivity$[rsp]
  00156	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR szFileName$[rsp]
  0015e	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR szCurrentFileName$80206[rsp]
  00166	e8 00 00 00 00	 call	 unzStringFileNameCompare
  0016b	85 c0		 test	 eax, eax
  0016d	75 04		 jne	 SHORT $LN1@unzLocateF

; 869  :                 return UNZ_OK;

  0016f	33 c0		 xor	 eax, eax
  00171	eb 71		 jmp	 SHORT $LN8@unzLocateF
$LN1@unzLocateF:

; 870  :             err = unzGoToNextFile(file);

  00173	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  0017b	e8 00 00 00 00	 call	 unzGoToNextFile
  00180	89 84 24 a8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax
$LN2@unzLocateF:

; 871  :         }
; 872  :     }

  00187	e9 64 ff ff ff	 jmp	 $LN4@unzLocateF
$LN3@unzLocateF:

; 873  : 
; 874  :     /* We failed, so restore the state of the 'current file' to where we
; 875  :      * were.
; 876  :      */
; 877  :     s->num_file = num_fileSaved ;

  0018c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00194	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR num_fileSaved$[rsp]
  0019b	89 41 54	 mov	 DWORD PTR [rcx+84], eax

; 878  :     s->pos_in_central_dir = pos_in_central_dirSaved ;

  0019e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001a6	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR pos_in_central_dirSaved$[rsp]
  001ad	89 41 58	 mov	 DWORD PTR [rcx+88], eax

; 879  :     s->cur_file_info = cur_file_infoSaved;

  001b0	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR s$[rsp]
  001b8	48 8d 74 24 40	 lea	 rsi, QWORD PTR cur_file_infoSaved$[rsp]
  001bd	48 83 c7 6c	 add	 rdi, 108		; 0000006cH
  001c1	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  001c6	f3 a4		 rep movsb

; 880  :     s->cur_file_info_internal = cur_file_info_internalSaved;

  001c8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  001d0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR cur_file_info_internalSaved$[rsp]
  001d7	89 82 bc 00 00
	00		 mov	 DWORD PTR [rdx+188], eax

; 881  :     return err;

  001dd	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
$LN8@unzLocateF:

; 882  : }

  001e4	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  001eb	5f		 pop	 rdi
  001ec	5e		 pop	 rsi
  001ed	c3		 ret	 0
unzLocateFile ENDP
_TEXT	ENDS
PUBLIC	unzOpen
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$unzOpen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT unzOpen
_TEXT	SEGMENT
path$ = 48
unzOpen	PROC						; COMDAT

; 502  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 503  :     return unzOpen2(path, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR path$[rsp]
  00010	e8 00 00 00 00	 call	 unzOpen2

; 504  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
unzOpen	ENDP
END
