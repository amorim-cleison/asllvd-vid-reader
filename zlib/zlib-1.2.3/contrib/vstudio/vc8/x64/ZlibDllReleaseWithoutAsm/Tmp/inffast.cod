; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	inflate_fast
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\inffast.c
pdata	SEGMENT
$pdata$inflate_fast DD imagerel $LN61
	DD	imagerel $LN61+2950
	DD	imagerel $unwind$inflate_fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inflate_fast DD 021001H
	DD	0150110H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT inflate_fast
_TEXT	SEGMENT
beg$ = 0
window$ = 8
last$ = 16
dcode$ = 24
whave$ = 32
in$ = 40
len$ = 48
bits$ = 52
lmask$ = 56
end$ = 64
lcode$ = 72
dist$ = 80
hold$ = 84
wsize$ = 88
this$ = 92
dmask$ = 96
from$ = 104
op$ = 112
out$ = 120
write$ = 128
state$ = 136
tv333 = 144
tv341 = 152
strm$ = 176
start$ = 184
inflate_fast PROC					; COMDAT

; 70   : {

$LN61:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 71   :     struct inflate_state FAR *state;
; 72   :     unsigned char FAR *in;      /* local strm->next_in */
; 73   :     unsigned char FAR *last;    /* while in < last, enough input available */
; 74   :     unsigned char FAR *out;     /* local strm->next_out */
; 75   :     unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
; 76   :     unsigned char FAR *end;     /* while out < end, enough space available */
; 77   : #ifdef INFLATE_STRICT
; 78   :     unsigned dmax;              /* maximum distance from zlib header */
; 79   : #endif
; 80   :     unsigned wsize;             /* window size or zero if not using window */
; 81   :     unsigned whave;             /* valid bytes in the window */
; 82   :     unsigned write;             /* window write index */
; 83   :     unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
; 84   :     unsigned long hold;         /* local strm->hold */
; 85   :     unsigned bits;              /* local strm->bits */
; 86   :     code const FAR *lcode;      /* local strm->lencode */
; 87   :     code const FAR *dcode;      /* local strm->distcode */
; 88   :     unsigned lmask;             /* mask for first level of length codes */
; 89   :     unsigned dmask;             /* mask for first level of distance codes */
; 90   :     code this;                  /* retrieved table entry */
; 91   :     unsigned op;                /* code bits, operation, extra bits, or */
; 92   :                                 /*  window position, window bytes to copy */
; 93   :     unsigned len;               /* match length, unused bytes */
; 94   :     unsigned dist;              /* match distance */
; 95   :     unsigned char FAR *from;    /* where to copy match from */
; 96   : 
; 97   :     /* copy state to local variables */
; 98   :     state = (struct inflate_state FAR *)strm->state;

  00010	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00018	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0001c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 99   :     in = strm->next_in - OFF;

  00024	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 83 e8 01	 sub	 rax, 1
  00033	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax

; 100  :     last = in + (strm->avail_in - 5);

  00038	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00040	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00043	83 e8 05	 sub	 eax, 5
  00046	8b c8		 mov	 ecx, eax
  00048	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  0004d	48 03 c1	 add	 rax, rcx
  00050	48 89 44 24 10	 mov	 QWORD PTR last$[rsp], rax

; 101  :     out = strm->next_out - OFF;

  00055	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0005d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00061	48 83 e8 01	 sub	 rax, 1
  00065	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax

; 102  :     beg = out - (start - strm->avail_out);

  0006a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00072	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  00075	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  0007c	2b c1		 sub	 eax, ecx
  0007e	8b c8		 mov	 ecx, eax
  00080	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00085	48 2b c1	 sub	 rax, rcx
  00088	48 89 04 24	 mov	 QWORD PTR beg$[rsp], rax

; 103  :     end = out + (strm->avail_out - 257);

  0008c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00094	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00097	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  0009c	8b c8		 mov	 ecx, eax
  0009e	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  000a3	48 03 c1	 add	 rax, rcx
  000a6	48 89 44 24 40	 mov	 QWORD PTR end$[rsp], rax

; 104  : #ifdef INFLATE_STRICT
; 105  :     dmax = state->dmax;
; 106  : #endif
; 107  :     wsize = state->wsize;

  000ab	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000b3	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  000b6	89 44 24 58	 mov	 DWORD PTR wsize$[rsp], eax

; 108  :     whave = state->whave;

  000ba	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000c2	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  000c5	89 44 24 20	 mov	 DWORD PTR whave$[rsp], eax

; 109  :     write = state->write;

  000c9	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000d1	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000d4	89 84 24 80 00
	00 00		 mov	 DWORD PTR write$[rsp], eax

; 110  :     window = state->window;

  000db	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000e3	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000e7	48 89 44 24 08	 mov	 QWORD PTR window$[rsp], rax

; 111  :     hold = state->hold;

  000ec	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000f4	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  000f7	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 112  :     bits = state->bits;

  000fb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00103	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00106	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 113  :     lcode = state->lencode;

  0010a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00112	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00116	48 89 44 24 48	 mov	 QWORD PTR lcode$[rsp], rax

; 114  :     dcode = state->distcode;

  0011b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00123	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00127	48 89 44 24 18	 mov	 QWORD PTR dcode$[rsp], rax

; 115  :     lmask = (1U << state->lenbits) - 1;

  0012c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00134	8b 48 68	 mov	 ecx, DWORD PTR [rax+104]
  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	d3 e0		 shl	 eax, cl
  0013e	83 e8 01	 sub	 eax, 1
  00141	89 44 24 38	 mov	 DWORD PTR lmask$[rsp], eax

; 116  :     dmask = (1U << state->distbits) - 1;

  00145	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  0014d	8b 48 6c	 mov	 ecx, DWORD PTR [rax+108]
  00150	b8 01 00 00 00	 mov	 eax, 1
  00155	d3 e0		 shl	 eax, cl
  00157	83 e8 01	 sub	 eax, 1
  0015a	89 44 24 60	 mov	 DWORD PTR dmask$[rsp], eax
$LN54@inflate_fa:

; 117  : 
; 118  :     /* decode literals and length/distances until end-of-block or not enough
; 119  :        input data or output space */
; 120  :     do {
; 121  :         if (bits < 15) {

  0015e	83 7c 24 34 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00163	73 70		 jae	 SHORT $LN51@inflate_fa

; 122  :             hold += (unsigned long)(PUP(in)) << bits;

  00165	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  0016a	48 83 c0 01	 add	 rax, 1
  0016e	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  00173	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  00178	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0017b	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0017f	0f b6 c8	 movzx	 ecx, al
  00182	8b c2		 mov	 eax, edx
  00184	d3 e0		 shl	 eax, cl
  00186	8b c8		 mov	 ecx, eax
  00188	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  0018c	03 c1		 add	 eax, ecx
  0018e	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 123  :             bits += 8;

  00192	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00196	83 c0 08	 add	 eax, 8
  00199	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 124  :             hold += (unsigned long)(PUP(in)) << bits;

  0019d	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  001a2	48 83 c0 01	 add	 rax, 1
  001a6	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  001ab	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  001b0	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  001b3	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  001b7	0f b6 c8	 movzx	 ecx, al
  001ba	8b c2		 mov	 eax, edx
  001bc	d3 e0		 shl	 eax, cl
  001be	8b c8		 mov	 ecx, eax
  001c0	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  001c4	03 c1		 add	 eax, ecx
  001c6	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 125  :             bits += 8;

  001ca	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  001ce	83 c0 08	 add	 eax, 8
  001d1	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax
$LN51@inflate_fa:

; 126  :         }
; 127  :         this = lcode[hold & lmask];

  001d5	8b 4c 24 38	 mov	 ecx, DWORD PTR lmask$[rsp]
  001d9	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  001dd	23 c1		 and	 eax, ecx
  001df	8b c8		 mov	 ecx, eax
  001e1	48 8b 44 24 48	 mov	 rax, QWORD PTR lcode$[rsp]
  001e6	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  001e9	89 44 24 5c	 mov	 DWORD PTR this$[rsp], eax
$dolen$78138:

; 128  :       dolen:
; 129  :         op = (unsigned)(this.bits);

  001ed	0f b6 44 24 5d	 movzx	 eax, BYTE PTR this$[rsp+1]
  001f2	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 130  :         hold >>= op;

  001f6	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  001fa	0f b6 c8	 movzx	 ecx, al
  001fd	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00201	d3 e8		 shr	 eax, cl
  00203	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 131  :         bits -= op;

  00207	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0020b	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0020f	2b c1		 sub	 eax, ecx
  00211	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 132  :         op = (unsigned)(this.op);

  00215	0f b6 44 24 5c	 movzx	 eax, BYTE PTR this$[rsp]
  0021a	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 133  :         if (op == 0) {                          /* literal */

  0021e	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00223	75 1f		 jne	 SHORT $LN50@inflate_fa

; 134  :             Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
; 135  :                     "inflate:         literal '%c'\n" :
; 136  :                     "inflate:         literal 0x%02x\n", this.val));
; 137  :             PUP(out) = (unsigned char)(this.val);

  00225	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0022a	48 83 c0 01	 add	 rax, 1
  0022e	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00233	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00238	0f b6 44 24 5e	 movzx	 eax, BYTE PTR this$[rsp+2]
  0023d	88 01		 mov	 BYTE PTR [rcx], al
  0023f	e9 e2 07 00 00	 jmp	 $LN49@inflate_fa
$LN50@inflate_fa:

; 138  :         }
; 139  :         else if (op & 16) {                     /* length base */

  00244	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00248	83 e0 10	 and	 eax, 16
  0024b	85 c0		 test	 eax, eax
  0024d	0f 84 56 07 00
	00		 je	 $LN48@inflate_fa

; 140  :             len = (unsigned)(this.val);

  00253	0f b7 44 24 5e	 movzx	 eax, WORD PTR this$[rsp+2]
  00258	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 141  :             op &= 15;                           /* number of extra bits */

  0025c	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00260	83 e0 0f	 and	 eax, 15
  00263	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 142  :             if (op) {

  00267	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  0026c	74 7f		 je	 SHORT $LN47@inflate_fa

; 143  :                 if (bits < op) {

  0026e	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00272	39 44 24 34	 cmp	 DWORD PTR bits$[rsp], eax
  00276	73 38		 jae	 SHORT $LN46@inflate_fa

; 144  :                     hold += (unsigned long)(PUP(in)) << bits;

  00278	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  0027d	48 83 c0 01	 add	 rax, 1
  00281	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  00286	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  0028b	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0028e	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00292	0f b6 c8	 movzx	 ecx, al
  00295	8b c2		 mov	 eax, edx
  00297	d3 e0		 shl	 eax, cl
  00299	8b c8		 mov	 ecx, eax
  0029b	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  0029f	03 c1		 add	 eax, ecx
  002a1	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 145  :                     bits += 8;

  002a5	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  002a9	83 c0 08	 add	 eax, 8
  002ac	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax
$LN46@inflate_fa:

; 146  :                 }
; 147  :                 len += (unsigned)hold & ((1U << op) - 1);

  002b0	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  002b4	b8 01 00 00 00	 mov	 eax, 1
  002b9	d3 e0		 shl	 eax, cl
  002bb	83 e8 01	 sub	 eax, 1
  002be	8b 4c 24 54	 mov	 ecx, DWORD PTR hold$[rsp]
  002c2	23 c8		 and	 ecx, eax
  002c4	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  002c8	03 c1		 add	 eax, ecx
  002ca	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 148  :                 hold >>= op;

  002ce	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  002d2	0f b6 c8	 movzx	 ecx, al
  002d5	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  002d9	d3 e8		 shr	 eax, cl
  002db	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 149  :                 bits -= op;

  002df	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  002e3	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  002e7	2b c1		 sub	 eax, ecx
  002e9	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax
$LN47@inflate_fa:

; 150  :             }
; 151  :             Tracevv((stderr, "inflate:         length %u\n", len));
; 152  :             if (bits < 15) {

  002ed	83 7c 24 34 0f	 cmp	 DWORD PTR bits$[rsp], 15
  002f2	73 70		 jae	 SHORT $LN45@inflate_fa

; 153  :                 hold += (unsigned long)(PUP(in)) << bits;

  002f4	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  002f9	48 83 c0 01	 add	 rax, 1
  002fd	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  00302	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  00307	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0030a	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0030e	0f b6 c8	 movzx	 ecx, al
  00311	8b c2		 mov	 eax, edx
  00313	d3 e0		 shl	 eax, cl
  00315	8b c8		 mov	 ecx, eax
  00317	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  0031b	03 c1		 add	 eax, ecx
  0031d	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 154  :                 bits += 8;

  00321	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00325	83 c0 08	 add	 eax, 8
  00328	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 155  :                 hold += (unsigned long)(PUP(in)) << bits;

  0032c	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  00331	48 83 c0 01	 add	 rax, 1
  00335	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  0033a	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  0033f	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00342	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00346	0f b6 c8	 movzx	 ecx, al
  00349	8b c2		 mov	 eax, edx
  0034b	d3 e0		 shl	 eax, cl
  0034d	8b c8		 mov	 ecx, eax
  0034f	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00353	03 c1		 add	 eax, ecx
  00355	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 156  :                 bits += 8;

  00359	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0035d	83 c0 08	 add	 eax, 8
  00360	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax
$LN45@inflate_fa:

; 157  :             }
; 158  :             this = dcode[hold & dmask];

  00364	8b 4c 24 60	 mov	 ecx, DWORD PTR dmask$[rsp]
  00368	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  0036c	23 c1		 and	 eax, ecx
  0036e	8b c8		 mov	 ecx, eax
  00370	48 8b 44 24 18	 mov	 rax, QWORD PTR dcode$[rsp]
  00375	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00378	89 44 24 5c	 mov	 DWORD PTR this$[rsp], eax
$dodist$78153:

; 159  :           dodist:
; 160  :             op = (unsigned)(this.bits);

  0037c	0f b6 44 24 5d	 movzx	 eax, BYTE PTR this$[rsp+1]
  00381	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 161  :             hold >>= op;

  00385	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00389	0f b6 c8	 movzx	 ecx, al
  0038c	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00390	d3 e8		 shr	 eax, cl
  00392	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 162  :             bits -= op;

  00396	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0039a	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0039e	2b c1		 sub	 eax, ecx
  003a0	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 163  :             op = (unsigned)(this.op);

  003a4	0f b6 44 24 5c	 movzx	 eax, BYTE PTR this$[rsp]
  003a9	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 164  :             if (op & 16) {                      /* distance base */

  003ad	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003b1	83 e0 10	 and	 eax, 16
  003b4	85 c0		 test	 eax, eax
  003b6	0f 84 88 05 00
	00		 je	 $LN44@inflate_fa

; 165  :                 dist = (unsigned)(this.val);

  003bc	0f b7 44 24 5e	 movzx	 eax, WORD PTR this$[rsp+2]
  003c1	89 44 24 50	 mov	 DWORD PTR dist$[rsp], eax

; 166  :                 op &= 15;                       /* number of extra bits */

  003c5	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003c9	83 e0 0f	 and	 eax, 15
  003cc	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 167  :                 if (bits < op) {

  003d0	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003d4	39 44 24 34	 cmp	 DWORD PTR bits$[rsp], eax
  003d8	73 7a		 jae	 SHORT $LN43@inflate_fa

; 168  :                     hold += (unsigned long)(PUP(in)) << bits;

  003da	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  003df	48 83 c0 01	 add	 rax, 1
  003e3	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  003e8	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  003ed	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  003f0	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  003f4	0f b6 c8	 movzx	 ecx, al
  003f7	8b c2		 mov	 eax, edx
  003f9	d3 e0		 shl	 eax, cl
  003fb	8b c8		 mov	 ecx, eax
  003fd	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00401	03 c1		 add	 eax, ecx
  00403	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 169  :                     bits += 8;

  00407	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0040b	83 c0 08	 add	 eax, 8
  0040e	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 170  :                     if (bits < op) {

  00412	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00416	39 44 24 34	 cmp	 DWORD PTR bits$[rsp], eax
  0041a	73 38		 jae	 SHORT $LN42@inflate_fa

; 171  :                         hold += (unsigned long)(PUP(in)) << bits;

  0041c	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  00421	48 83 c0 01	 add	 rax, 1
  00425	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax
  0042a	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  0042f	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00432	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00436	0f b6 c8	 movzx	 ecx, al
  00439	8b c2		 mov	 eax, edx
  0043b	d3 e0		 shl	 eax, cl
  0043d	8b c8		 mov	 ecx, eax
  0043f	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00443	03 c1		 add	 eax, ecx
  00445	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 172  :                         bits += 8;

  00449	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0044d	83 c0 08	 add	 eax, 8
  00450	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax
$LN42@inflate_fa:
$LN43@inflate_fa:

; 173  :                     }
; 174  :                 }
; 175  :                 dist += (unsigned)hold & ((1U << op) - 1);

  00454	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00458	b8 01 00 00 00	 mov	 eax, 1
  0045d	d3 e0		 shl	 eax, cl
  0045f	83 e8 01	 sub	 eax, 1
  00462	8b 4c 24 54	 mov	 ecx, DWORD PTR hold$[rsp]
  00466	23 c8		 and	 ecx, eax
  00468	8b 44 24 50	 mov	 eax, DWORD PTR dist$[rsp]
  0046c	03 c1		 add	 eax, ecx
  0046e	89 44 24 50	 mov	 DWORD PTR dist$[rsp], eax

; 176  : #ifdef INFLATE_STRICT
; 177  :                 if (dist > dmax) {
; 178  :                     strm->msg = (char *)"invalid distance too far back";
; 179  :                     state->mode = BAD;
; 180  :                     break;
; 181  :                 }
; 182  : #endif
; 183  :                 hold >>= op;

  00472	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00476	0f b6 c8	 movzx	 ecx, al
  00479	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  0047d	d3 e8		 shr	 eax, cl
  0047f	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 184  :                 bits -= op;

  00483	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00487	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  0048b	2b c1		 sub	 eax, ecx
  0048d	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 185  :                 Tracevv((stderr, "inflate:         distance %u\n", dist));
; 186  :                 op = (unsigned)(out - beg);     /* max distance in output */

  00491	48 8b 0c 24	 mov	 rcx, QWORD PTR beg$[rsp]
  00495	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0049a	48 2b c1	 sub	 rax, rcx
  0049d	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 187  :                 if (dist > op) {                /* see if copy from window */

  004a1	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  004a5	39 44 24 50	 cmp	 DWORD PTR dist$[rsp], eax
  004a9	0f 86 87 03 00
	00		 jbe	 $LN41@inflate_fa

; 188  :                     op = dist - op;             /* distance back in window */

  004af	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  004b3	8b 44 24 50	 mov	 eax, DWORD PTR dist$[rsp]
  004b7	2b c1		 sub	 eax, ecx
  004b9	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 189  :                     if (op > whave) {

  004bd	8b 44 24 20	 mov	 eax, DWORD PTR whave$[rsp]
  004c1	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  004c5	76 26		 jbe	 SHORT $LN40@inflate_fa

; 190  :                         strm->msg = (char *)"invalid distance too far back";

  004c7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  004cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
  004d6	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 191  :                         state->mode = BAD;

  004da	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  004e2	c7 00 1b 00 00
	00		 mov	 DWORD PTR [rax], 27

; 192  :                         break;

  004e8	e9 55 05 00 00	 jmp	 $LN52@inflate_fa
$LN40@inflate_fa:

; 193  :                     }
; 194  :                     from = window - OFF;

  004ed	48 8b 44 24 08	 mov	 rax, QWORD PTR window$[rsp]
  004f2	48 83 e8 01	 sub	 rax, 1
  004f6	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 195  :                     if (write == 0) {           /* very common case */

  004fb	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR write$[rsp], 0
  00503	0f 85 84 00 00
	00		 jne	 $LN39@inflate_fa

; 196  :                         from += wsize - op;

  00509	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0050d	8b 44 24 58	 mov	 eax, DWORD PTR wsize$[rsp]
  00511	2b c1		 sub	 eax, ecx
  00513	8b c8		 mov	 ecx, eax
  00515	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0051a	48 03 c1	 add	 rax, rcx
  0051d	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 197  :                         if (op < len) {         /* some from window */

  00522	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  00526	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  0052a	73 5c		 jae	 SHORT $LN38@inflate_fa

; 198  :                             len -= op;

  0052c	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00530	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  00534	2b c1		 sub	 eax, ecx
  00536	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax
$LN37@inflate_fa:

; 199  :                             do {
; 200  :                                 PUP(out) = PUP(from);

  0053a	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0053f	48 83 c0 01	 add	 rax, 1
  00543	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00548	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0054d	48 83 c0 01	 add	 rax, 1
  00551	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00556	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0055b	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00560	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00563	88 01		 mov	 BYTE PTR [rcx], al

; 201  :                             } while (--op);

  00565	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00569	83 e8 01	 sub	 eax, 1
  0056c	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  00570	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00575	75 c3		 jne	 SHORT $LN37@inflate_fa

; 202  :                             from = out - dist;  /* rest from output */

  00577	8b 4c 24 50	 mov	 ecx, DWORD PTR dist$[rsp]
  0057b	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00580	48 2b c1	 sub	 rax, rcx
  00583	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN38@inflate_fa:

; 203  :                         }

  00588	e9 a4 01 00 00	 jmp	 $LN34@inflate_fa
$LN39@inflate_fa:

; 204  :                     }
; 205  :                     else if (write < op) {      /* wrap around window */

  0058d	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00591	39 84 24 80 00
	00 00		 cmp	 DWORD PTR write$[rsp], eax
  00598	0f 83 11 01 00
	00		 jae	 $LN33@inflate_fa

; 206  :                         from += wsize + write - op;

  0059e	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR write$[rsp]
  005a5	8b 44 24 58	 mov	 eax, DWORD PTR wsize$[rsp]
  005a9	03 c1		 add	 eax, ecx
  005ab	2b 44 24 70	 sub	 eax, DWORD PTR op$[rsp]
  005af	8b c8		 mov	 ecx, eax
  005b1	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  005b6	48 03 c1	 add	 rax, rcx
  005b9	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 207  :                         op -= write;

  005be	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR write$[rsp]
  005c5	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  005c9	2b c1		 sub	 eax, ecx
  005cb	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 208  :                         if (op < len) {         /* some from end of window */

  005cf	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  005d3	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  005d7	0f 83 cd 00 00
	00		 jae	 $LN32@inflate_fa

; 209  :                             len -= op;

  005dd	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  005e1	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  005e5	2b c1		 sub	 eax, ecx
  005e7	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax
$LN31@inflate_fa:

; 210  :                             do {
; 211  :                                 PUP(out) = PUP(from);

  005eb	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  005f0	48 83 c0 01	 add	 rax, 1
  005f4	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  005f9	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  005fe	48 83 c0 01	 add	 rax, 1
  00602	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00607	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0060c	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00611	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00614	88 01		 mov	 BYTE PTR [rcx], al

; 212  :                             } while (--op);

  00616	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0061a	83 e8 01	 sub	 eax, 1
  0061d	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  00621	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00626	75 c3		 jne	 SHORT $LN31@inflate_fa

; 213  :                             from = window - OFF;

  00628	48 8b 44 24 08	 mov	 rax, QWORD PTR window$[rsp]
  0062d	48 83 e8 01	 sub	 rax, 1
  00631	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 214  :                             if (write < len) {  /* some from start of window */

  00636	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  0063a	39 84 24 80 00
	00 00		 cmp	 DWORD PTR write$[rsp], eax
  00641	73 67		 jae	 SHORT $LN28@inflate_fa

; 215  :                                 op = write;

  00643	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR write$[rsp]
  0064a	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 216  :                                 len -= op;

  0064e	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00652	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  00656	2b c1		 sub	 eax, ecx
  00658	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax
$LN27@inflate_fa:

; 217  :                                 do {
; 218  :                                     PUP(out) = PUP(from);

  0065c	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00661	48 83 c0 01	 add	 rax, 1
  00665	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0066a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0066f	48 83 c0 01	 add	 rax, 1
  00673	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00678	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0067d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00682	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00685	88 01		 mov	 BYTE PTR [rcx], al

; 219  :                                 } while (--op);

  00687	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0068b	83 e8 01	 sub	 eax, 1
  0068e	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  00692	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00697	75 c3		 jne	 SHORT $LN27@inflate_fa

; 220  :                                 from = out - dist;      /* rest from output */

  00699	8b 4c 24 50	 mov	 ecx, DWORD PTR dist$[rsp]
  0069d	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  006a2	48 2b c1	 sub	 rax, rcx
  006a5	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN28@inflate_fa:
$LN32@inflate_fa:

; 221  :                             }
; 222  :                         }
; 223  :                     }
; 224  :                     else {                      /* contiguous in window */

  006aa	e9 82 00 00 00	 jmp	 $LN24@inflate_fa
$LN33@inflate_fa:

; 225  :                         from += write - op;

  006af	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  006b3	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR write$[rsp]
  006ba	2b c1		 sub	 eax, ecx
  006bc	8b c8		 mov	 ecx, eax
  006be	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  006c3	48 03 c1	 add	 rax, rcx
  006c6	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 226  :                         if (op < len) {         /* some from window */

  006cb	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  006cf	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  006d3	73 5c		 jae	 SHORT $LN23@inflate_fa

; 227  :                             len -= op;

  006d5	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  006d9	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  006dd	2b c1		 sub	 eax, ecx
  006df	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax
$LN22@inflate_fa:

; 228  :                             do {
; 229  :                                 PUP(out) = PUP(from);

  006e3	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  006e8	48 83 c0 01	 add	 rax, 1
  006ec	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  006f1	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  006f6	48 83 c0 01	 add	 rax, 1
  006fa	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  006ff	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00704	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00709	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0070c	88 01		 mov	 BYTE PTR [rcx], al

; 230  :                             } while (--op);

  0070e	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00712	83 e8 01	 sub	 eax, 1
  00715	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  00719	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  0071e	75 c3		 jne	 SHORT $LN22@inflate_fa

; 231  :                             from = out - dist;  /* rest from output */

  00720	8b 4c 24 50	 mov	 ecx, DWORD PTR dist$[rsp]
  00724	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00729	48 2b c1	 sub	 rax, rcx
  0072c	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN23@inflate_fa:
$LN24@inflate_fa:
$LN34@inflate_fa:
$LN19@inflate_fa:

; 232  :                         }
; 233  :                     }
; 234  :                     while (len > 2) {

  00731	83 7c 24 30 02	 cmp	 DWORD PTR len$[rsp], 2
  00736	0f 86 91 00 00
	00		 jbe	 $LN18@inflate_fa

; 235  :                         PUP(out) = PUP(from);

  0073c	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00741	48 83 c0 01	 add	 rax, 1
  00745	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0074a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0074f	48 83 c0 01	 add	 rax, 1
  00753	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00758	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0075d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00762	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00765	88 01		 mov	 BYTE PTR [rcx], al

; 236  :                         PUP(out) = PUP(from);

  00767	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0076c	48 83 c0 01	 add	 rax, 1
  00770	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00775	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0077a	48 83 c0 01	 add	 rax, 1
  0077e	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00783	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00788	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0078d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00790	88 01		 mov	 BYTE PTR [rcx], al

; 237  :                         PUP(out) = PUP(from);

  00792	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00797	48 83 c0 01	 add	 rax, 1
  0079b	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  007a0	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007a5	48 83 c0 01	 add	 rax, 1
  007a9	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  007ae	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  007b3	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007b8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007bb	88 01		 mov	 BYTE PTR [rcx], al

; 238  :                         len -= 3;

  007bd	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  007c1	83 e8 03	 sub	 eax, 3
  007c4	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 239  :                     }

  007c8	e9 64 ff ff ff	 jmp	 $LN19@inflate_fa
$LN18@inflate_fa:

; 240  :                     if (len) {

  007cd	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  007d2	74 5d		 je	 SHORT $LN17@inflate_fa

; 241  :                         PUP(out) = PUP(from);

  007d4	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007d9	48 83 c0 01	 add	 rax, 1
  007dd	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  007e2	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007e7	48 83 c0 01	 add	 rax, 1
  007eb	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  007f0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  007f5	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007fa	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007fd	88 01		 mov	 BYTE PTR [rcx], al

; 242  :                         if (len > 1)

  007ff	83 7c 24 30 01	 cmp	 DWORD PTR len$[rsp], 1
  00804	76 2b		 jbe	 SHORT $LN16@inflate_fa

; 243  :                             PUP(out) = PUP(from);

  00806	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0080b	48 83 c0 01	 add	 rax, 1
  0080f	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00814	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00819	48 83 c0 01	 add	 rax, 1
  0081d	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00822	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00827	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0082c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0082f	88 01		 mov	 BYTE PTR [rcx], al
$LN16@inflate_fa:
$LN17@inflate_fa:

; 244  :                     }
; 245  :                 }
; 246  :                 else {

  00831	e9 0c 01 00 00	 jmp	 $LN15@inflate_fa
$LN41@inflate_fa:

; 247  :                     from = out - dist;          /* copy direct from output */

  00836	8b 4c 24 50	 mov	 ecx, DWORD PTR dist$[rsp]
  0083a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0083f	48 2b c1	 sub	 rax, rcx
  00842	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN14@inflate_fa:

; 248  :                     do {                        /* minimum length is three */
; 249  :                         PUP(out) = PUP(from);

  00847	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0084c	48 83 c0 01	 add	 rax, 1
  00850	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00855	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0085a	48 83 c0 01	 add	 rax, 1
  0085e	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00863	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00868	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0086d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00870	88 01		 mov	 BYTE PTR [rcx], al

; 250  :                         PUP(out) = PUP(from);

  00872	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00877	48 83 c0 01	 add	 rax, 1
  0087b	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00880	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00885	48 83 c0 01	 add	 rax, 1
  00889	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  0088e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00893	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00898	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0089b	88 01		 mov	 BYTE PTR [rcx], al

; 251  :                         PUP(out) = PUP(from);

  0089d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008a2	48 83 c0 01	 add	 rax, 1
  008a6	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  008ab	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008b0	48 83 c0 01	 add	 rax, 1
  008b4	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  008b9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  008be	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008c3	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008c6	88 01		 mov	 BYTE PTR [rcx], al

; 252  :                         len -= 3;

  008c8	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  008cc	83 e8 03	 sub	 eax, 3
  008cf	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 253  :                     } while (len > 2);

  008d3	83 7c 24 30 02	 cmp	 DWORD PTR len$[rsp], 2
  008d8	0f 87 69 ff ff
	ff		 ja	 $LN14@inflate_fa

; 254  :                     if (len) {

  008de	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  008e3	74 5d		 je	 SHORT $LN11@inflate_fa

; 255  :                         PUP(out) = PUP(from);

  008e5	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008ea	48 83 c0 01	 add	 rax, 1
  008ee	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  008f3	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008f8	48 83 c0 01	 add	 rax, 1
  008fc	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00901	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00906	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0090b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0090e	88 01		 mov	 BYTE PTR [rcx], al

; 256  :                         if (len > 1)

  00910	83 7c 24 30 01	 cmp	 DWORD PTR len$[rsp], 1
  00915	76 2b		 jbe	 SHORT $LN10@inflate_fa

; 257  :                             PUP(out) = PUP(from);

  00917	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0091c	48 83 c0 01	 add	 rax, 1
  00920	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00925	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0092a	48 83 c0 01	 add	 rax, 1
  0092e	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00933	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00938	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0093d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00940	88 01		 mov	 BYTE PTR [rcx], al
$LN10@inflate_fa:
$LN11@inflate_fa:
$LN15@inflate_fa:

; 258  :                     }
; 259  :                 }

  00942	eb 63		 jmp	 SHORT $LN9@inflate_fa
$LN44@inflate_fa:

; 260  :             }
; 261  :             else if ((op & 64) == 0) {          /* 2nd level distance code */

  00944	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00948	83 e0 40	 and	 eax, 64			; 00000040H
  0094b	85 c0		 test	 eax, eax
  0094d	75 32		 jne	 SHORT $LN8@inflate_fa

; 262  :                 this = dcode[this.val + (hold & ((1U << op) - 1))];

  0094f	0f b7 54 24 5e	 movzx	 edx, WORD PTR this$[rsp+2]
  00954	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00958	b8 01 00 00 00	 mov	 eax, 1
  0095d	d3 e0		 shl	 eax, cl
  0095f	83 e8 01	 sub	 eax, 1
  00962	8b 4c 24 54	 mov	 ecx, DWORD PTR hold$[rsp]
  00966	23 c8		 and	 ecx, eax
  00968	8b c2		 mov	 eax, edx
  0096a	03 c1		 add	 eax, ecx
  0096c	8b c8		 mov	 ecx, eax
  0096e	48 8b 44 24 18	 mov	 rax, QWORD PTR dcode$[rsp]
  00973	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00976	89 44 24 5c	 mov	 DWORD PTR this$[rsp], eax

; 263  :                 goto dodist;

  0097a	e9 fd f9 ff ff	 jmp	 $dodist$78153

; 264  :             }
; 265  :             else {

  0097f	eb 26		 jmp	 SHORT $LN7@inflate_fa
$LN8@inflate_fa:

; 266  :                 strm->msg = (char *)"invalid distance code";

  00981	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00989	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
  00990	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 267  :                 state->mode = BAD;

  00994	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  0099c	c7 00 1b 00 00
	00		 mov	 DWORD PTR [rax], 27

; 268  :                 break;

  009a2	e9 9b 00 00 00	 jmp	 $LN52@inflate_fa
$LN7@inflate_fa:
$LN9@inflate_fa:

; 269  :             }

  009a7	eb 7d		 jmp	 SHORT $LN6@inflate_fa
$LN48@inflate_fa:

; 270  :         }
; 271  :         else if ((op & 64) == 0) {              /* 2nd level length code */

  009a9	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  009ad	83 e0 40	 and	 eax, 64			; 00000040H
  009b0	85 c0		 test	 eax, eax
  009b2	75 32		 jne	 SHORT $LN5@inflate_fa

; 272  :             this = lcode[this.val + (hold & ((1U << op) - 1))];

  009b4	0f b7 54 24 5e	 movzx	 edx, WORD PTR this$[rsp+2]
  009b9	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  009bd	b8 01 00 00 00	 mov	 eax, 1
  009c2	d3 e0		 shl	 eax, cl
  009c4	83 e8 01	 sub	 eax, 1
  009c7	8b 4c 24 54	 mov	 ecx, DWORD PTR hold$[rsp]
  009cb	23 c8		 and	 ecx, eax
  009cd	8b c2		 mov	 eax, edx
  009cf	03 c1		 add	 eax, ecx
  009d1	8b c8		 mov	 ecx, eax
  009d3	48 8b 44 24 48	 mov	 rax, QWORD PTR lcode$[rsp]
  009d8	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009db	89 44 24 5c	 mov	 DWORD PTR this$[rsp], eax
  009df	e9 09 f8 ff ff	 jmp	 $dolen$78138

; 273  :             goto dolen;

  009e4	eb 40		 jmp	 SHORT $LN4@inflate_fa
$LN5@inflate_fa:

; 274  :         }
; 275  :         else if (op & 32) {                     /* end-of-block */

  009e6	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  009ea	83 e0 20	 and	 eax, 32			; 00000020H
  009ed	85 c0		 test	 eax, eax
  009ef	74 12		 je	 SHORT $LN3@inflate_fa

; 276  :             Tracevv((stderr, "inflate:         end of block\n"));
; 277  :             state->mode = TYPE;

  009f1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  009f9	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 278  :             break;

  009ff	eb 41		 jmp	 SHORT $LN52@inflate_fa

; 279  :         }
; 280  :         else {

  00a01	eb 23		 jmp	 SHORT $LN2@inflate_fa
$LN3@inflate_fa:

; 281  :             strm->msg = (char *)"invalid literal/length code";

  00a03	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00a0b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
  00a12	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 282  :             state->mode = BAD;

  00a16	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00a1e	c7 00 1b 00 00
	00		 mov	 DWORD PTR [rax], 27

; 283  :             break;

  00a24	eb 1c		 jmp	 SHORT $LN52@inflate_fa
$LN2@inflate_fa:
$LN4@inflate_fa:
$LN6@inflate_fa:
$LN49@inflate_fa:

; 284  :         }
; 285  :     } while (in < last && out < end);

  00a26	48 8b 44 24 10	 mov	 rax, QWORD PTR last$[rsp]
  00a2b	48 39 44 24 28	 cmp	 QWORD PTR in$[rsp], rax
  00a30	73 10		 jae	 SHORT $LN1@inflate_fa
  00a32	48 8b 44 24 40	 mov	 rax, QWORD PTR end$[rsp]
  00a37	48 39 44 24 78	 cmp	 QWORD PTR out$[rsp], rax
  00a3c	0f 82 1c f7 ff
	ff		 jb	 $LN54@inflate_fa
$LN1@inflate_fa:
$LN52@inflate_fa:

; 286  : 
; 287  :     /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
; 288  :     len = bits >> 3;

  00a42	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00a46	c1 e8 03	 shr	 eax, 3
  00a49	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 289  :     in -= len;

  00a4d	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  00a51	48 8b 44 24 28	 mov	 rax, QWORD PTR in$[rsp]
  00a56	48 2b c1	 sub	 rax, rcx
  00a59	48 89 44 24 28	 mov	 QWORD PTR in$[rsp], rax

; 290  :     bits -= len << 3;

  00a5e	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  00a62	c1 e1 03	 shl	 ecx, 3
  00a65	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00a69	2b c1		 sub	 eax, ecx
  00a6b	89 44 24 34	 mov	 DWORD PTR bits$[rsp], eax

; 291  :     hold &= (1U << bits) - 1;

  00a6f	8b 4c 24 34	 mov	 ecx, DWORD PTR bits$[rsp]
  00a73	b8 01 00 00 00	 mov	 eax, 1
  00a78	d3 e0		 shl	 eax, cl
  00a7a	8b c8		 mov	 ecx, eax
  00a7c	83 e9 01	 sub	 ecx, 1
  00a7f	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00a83	23 c1		 and	 eax, ecx
  00a85	89 44 24 54	 mov	 DWORD PTR hold$[rsp], eax

; 292  : 
; 293  :     /* update state and return */
; 294  :     strm->next_in = in + OFF;

  00a89	48 8b 4c 24 28	 mov	 rcx, QWORD PTR in$[rsp]
  00a8e	48 83 c1 01	 add	 rcx, 1
  00a92	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00a9a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 295  :     strm->next_out = out + OFF;

  00a9d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00aa2	48 83 c1 01	 add	 rcx, 1
  00aa6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00aae	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 296  :     strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));

  00ab2	48 8b 44 24 10	 mov	 rax, QWORD PTR last$[rsp]
  00ab7	48 39 44 24 28	 cmp	 QWORD PTR in$[rsp], rax
  00abc	73 1b		 jae	 SHORT $LN57@inflate_fa
  00abe	48 8b 4c 24 28	 mov	 rcx, QWORD PTR in$[rsp]
  00ac3	48 8b 44 24 10	 mov	 rax, QWORD PTR last$[rsp]
  00ac8	48 2b c1	 sub	 rax, rcx
  00acb	48 83 c0 05	 add	 rax, 5
  00acf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
  00ad7	eb 1d		 jmp	 SHORT $LN58@inflate_fa
$LN57@inflate_fa:
  00ad9	48 8b 44 24 10	 mov	 rax, QWORD PTR last$[rsp]
  00ade	48 8b 4c 24 28	 mov	 rcx, QWORD PTR in$[rsp]
  00ae3	48 2b c8	 sub	 rcx, rax
  00ae6	b8 05 00 00 00	 mov	 eax, 5
  00aeb	48 2b c1	 sub	 rax, rcx
  00aee	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
$LN58@inflate_fa:
  00af6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00afe	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv333[rsp]
  00b05	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 297  :     strm->avail_out = (unsigned)(out < end ?
; 298  :                                  257 + (end - out) : 257 - (out - end));

  00b08	48 8b 44 24 40	 mov	 rax, QWORD PTR end$[rsp]
  00b0d	48 39 44 24 78	 cmp	 QWORD PTR out$[rsp], rax
  00b12	73 1d		 jae	 SHORT $LN59@inflate_fa
  00b14	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00b19	48 8b 44 24 40	 mov	 rax, QWORD PTR end$[rsp]
  00b1e	48 2b c1	 sub	 rax, rcx
  00b21	48 05 01 01 00
	00		 add	 rax, 257		; 00000101H
  00b27	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv341[rsp], rax
  00b2f	eb 1d		 jmp	 SHORT $LN60@inflate_fa
$LN59@inflate_fa:
  00b31	48 8b 44 24 40	 mov	 rax, QWORD PTR end$[rsp]
  00b36	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00b3b	48 2b c8	 sub	 rcx, rax
  00b3e	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  00b43	48 2b c1	 sub	 rax, rcx
  00b46	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv341[rsp], rax
$LN60@inflate_fa:
  00b4e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00b56	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv341[rsp]
  00b5d	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 299  :     state->hold = hold;

  00b60	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  00b68	8b 44 24 54	 mov	 eax, DWORD PTR hold$[rsp]
  00b6c	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 300  :     state->bits = bits;

  00b6f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  00b77	8b 44 24 34	 mov	 eax, DWORD PTR bits$[rsp]
  00b7b	89 41 44	 mov	 DWORD PTR [rcx+68], eax

; 301  :     return;
; 302  : }

  00b7e	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00b85	c3		 ret	 0
inflate_fast ENDP
END
