; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_SetFilePointer:PROC
EXTRN	__imp_CloseHandle:PROC
PUBLIC	win32_error_file_func
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\iowin32.c
pdata	SEGMENT
$pdata$win32_error_file_func DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$win32_error_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_error_file_func DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_error_file_func
_TEXT	SEGMENT
ret$ = 0
opaque$ = 32
stream$ = 40
win32_error_file_func PROC				; COMDAT

; 250  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 251  :     int ret=-1;

  0000e	c7 04 24 ff ff
	ff ff		 mov	 DWORD PTR ret$[rsp], -1

; 252  :     if (stream!=NULL)

  00015	48 83 7c 24 28
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0001b	74 0b		 je	 SHORT $LN1@win32_erro

; 253  :     {
; 254  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  0001d	48 8b 44 24 28	 mov	 rax, QWORD PTR stream$[rsp]
  00022	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00025	89 04 24	 mov	 DWORD PTR ret$[rsp], eax
$LN1@win32_erro:

; 255  :     }
; 256  :     return ret;

  00028	8b 04 24	 mov	 eax, DWORD PTR ret$[rsp]

; 257  : }

  0002b	48 83 c4 18	 add	 rsp, 24
  0002f	c3		 ret	 0
win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_close_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_close_file_func DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$win32_close_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_close_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_close_file_func
_TEXT	SEGMENT
ret$ = 32
hFile$78242 = 40
opaque$ = 64
stream$ = 72
win32_close_file_func PROC				; COMDAT

; 230  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 231  :     int ret=-1;

  0000e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 232  : 
; 233  :     if (stream!=NULL)

  00016	48 83 7c 24 48
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0001c	74 33		 je	 SHORT $LN2@win32_clos

; 234  :     {
; 235  :         HANDLE hFile;
; 236  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR stream$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 89 44 24 28	 mov	 QWORD PTR hFile$78242[rsp], rax

; 237  :         if (hFile != NULL)

  0002b	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$78242[rsp], 0
  00031	74 13		 je	 SHORT $LN1@win32_clos

; 238  :         {
; 239  :             CloseHandle(hFile);

  00033	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$78242[rsp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 240  :             ret=0;

  0003e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN1@win32_clos:

; 241  :         }
; 242  :         free(stream);

  00046	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@win32_clos:

; 243  :     }
; 244  :     return ret;

  00051	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 245  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
win32_close_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_seek_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_seek_file_func DD imagerel $LN13
	DD	imagerel $LN13+229
	DD	imagerel $unwind$win32_seek_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_seek_file_func DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_seek_file_func
_TEXT	SEGMENT
hFile$ = 32
ret$ = 40
dwMoveMethod$ = 44
dwSet$78227 = 48
dwErr$78231 = 52
tv65 = 56
opaque$ = 80
stream$ = 88
offset$ = 96
origin$ = 104
win32_seek_file_func PROC				; COMDAT

; 191  : {

$LN13:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 192  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00018	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR dwMoveMethod$[rsp], -1 ; ffffffffH

; 193  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 194  : 
; 195  :     long ret=-1;

  00029	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 196  :     if (stream!=NULL)

  00031	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00037	74 0d		 je	 SHORT $LN10@win32_seek

; 197  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00039	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 44 24 20	 mov	 QWORD PTR hFile$[rsp], rax
$LN10@win32_seek:

; 198  :     switch (origin)

  00046	8b 44 24 68	 mov	 eax, DWORD PTR origin$[rsp]
  0004a	89 44 24 38	 mov	 DWORD PTR tv65[rsp], eax
  0004e	83 7c 24 38 00	 cmp	 DWORD PTR tv65[rsp], 0
  00053	74 24		 je	 SHORT $LN5@win32_seek
  00055	83 7c 24 38 01	 cmp	 DWORD PTR tv65[rsp], 1
  0005a	74 09		 je	 SHORT $LN7@win32_seek
  0005c	83 7c 24 38 02	 cmp	 DWORD PTR tv65[rsp], 2
  00061	74 0c		 je	 SHORT $LN6@win32_seek
  00063	eb 1e		 jmp	 SHORT $LN4@win32_seek
$LN7@win32_seek:

; 199  :     {
; 200  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 201  :         dwMoveMethod = FILE_CURRENT;

  00065	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 1

; 202  :         break;

  0006d	eb 1b		 jmp	 SHORT $LN8@win32_seek
$LN6@win32_seek:

; 203  :     case ZLIB_FILEFUNC_SEEK_END :
; 204  :         dwMoveMethod = FILE_END;

  0006f	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 2

; 205  :         break;

  00077	eb 11		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 206  :     case ZLIB_FILEFUNC_SEEK_SET :
; 207  :         dwMoveMethod = FILE_BEGIN;

  00079	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 0

; 208  :         break;

  00081	eb 07		 jmp	 SHORT $LN8@win32_seek
$LN4@win32_seek:

; 209  :     default: return -1;

  00083	b8 ff ff ff ff	 mov	 eax, -1
  00088	eb 56		 jmp	 SHORT $LN11@win32_seek
$LN8@win32_seek:

; 210  :     }
; 211  : 
; 212  :     if (hFile != NULL)

  0008a	48 83 7c 24 20
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00090	74 4a		 je	 SHORT $LN3@win32_seek

; 213  :     {
; 214  :         DWORD dwSet = SetFilePointer(hFile, offset, NULL, dwMoveMethod);

  00092	44 8b 4c 24 2c	 mov	 r9d, DWORD PTR dwMoveMethod$[rsp]
  00097	45 33 c0	 xor	 r8d, r8d
  0009a	8b 54 24 60	 mov	 edx, DWORD PTR offset$[rsp]
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hFile$[rsp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  000a9	89 44 24 30	 mov	 DWORD PTR dwSet$78227[rsp], eax

; 215  :         if (dwSet == INVALID_SET_FILE_POINTER)

  000ad	83 7c 24 30 ff	 cmp	 DWORD PTR dwSet$78227[rsp], -1 ; ffffffffH
  000b2	75 20		 jne	 SHORT $LN2@win32_seek

; 216  :         {
; 217  :             DWORD dwErr = GetLastError();

  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000ba	89 44 24 34	 mov	 DWORD PTR dwErr$78231[rsp], eax

; 218  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000be	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  000c3	8b 44 24 34	 mov	 eax, DWORD PTR dwErr$78231[rsp]
  000c7	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 219  :             ret = -1;

  000ca	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 220  :         }
; 221  :         else

  000d2	eb 08		 jmp	 SHORT $LN1@win32_seek
$LN2@win32_seek:

; 222  :             ret=0;

  000d4	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN1@win32_seek:
$LN3@win32_seek:

; 223  :     }
; 224  :     return ret;

  000dc	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]
$LN11@win32_seek:

; 225  : }

  000e0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e4	c3		 ret	 0
win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_tell_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_tell_file_func DD imagerel $LN7
	DD	imagerel $LN7+142
	DD	imagerel $unwind$win32_tell_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_tell_file_func DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_tell_file_func
_TEXT	SEGMENT
hFile$ = 32
ret$ = 40
dwSet$78195 = 44
dwErr$78199 = 48
opaque$ = 80
stream$ = 88
win32_tell_file_func PROC				; COMDAT

; 166  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  :     long ret=-1;

  0000e	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 168  :     HANDLE hFile = NULL;

  00016	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 169  :     if (stream!=NULL)

  0001f	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00025	74 0d		 je	 SHORT $LN4@win32_tell

; 170  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00027	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 89 44 24 20	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_tell:

; 171  :     if (hFile != NULL)

  00034	48 83 7c 24 20
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  0003a	74 49		 je	 SHORT $LN3@win32_tell

; 172  :     {
; 173  :         DWORD dwSet = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);

  0003c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00042	45 33 c0	 xor	 r8d, r8d
  00045	33 d2		 xor	 edx, edx
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hFile$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  00052	89 44 24 2c	 mov	 DWORD PTR dwSet$78195[rsp], eax

; 174  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00056	83 7c 24 2c ff	 cmp	 DWORD PTR dwSet$78195[rsp], -1 ; ffffffffH
  0005b	75 20		 jne	 SHORT $LN2@win32_tell

; 175  :         {
; 176  :             DWORD dwErr = GetLastError();

  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00063	89 44 24 30	 mov	 DWORD PTR dwErr$78199[rsp], eax

; 177  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  0006c	8b 44 24 30	 mov	 eax, DWORD PTR dwErr$78199[rsp]
  00070	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 178  :             ret = -1;

  00073	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 179  :         }
; 180  :         else

  0007b	eb 08		 jmp	 SHORT $LN1@win32_tell
$LN2@win32_tell:

; 181  :             ret=(long)dwSet;

  0007d	8b 44 24 2c	 mov	 eax, DWORD PTR dwSet$78195[rsp]
  00081	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax
$LN1@win32_tell:
$LN3@win32_tell:

; 182  :     }
; 183  :     return ret;

  00085	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]

; 184  : }

  00089	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008d	c3		 ret	 0
win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_write_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_write_file_func DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$win32_write_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_write_file_func DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_write_file_func
_TEXT	SEGMENT
hFile$ = 48
ret$ = 56
dwErr$78179 = 60
opaque$ = 80
stream$ = 88
buf$ = 96
size$ = 104
win32_write_file_func PROC				; COMDAT

; 145  : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 146  :     uLong ret=0;

  00018	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 147  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 148  :     if (stream!=NULL)

  00029	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0002f	74 0d		 je	 SHORT $LN4@win32_writ

; 149  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00031	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 44 24 30	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_writ:

; 150  : 
; 151  :     if (hFile !=NULL)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00044	74 4c		 je	 SHORT $LN3@win32_writ

; 152  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00046	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004f	4c 8d 4c 24 38	 lea	 r9, QWORD PTR ret$[rsp]
  00054	44 8b 44 24 68	 mov	 r8d, DWORD PTR size$[rsp]
  00059	48 8b 54 24 60	 mov	 rdx, QWORD PTR buf$[rsp]
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hFile$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  00069	85 c0		 test	 eax, eax
  0006b	75 25		 jne	 SHORT $LN2@win32_writ

; 153  :         {
; 154  :             DWORD dwErr = GetLastError();

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00073	89 44 24 3c	 mov	 DWORD PTR dwErr$78179[rsp], eax

; 155  :             if (dwErr == ERROR_HANDLE_EOF)

  00077	83 7c 24 3c 26	 cmp	 DWORD PTR dwErr$78179[rsp], 38 ; 00000026H
  0007c	75 08		 jne	 SHORT $LN1@win32_writ

; 156  :                 dwErr = 0;

  0007e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR dwErr$78179[rsp], 0
$LN1@win32_writ:

; 157  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00086	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  0008b	8b 44 24 3c	 mov	 eax, DWORD PTR dwErr$78179[rsp]
  0008f	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN2@win32_writ:
$LN3@win32_writ:

; 158  :         }
; 159  : 
; 160  :     return ret;

  00092	8b 44 24 38	 mov	 eax, DWORD PTR ret$[rsp]

; 161  : }

  00096	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009a	c3		 ret	 0
win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_read_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_read_file_func DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$win32_read_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_read_file_func DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_read_file_func
_TEXT	SEGMENT
hFile$ = 48
ret$ = 56
dwErr$78159 = 60
opaque$ = 80
stream$ = 88
buf$ = 96
size$ = 104
win32_read_file_func PROC				; COMDAT

; 122  : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 123  :     uLong ret=0;

  00018	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 124  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 125  :     if (stream!=NULL)

  00029	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0002f	74 0d		 je	 SHORT $LN4@win32_read

; 126  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00031	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 44 24 30	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_read:

; 127  :     if (hFile != NULL)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00044	74 4c		 je	 SHORT $LN3@win32_read

; 128  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00046	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004f	4c 8d 4c 24 38	 lea	 r9, QWORD PTR ret$[rsp]
  00054	44 8b 44 24 68	 mov	 r8d, DWORD PTR size$[rsp]
  00059	48 8b 54 24 60	 mov	 rdx, QWORD PTR buf$[rsp]
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hFile$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  00069	85 c0		 test	 eax, eax
  0006b	75 25		 jne	 SHORT $LN2@win32_read

; 129  :         {
; 130  :             DWORD dwErr = GetLastError();

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00073	89 44 24 3c	 mov	 DWORD PTR dwErr$78159[rsp], eax

; 131  :             if (dwErr == ERROR_HANDLE_EOF)

  00077	83 7c 24 3c 26	 cmp	 DWORD PTR dwErr$78159[rsp], 38 ; 00000026H
  0007c	75 08		 jne	 SHORT $LN1@win32_read

; 132  :                 dwErr = 0;

  0007e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR dwErr$78159[rsp], 0
$LN1@win32_read:

; 133  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00086	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  0008b	8b 44 24 3c	 mov	 eax, DWORD PTR dwErr$78159[rsp]
  0008f	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN2@win32_read:
$LN3@win32_read:

; 134  :         }
; 135  : 
; 136  :     return ret;

  00092	8b 44 24 38	 mov	 eax, DWORD PTR ret$[rsp]

; 137  : }

  00096	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009a	c3		 ret	 0
win32_read_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_open_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open_file_func DD imagerel $LN13
	DD	imagerel $LN13+364
	DD	imagerel $unwind$win32_open_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open_file_func DD 041801H
	DD	0110118H
	DD	060107011H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_open_file_func
_TEXT	SEGMENT
dwShareMode$ = 64
hFile$ = 72
dwFlagsAndAttributes$ = 80
dwCreationDisposition$ = 84
ret$ = 88
dwDesiredAccess$ = 96
mode_fopen$ = 104
w32fiow$78137 = 112
opaque$ = 160
filename$ = 168
mode$ = 176
win32_open_file_func PROC				; COMDAT

; 69   : {

$LN13:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 70   :     const char* mode_fopen = NULL;

  00018	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 71   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 72   :     HANDLE hFile = 0;

  00021	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 73   :     voidpf ret=NULL;

  0002a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 74   : 
; 75   :     dwDesiredAccess = dwShareMode = dwFlagsAndAttributes = 0;

  00033	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR dwFlagsAndAttributes$[rsp], 0
  0003b	8b 44 24 50	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  0003f	89 44 24 40	 mov	 DWORD PTR dwShareMode$[rsp], eax
  00043	8b 44 24 40	 mov	 eax, DWORD PTR dwShareMode$[rsp]
  00047	89 44 24 60	 mov	 DWORD PTR dwDesiredAccess$[rsp], eax

; 76   : 
; 77   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  0004b	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR mode$[rsp]
  00052	83 e0 03	 and	 eax, 3
  00055	83 f8 01	 cmp	 eax, 1
  00058	75 1a		 jne	 SHORT $LN10@win32_open

; 78   :     {
; 79   :         dwDesiredAccess = GENERIC_READ;

  0005a	c7 44 24 60 00
	00 00 80	 mov	 DWORD PTR dwDesiredAccess$[rsp], -2147483648 ; 80000000H

; 80   :         dwCreationDisposition = OPEN_EXISTING;

  00062	c7 44 24 54 03
	00 00 00	 mov	 DWORD PTR dwCreationDisposition$[rsp], 3

; 81   :         dwShareMode = FILE_SHARE_READ;

  0006a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR dwShareMode$[rsp], 1

; 82   :     }
; 83   :     else

  00072	eb 3e		 jmp	 SHORT $LN9@win32_open
$LN10@win32_open:

; 84   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00074	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR mode$[rsp]
  0007b	83 e0 04	 and	 eax, 4
  0007e	85 c0		 test	 eax, eax
  00080	74 12		 je	 SHORT $LN8@win32_open

; 85   :     {
; 86   :         dwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00082	c7 44 24 60 00
	00 00 c0	 mov	 DWORD PTR dwDesiredAccess$[rsp], -1073741824 ; c0000000H

; 87   :         dwCreationDisposition = OPEN_EXISTING;

  0008a	c7 44 24 54 03
	00 00 00	 mov	 DWORD PTR dwCreationDisposition$[rsp], 3

; 88   :     }
; 89   :     else

  00092	eb 1e		 jmp	 SHORT $LN7@win32_open
$LN8@win32_open:

; 90   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00094	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR mode$[rsp]
  0009b	83 e0 08	 and	 eax, 8
  0009e	85 c0		 test	 eax, eax
  000a0	74 10		 je	 SHORT $LN6@win32_open

; 91   :     {
; 92   :         dwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  000a2	c7 44 24 60 00
	00 00 c0	 mov	 DWORD PTR dwDesiredAccess$[rsp], -1073741824 ; c0000000H

; 93   :         dwCreationDisposition = CREATE_ALWAYS;

  000aa	c7 44 24 54 02
	00 00 00	 mov	 DWORD PTR dwCreationDisposition$[rsp], 2
$LN6@win32_open:
$LN7@win32_open:
$LN9@win32_open:

; 94   :     }
; 95   : 
; 96   :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  000b2	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  000bb	74 3f		 je	 SHORT $LN5@win32_open
  000bd	83 7c 24 60 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  000c2	74 38		 je	 SHORT $LN5@win32_open

; 97   :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL,
; 98   :                       dwCreationDisposition, dwFlagsAndAttributes, NULL);

  000c4	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  000cd	8b 44 24 50	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  000d1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000d5	8b 44 24 54	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  000d9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000dd	45 33 c9	 xor	 r9d, r9d
  000e0	44 8b 44 24 40	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  000e5	8b 54 24 60	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  000e9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  000f7	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN5@win32_open:

; 99   : 
; 100  :     if (hFile == INVALID_HANDLE_VALUE)

  000fc	48 83 7c 24 48
	ff		 cmp	 QWORD PTR hFile$[rsp], -1
  00102	75 09		 jne	 SHORT $LN4@win32_open

; 101  :         hFile = NULL;

  00104	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0
$LN4@win32_open:

; 102  : 
; 103  :     if (hFile != NULL)

  0010d	48 83 7c 24 48
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00113	74 48		 je	 SHORT $LN3@win32_open

; 104  :     {
; 105  :         WIN32FILE_IOWIN w32fiow;
; 106  :         w32fiow.hf = hFile;

  00115	48 8b 44 24 48	 mov	 rax, QWORD PTR hFile$[rsp]
  0011a	48 89 44 24 70	 mov	 QWORD PTR w32fiow$78137[rsp], rax

; 107  :         w32fiow.error = 0;

  0011f	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR w32fiow$78137[rsp+8], 0

; 108  :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00127	b9 10 00 00 00	 mov	 ecx, 16
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00132	48 89 44 24 58	 mov	 QWORD PTR ret$[rsp], rax

; 109  :         if (ret==NULL)

  00137	48 83 7c 24 58
	00		 cmp	 QWORD PTR ret$[rsp], 0
  0013d	75 0d		 jne	 SHORT $LN2@win32_open

; 110  :             CloseHandle(hFile);

  0013f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
  0014a	eb 11		 jmp	 SHORT $LN1@win32_open
$LN2@win32_open:

; 111  :         else *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0014c	48 8d 74 24 70	 lea	 rsi, QWORD PTR w32fiow$78137[rsp]
  00151	48 8b 7c 24 58	 mov	 rdi, QWORD PTR ret$[rsp]
  00156	b9 10 00 00 00	 mov	 ecx, 16
  0015b	f3 a4		 rep movsb
$LN1@win32_open:
$LN3@win32_open:

; 112  :     }
; 113  :     return ret;

  0015d	48 8b 44 24 58	 mov	 rax, QWORD PTR ret$[rsp]

; 114  : }

  00162	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00169	5f		 pop	 rdi
  0016a	5e		 pop	 rsi
  0016b	c3		 ret	 0
win32_open_file_func ENDP
PUBLIC	fill_win32_filefunc
; Function compile flags: /Odtp
;	COMDAT fill_win32_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_win32_filefunc PROC				; COMDAT

; 261  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 262  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_open_file_func
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 263  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_read_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 264  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_write_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 265  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_tell_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 266  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_seek_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 267  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_close_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 268  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_error_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 269  :     pzlib_filefunc_def->opaque=NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 270  : }

  00081	c3		 ret	 0
fill_win32_filefunc ENDP
END
