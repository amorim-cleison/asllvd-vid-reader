; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb?$AA@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb?$AA@ DB 'r+b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
PUBLIC	ferror_file_func
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\contrib\minizip\ioapi.c
pdata	SEGMENT
$pdata$ferror_file_func DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$ferror_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ferror_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ferror_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ferror_file_func PROC					; COMDAT

; 160  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 161  :     int ret;
; 162  :     ret = ferror((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  00019	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 163  :     return ret;

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 164  : }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
ferror_file_func ENDP
_TEXT	ENDS
PUBLIC	fclose_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$fclose_file_func DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$fclose_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fclose_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fclose_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
fclose_file_func PROC					; COMDAT

; 151  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 152  :     int ret;
; 153  :     ret = fclose((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
  00019	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 154  :     return ret;

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 155  : }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
fclose_file_func ENDP
_TEXT	ENDS
PUBLIC	fseek_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek_file_func DD imagerel $LN9
	DD	imagerel $LN9+137
	DD	imagerel $unwind$fseek_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fseek_file_func
_TEXT	SEGMENT
fseek_origin$ = 32
ret$ = 36
tv64 = 40
opaque$ = 64
stream$ = 72
offset$ = 80
origin$ = 88
fseek_file_func PROC					; COMDAT

; 127  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 128  :     int fseek_origin=0;

  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 129  :     long ret;
; 130  :     switch (origin)

  00020	8b 44 24 58	 mov	 eax, DWORD PTR origin$[rsp]
  00024	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00028	83 7c 24 28 00	 cmp	 DWORD PTR tv64[rsp], 0
  0002d	74 24		 je	 SHORT $LN2@fseek_file
  0002f	83 7c 24 28 01	 cmp	 DWORD PTR tv64[rsp], 1
  00034	74 09		 je	 SHORT $LN4@fseek_file
  00036	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  0003b	74 0c		 je	 SHORT $LN3@fseek_file
  0003d	eb 1e		 jmp	 SHORT $LN1@fseek_file
$LN4@fseek_file:

; 131  :     {
; 132  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 133  :         fseek_origin = SEEK_CUR;

  0003f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 1

; 134  :         break;

  00047	eb 1b		 jmp	 SHORT $LN5@fseek_file
$LN3@fseek_file:

; 135  :     case ZLIB_FILEFUNC_SEEK_END :
; 136  :         fseek_origin = SEEK_END;

  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 2

; 137  :         break;

  00051	eb 11		 jmp	 SHORT $LN5@fseek_file
$LN2@fseek_file:

; 138  :     case ZLIB_FILEFUNC_SEEK_SET :
; 139  :         fseek_origin = SEEK_SET;

  00053	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 140  :         break;

  0005b	eb 07		 jmp	 SHORT $LN5@fseek_file
$LN1@fseek_file:

; 141  :     default: return -1;

  0005d	b8 ff ff ff ff	 mov	 eax, -1
  00062	eb 20		 jmp	 SHORT $LN7@fseek_file
$LN5@fseek_file:

; 142  :     }
; 143  :     ret = 0;

  00064	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 144  :     fseek((FILE *)stream, offset, fseek_origin);

  0006c	44 8b 44 24 20	 mov	 r8d, DWORD PTR fseek_origin$[rsp]
  00071	8b 54 24 50	 mov	 edx, DWORD PTR offset$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek

; 145  :     return ret;

  00080	8b 44 24 24	 mov	 eax, DWORD PTR ret$[rsp]
$LN7@fseek_file:

; 146  : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
fseek_file_func ENDP
_TEXT	ENDS
PUBLIC	ftell_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$ftell_file_func DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$ftell_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ftell_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ftell_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ftell_file_func PROC					; COMDAT

; 116  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 117  :     long ret;
; 118  :     ret = ftell((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ftell
  00019	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 119  :     return ret;

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 120  : }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
ftell_file_func ENDP
_TEXT	ENDS
PUBLIC	fwrite_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$fwrite_file_func DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$fwrite_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fwrite_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fwrite_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
buf$ = 80
size$ = 88
fwrite_file_func PROC					; COMDAT

; 107  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 108  :     uLong ret;
; 109  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00018	44 8b 44 24 58	 mov	 r8d, DWORD PTR size$[rsp]
  0001d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR stream$[rsp]
  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00032	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 110  :     return ret;

  00036	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 111  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
fwrite_file_func ENDP
_TEXT	ENDS
PUBLIC	fread_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$fread_file_func DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$fread_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fread_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fread_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
buf$ = 80
size$ = 88
fread_file_func PROC					; COMDAT

; 95   : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 96   :     uLong ret;
; 97   :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00018	44 8b 44 24 58	 mov	 r8d, DWORD PTR size$[rsp]
  0001d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR stream$[rsp]
  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00032	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 98   :     return ret;

  00036	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 99   : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
fread_file_func ENDP
_TEXT	ENDS
PUBLIC	fopen_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$fopen_file_func DD imagerel $LN9
	DD	imagerel $LN9+158
	DD	imagerel $unwind$fopen_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fopen_file_func DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fopen_file_func
_TEXT	SEGMENT
file$ = 32
mode_fopen$ = 40
opaque$ = 64
filename$ = 72
mode$ = 80
fopen_file_func PROC					; COMDAT

; 72   : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 73   :     FILE* file = NULL;

  00013	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR file$[rsp], 0

; 74   :     const char* mode_fopen = NULL;

  0001c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 75   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00025	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00029	83 e0 03	 and	 eax, 3
  0002c	83 f8 01	 cmp	 eax, 1
  0002f	75 0e		 jne	 SHORT $LN6@fopen_file

; 76   :         mode_fopen = "rb";

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00038	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax

; 77   :     else

  0003d	eb 30		 jmp	 SHORT $LN5@fopen_file
$LN6@fopen_file:

; 78   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0003f	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00043	83 e0 04	 and	 eax, 4
  00046	85 c0		 test	 eax, eax
  00048	74 0e		 je	 SHORT $LN4@fopen_file

; 79   :         mode_fopen = "r+b";

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb?$AA@
  00051	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax

; 80   :     else

  00056	eb 17		 jmp	 SHORT $LN3@fopen_file
$LN4@fopen_file:

; 81   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00058	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0005c	83 e0 08	 and	 eax, 8
  0005f	85 c0		 test	 eax, eax
  00061	74 0c		 je	 SHORT $LN2@fopen_file

; 82   :         mode_fopen = "wb";

  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
  0006a	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
$LN2@fopen_file:
$LN3@fopen_file:
$LN5@fopen_file:

; 83   : 
; 84   :     if ((filename!=NULL) && (mode_fopen != NULL))

  0006f	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00075	74 1d		 je	 SHORT $LN1@fopen_file
  00077	48 83 7c 24 28
	00		 cmp	 QWORD PTR mode_fopen$[rsp], 0
  0007d	74 15		 je	 SHORT $LN1@fopen_file

; 85   :         file = fopen(filename, mode_fopen);

  0007f	48 8b 54 24 28	 mov	 rdx, QWORD PTR mode_fopen$[rsp]
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0008f	48 89 44 24 20	 mov	 QWORD PTR file$[rsp], rax
$LN1@fopen_file:

; 86   :     return file;

  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]

; 87   : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
fopen_file_func ENDP
PUBLIC	fill_fopen_filefunc
; Function compile flags: /Odtp
;	COMDAT fill_fopen_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_fopen_filefunc PROC				; COMDAT

; 168  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 169  :     pzlib_filefunc_def->zopen_file = fopen_file_func;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fopen_file_func
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 170  :     pzlib_filefunc_def->zread_file = fread_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fread_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 171  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fwrite_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 172  :     pzlib_filefunc_def->ztell_file = ftell_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ftell_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 173  :     pzlib_filefunc_def->zseek_file = fseek_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fseek_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 174  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fclose_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 175  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ferror_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 176  :     pzlib_filefunc_def->opaque = NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 177  : }

  00081	c3		 ret	 0
fill_fopen_filefunc ENDP
END
