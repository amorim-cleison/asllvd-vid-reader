; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BF@CJFPCCEG@incompatible?5version?$AA@	; `string'
PUBLIC	??_C@_0N@DFPGLBGC@buffer?5error?$AA@		; `string'
PUBLIC	??_C@_0BE@OGGJBMCE@insufficient?5memory?$AA@	; `string'
PUBLIC	??_C@_0L@HAHMBNLP@data?5error?$AA@		; `string'
PUBLIC	??_C@_0N@MKKNPMJD@stream?5error?$AA@		; `string'
PUBLIC	??_C@_0L@KIJFAKBJ@file?5error?$AA@		; `string'
PUBLIC	??_C@_0L@FNAOCBOG@stream?5end?$AA@		; `string'
PUBLIC	??_C@_0BA@MOKMMFOD@need?5dictionary?$AA@	; `string'
PUBLIC	z_errmsg
z_errmsg DQ	FLAT:??_C@_0BA@MOKMMFOD@need?5dictionary?$AA@
	DQ	FLAT:??_C@_0L@FNAOCBOG@stream?5end?$AA@
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0L@KIJFAKBJ@file?5error?$AA@
	DQ	FLAT:??_C@_0N@MKKNPMJD@stream?5error?$AA@
	DQ	FLAT:??_C@_0L@HAHMBNLP@data?5error?$AA@
	DQ	FLAT:??_C@_0BE@OGGJBMCE@insufficient?5memory?$AA@
	DQ	FLAT:??_C@_0N@DFPGLBGC@buffer?5error?$AA@
	DQ	FLAT:??_C@_0BF@CJFPCCEG@incompatible?5version?$AA@
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
;	COMDAT ??_C@_0BF@CJFPCCEG@incompatible?5version?$AA@
CONST	SEGMENT
??_C@_0BF@CJFPCCEG@incompatible?5version?$AA@ DB 'incompatible version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFPGLBGC@buffer?5error?$AA@
CONST	SEGMENT
??_C@_0N@DFPGLBGC@buffer?5error?$AA@ DB 'buffer error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OGGJBMCE@insufficient?5memory?$AA@
CONST	SEGMENT
??_C@_0BE@OGGJBMCE@insufficient?5memory?$AA@ DB 'insufficient memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAHMBNLP@data?5error?$AA@
CONST	SEGMENT
??_C@_0L@HAHMBNLP@data?5error?$AA@ DB 'data error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKKNPMJD@stream?5error?$AA@
CONST	SEGMENT
??_C@_0N@MKKNPMJD@stream?5error?$AA@ DB 'stream error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KIJFAKBJ@file?5error?$AA@
CONST	SEGMENT
??_C@_0L@KIJFAKBJ@file?5error?$AA@ DB 'file error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNAOCBOG@stream?5end?$AA@
CONST	SEGMENT
??_C@_0L@FNAOCBOG@stream?5end?$AA@ DB 'stream end', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOKMMFOD@need?5dictionary?$AA@
CONST	SEGMENT
??_C@_0BA@MOKMMFOD@need?5dictionary?$AA@ DB 'need dictionary', 00H ; `string'
CONST	ENDS
PUBLIC	zcfree
;	COMDAT pdata
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\zutil.c
pdata	SEGMENT
$pdata$zcfree DD imagerel $LN4
	DD	imagerel $LN4+30
	DD	imagerel $unwind$zcfree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zcfree DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zcfree
_TEXT	SEGMENT
opaque$ = 48
ptr$ = 56
zcfree	PROC						; COMDAT

; 313  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 314  :     free(ptr);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ptr$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 315  :     if (opaque) return; /* make compiler happy */
; 316  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
zcfree	ENDP
_TEXT	ENDS
PUBLIC	zcalloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$zcalloc DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$zcalloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zcalloc DD 011201H
	DD	04212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zcalloc
_TEXT	SEGMENT
opaque$ = 48
items$ = 56
size$ = 64
zcalloc	PROC						; COMDAT

; 304  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 305  :     if (opaque) items += size - size; /* make compiler happy */

  00012	48 83 7c 24 30
	00		 cmp	 QWORD PTR opaque$[rsp], 0
  00018	74 14		 je	 SHORT $LN1@zcalloc
  0001a	8b 44 24 40	 mov	 eax, DWORD PTR size$[rsp]
  0001e	8b 4c 24 40	 mov	 ecx, DWORD PTR size$[rsp]
  00022	2b c8		 sub	 ecx, eax
  00024	8b 44 24 38	 mov	 eax, DWORD PTR items$[rsp]
  00028	03 c1		 add	 eax, ecx
  0002a	89 44 24 38	 mov	 DWORD PTR items$[rsp], eax
$LN1@zcalloc:

; 306  :     return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
; 307  :                               (voidpf)calloc(items, size);

  0002e	8b 44 24 38	 mov	 eax, DWORD PTR items$[rsp]
  00032	0f af 44 24 40	 imul	 eax, DWORD PTR size$[rsp]
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 308  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
zcalloc	ENDP
_TEXT	ENDS
PUBLIC	zError
; Function compile flags: /Odtp
;	COMDAT zError
_TEXT	SEGMENT
err$ = 8
zError	PROC						; COMDAT

; 135  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 136  :     return ERR_MSG(err);

  00004	b8 02 00 00 00	 mov	 eax, 2
  00009	2b 44 24 08	 sub	 eax, DWORD PTR err$[rsp]
  0000d	48 63 c8	 movsxd	 rcx, eax
  00010	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z_errmsg
  00017	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 137  : }

  0001b	c3		 ret	 0
zError	ENDP
_TEXT	ENDS
PUBLIC	zlibCompileFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$zlibCompileFlags DD imagerel $LN27
	DD	imagerel $LN27+306
	DD	imagerel $unwind$zlibCompileFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zlibCompileFlags DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zlibCompileFlags
_TEXT	SEGMENT
flags$ = 0
tv64 = 8
tv71 = 16
tv78 = 24
tv85 = 32
zlibCompileFlags PROC					; COMDAT

; 33   : {

$LN27:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 34   :     uLong flags;
; 35   : 
; 36   :     flags = 0;

  00004	c7 04 24 00 00
	00 00		 mov	 DWORD PTR flags$[rsp], 0

; 37   :     switch (sizeof(uInt)) {

  0000b	48 c7 44 24 08
	04 00 00 00	 mov	 QWORD PTR tv64[rsp], 4
  00014	48 83 7c 24 08
	02		 cmp	 QWORD PTR tv64[rsp], 2
  0001a	74 12		 je	 SHORT $LN22@zlibCompil
  0001c	48 83 7c 24 08
	04		 cmp	 QWORD PTR tv64[rsp], 4
  00022	74 0c		 je	 SHORT $LN21@zlibCompil
  00024	48 83 7c 24 08
	08		 cmp	 QWORD PTR tv64[rsp], 8
  0002a	74 0f		 je	 SHORT $LN20@zlibCompil
  0002c	eb 18		 jmp	 SHORT $LN19@zlibCompil
$LN22@zlibCompil:

; 38   :     case 2:     break;

  0002e	eb 1f		 jmp	 SHORT $LN23@zlibCompil
$LN21@zlibCompil:

; 39   :     case 4:     flags += 1;     break;

  00030	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  00039	eb 14		 jmp	 SHORT $LN23@zlibCompil
$LN20@zlibCompil:

; 40   :     case 8:     flags += 2;     break;

  0003b	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  0003e	83 c0 02	 add	 eax, 2
  00041	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  00044	eb 09		 jmp	 SHORT $LN23@zlibCompil
$LN19@zlibCompil:

; 41   :     default:    flags += 3;

  00046	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  00049	83 c0 03	 add	 eax, 3
  0004c	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
$LN23@zlibCompil:

; 42   :     }
; 43   :     switch (sizeof(uLong)) {

  0004f	48 c7 44 24 10
	04 00 00 00	 mov	 QWORD PTR tv71[rsp], 4
  00058	48 83 7c 24 10
	02		 cmp	 QWORD PTR tv71[rsp], 2
  0005e	74 12		 je	 SHORT $LN16@zlibCompil
  00060	48 83 7c 24 10
	04		 cmp	 QWORD PTR tv71[rsp], 4
  00066	74 0c		 je	 SHORT $LN15@zlibCompil
  00068	48 83 7c 24 10
	08		 cmp	 QWORD PTR tv71[rsp], 8
  0006e	74 0f		 je	 SHORT $LN14@zlibCompil
  00070	eb 18		 jmp	 SHORT $LN13@zlibCompil
$LN16@zlibCompil:

; 44   :     case 2:     break;

  00072	eb 1f		 jmp	 SHORT $LN17@zlibCompil
$LN15@zlibCompil:

; 45   :     case 4:     flags += 1 << 2;        break;

  00074	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  00077	83 c0 04	 add	 eax, 4
  0007a	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  0007d	eb 14		 jmp	 SHORT $LN17@zlibCompil
$LN14@zlibCompil:

; 46   :     case 8:     flags += 2 << 2;        break;

  0007f	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  00082	83 c0 08	 add	 eax, 8
  00085	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  00088	eb 09		 jmp	 SHORT $LN17@zlibCompil
$LN13@zlibCompil:

; 47   :     default:    flags += 3 << 2;

  0008a	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  0008d	83 c0 0c	 add	 eax, 12
  00090	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
$LN17@zlibCompil:

; 48   :     }
; 49   :     switch (sizeof(voidpf)) {

  00093	48 c7 44 24 18
	08 00 00 00	 mov	 QWORD PTR tv78[rsp], 8
  0009c	48 83 7c 24 18
	02		 cmp	 QWORD PTR tv78[rsp], 2
  000a2	74 12		 je	 SHORT $LN10@zlibCompil
  000a4	48 83 7c 24 18
	04		 cmp	 QWORD PTR tv78[rsp], 4
  000aa	74 0c		 je	 SHORT $LN9@zlibCompil
  000ac	48 83 7c 24 18
	08		 cmp	 QWORD PTR tv78[rsp], 8
  000b2	74 0f		 je	 SHORT $LN8@zlibCompil
  000b4	eb 18		 jmp	 SHORT $LN7@zlibCompil
$LN10@zlibCompil:

; 50   :     case 2:     break;

  000b6	eb 1f		 jmp	 SHORT $LN11@zlibCompil
$LN9@zlibCompil:

; 51   :     case 4:     flags += 1 << 4;        break;

  000b8	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  000bb	83 c0 10	 add	 eax, 16
  000be	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  000c1	eb 14		 jmp	 SHORT $LN11@zlibCompil
$LN8@zlibCompil:

; 52   :     case 8:     flags += 2 << 4;        break;

  000c3	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  000c6	83 c0 20	 add	 eax, 32			; 00000020H
  000c9	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  000cc	eb 09		 jmp	 SHORT $LN11@zlibCompil
$LN7@zlibCompil:

; 53   :     default:    flags += 3 << 4;

  000ce	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  000d1	83 c0 30	 add	 eax, 48			; 00000030H
  000d4	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
$LN11@zlibCompil:

; 54   :     }
; 55   :     switch (sizeof(z_off_t)) {

  000d7	48 c7 44 24 20
	04 00 00 00	 mov	 QWORD PTR tv85[rsp], 4
  000e0	48 83 7c 24 20
	02		 cmp	 QWORD PTR tv85[rsp], 2
  000e6	74 12		 je	 SHORT $LN4@zlibCompil
  000e8	48 83 7c 24 20
	04		 cmp	 QWORD PTR tv85[rsp], 4
  000ee	74 0c		 je	 SHORT $LN3@zlibCompil
  000f0	48 83 7c 24 20
	08		 cmp	 QWORD PTR tv85[rsp], 8
  000f6	74 0f		 je	 SHORT $LN2@zlibCompil
  000f8	eb 1a		 jmp	 SHORT $LN1@zlibCompil
$LN4@zlibCompil:

; 56   :     case 2:     break;

  000fa	eb 23		 jmp	 SHORT $LN5@zlibCompil
$LN3@zlibCompil:

; 57   :     case 4:     flags += 1 << 6;        break;

  000fc	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  000ff	83 c0 40	 add	 eax, 64			; 00000040H
  00102	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  00105	eb 18		 jmp	 SHORT $LN5@zlibCompil
$LN2@zlibCompil:

; 58   :     case 8:     flags += 2 << 6;        break;

  00107	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  0010a	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0010f	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
  00112	eb 0b		 jmp	 SHORT $LN5@zlibCompil
$LN1@zlibCompil:

; 59   :     default:    flags += 3 << 6;

  00114	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  00117	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  0011c	89 04 24	 mov	 DWORD PTR flags$[rsp], eax
$LN5@zlibCompil:

; 60   :     }
; 61   : #ifdef DEBUG
; 62   :     flags += 1 << 8;
; 63   : #endif
; 64   : #if defined(ASMV) || defined(ASMINF)
; 65   :     flags += 1 << 9;
; 66   : #endif
; 67   : #ifdef ZLIB_WINAPI
; 68   :     flags += 1 << 10;

  0011f	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]
  00122	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00127	89 04 24	 mov	 DWORD PTR flags$[rsp], eax

; 69   : #endif
; 70   : #ifdef BUILDFIXED
; 71   :     flags += 1 << 12;
; 72   : #endif
; 73   : #ifdef DYNAMIC_CRC_TABLE
; 74   :     flags += 1 << 13;
; 75   : #endif
; 76   : #ifdef NO_GZCOMPRESS
; 77   :     flags += 1L << 16;
; 78   : #endif
; 79   : #ifdef NO_GZIP
; 80   :     flags += 1L << 17;
; 81   : #endif
; 82   : #ifdef PKZIP_BUG_WORKAROUND
; 83   :     flags += 1L << 20;
; 84   : #endif
; 85   : #ifdef FASTEST
; 86   :     flags += 1L << 21;
; 87   : #endif
; 88   : #ifdef STDC
; 89   : #  ifdef NO_vsnprintf
; 90   :         flags += 1L << 25;
; 91   : #    ifdef HAS_vsprintf_void
; 92   :         flags += 1L << 26;
; 93   : #    endif
; 94   : #  else
; 95   : #    ifdef HAS_vsnprintf_void
; 96   :         flags += 1L << 26;
; 97   : #    endif
; 98   : #  endif
; 99   : #else
; 100  :         flags += 1L << 24;
; 101  : #  ifdef NO_snprintf
; 102  :         flags += 1L << 25;
; 103  : #    ifdef HAS_sprintf_void
; 104  :         flags += 1L << 26;
; 105  : #    endif
; 106  : #  else
; 107  : #    ifdef HAS_snprintf_void
; 108  :         flags += 1L << 26;
; 109  : #    endif
; 110  : #  endif
; 111  : #endif
; 112  :     return flags;

  0012a	8b 04 24	 mov	 eax, DWORD PTR flags$[rsp]

; 113  : }

  0012d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00131	c3		 ret	 0
zlibCompileFlags ENDP
_TEXT	ENDS
PUBLIC	zlibVersion
; Function compile flags: /Odtp
;	COMDAT zlibVersion
_TEXT	SEGMENT
zlibVersion PROC					; COMDAT

; 29   :     return ZLIB_VERSION;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05GDHACFMB@1?42?43?$AA@

; 30   : }

  00007	c3		 ret	 0
zlibVersion ENDP
END
