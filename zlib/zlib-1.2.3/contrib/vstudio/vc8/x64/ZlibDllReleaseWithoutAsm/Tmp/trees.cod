; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	_dist_code
PUBLIC	_length_code
static_l_desc DQ FLAT:static_ltree
	DQ	FLAT:extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
	ORG $+4
static_d_desc DQ FLAT:static_dtree
	DQ	FLAT:extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
	ORG $+4
static_bl_desc DQ 0000000000000000H
	DQ	FLAT:extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
	ORG $+15
extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+6
extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+5
extra_blbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
static_ltree DW	0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
static_dtree DW	00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
	ORG $+2
_dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_length_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+12
base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
; Function compile flags: /Odtp
; File y:\asl\software\video_compressor\vid_reader\zlib\zlib-1.2.3\trees.c
;	COMDAT bi_windup
_TEXT	SEGMENT
s$ = 8
bi_windup PROC						; COMDAT

; 1180 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1181 :     if (s->bi_valid > 8) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0000a	83 b8 14 17 00
	00 08		 cmp	 DWORD PTR [rax+5908], 8
  00011	7e 71		 jle	 SHORT $LN3@bi_windup

; 1182 :         put_short(s, s->bi_buf);

  00013	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00018	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0001f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0002a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0002d	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00032	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00036	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00039	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0003e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00041	83 c1 01	 add	 ecx, 1
  00044	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00049	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0004c	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00051	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00058	c1 fa 08	 sar	 edx, 8
  0005b	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00060	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00063	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0006f	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00074	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00077	83 c1 01	 add	 ecx, 1
  0007a	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0007f	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00082	eb 41		 jmp	 SHORT $LN2@bi_windup
$LN3@bi_windup:

; 1183 :     } else if (s->bi_valid > 0) {

  00084	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00089	83 b8 14 17 00
	00 00		 cmp	 DWORD PTR [rax+5908], 0
  00090	7e 33		 jle	 SHORT $LN1@bi_windup

; 1184 :         put_byte(s, (Byte)s->bi_buf);

  00092	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00097	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  0009a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0009f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000a8	0f b6 80 10 17
	00 00		 movzx	 eax, BYTE PTR [rax+5904]
  000af	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000b2	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000b7	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000ba	83 c1 01	 add	 ecx, 1
  000bd	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000c2	89 48 28	 mov	 DWORD PTR [rax+40], ecx
$LN1@bi_windup:
$LN2@bi_windup:

; 1185 :     }
; 1186 :     s->bi_buf = 0;

  000c5	33 c9		 xor	 ecx, ecx
  000c7	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000cc	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 1187 :     s->bi_valid = 0;

  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000d8	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0

; 1188 : #ifdef DEBUG
; 1189 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1190 : #endif
; 1191 : }

  000e2	c3		 ret	 0
bi_windup ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT bi_flush
_TEXT	SEGMENT
s$ = 8
bi_flush PROC						; COMDAT

; 1163 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1164 :     if (s->bi_valid == 16) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0000a	83 b8 14 17 00
	00 10		 cmp	 DWORD PTR [rax+5908], 16
  00011	0f 85 8e 00 00
	00		 jne	 $LN3@bi_flush

; 1165 :         put_short(s, s->bi_buf);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0001c	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00023	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00029	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0002e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00031	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0003d	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00042	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00045	83 c1 01	 add	 ecx, 1
  00048	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0004d	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00050	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00055	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0005c	c1 fa 08	 sar	 edx, 8
  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00064	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00067	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0006c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00070	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00073	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00078	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00083	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1166 :         s->bi_buf = 0;

  00086	33 c9		 xor	 ecx, ecx
  00088	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0008d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 1167 :         s->bi_valid = 0;

  00094	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00099	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0
  000a3	eb 76		 jmp	 SHORT $LN2@bi_flush
$LN3@bi_flush:

; 1168 :     } else if (s->bi_valid >= 8) {

  000a5	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000aa	83 b8 14 17 00
	00 08		 cmp	 DWORD PTR [rax+5908], 8
  000b1	7c 68		 jl	 SHORT $LN1@bi_flush

; 1169 :         put_byte(s, (Byte)s->bi_buf);

  000b3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000b8	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  000bb	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000c0	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000c4	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000c9	0f b6 80 10 17
	00 00		 movzx	 eax, BYTE PTR [rax+5904]
  000d0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000d8	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000db	83 c1 01	 add	 ecx, 1
  000de	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000e3	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1170 :         s->bi_buf >>= 8;

  000e6	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000eb	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  000f2	66 c1 e9 08	 shr	 cx, 8
  000f6	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000fb	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 1171 :         s->bi_valid -= 8;

  00102	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00107	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0010d	83 e9 08	 sub	 ecx, 8
  00110	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00115	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@bi_flush:
$LN2@bi_flush:

; 1172 :     }
; 1173 : }

  0011b	f3 c3		 fatret	 0
bi_flush ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bi_reverse DD imagerel bi_reverse
	DD	imagerel bi_reverse+80
	DD	imagerel $unwind$bi_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bi_reverse DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bi_reverse
_TEXT	SEGMENT
res$ = 0
code$ = 32
len$ = 40
bi_reverse PROC						; COMDAT

; 1149 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 1150 :     register unsigned res = 0;

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR res$[rsp], 0
$LN3@bi_reverse:

; 1151 :     do {
; 1152 :         res |= code & 1;

  00013	8b 4c 24 20	 mov	 ecx, DWORD PTR code$[rsp]
  00017	83 e1 01	 and	 ecx, 1
  0001a	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  0001d	0b c1		 or	 eax, ecx
  0001f	89 04 24	 mov	 DWORD PTR res$[rsp], eax

; 1153 :         code >>= 1, res <<= 1;

  00022	8b 44 24 20	 mov	 eax, DWORD PTR code$[rsp]
  00026	d1 e8		 shr	 eax, 1
  00028	89 44 24 20	 mov	 DWORD PTR code$[rsp], eax
  0002c	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  0002f	d1 e0		 shl	 eax, 1
  00031	89 04 24	 mov	 DWORD PTR res$[rsp], eax

; 1154 :     } while (--len > 0);

  00034	8b 44 24 28	 mov	 eax, DWORD PTR len$[rsp]
  00038	83 e8 01	 sub	 eax, 1
  0003b	89 44 24 28	 mov	 DWORD PTR len$[rsp], eax
  0003f	83 7c 24 28 00	 cmp	 DWORD PTR len$[rsp], 0
  00044	7f cd		 jg	 SHORT $LN3@bi_reverse

; 1155 :     return res >> 1;

  00046	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  00049	d1 e8		 shr	 eax, 1

; 1156 : }

  0004b	48 83 c4 18	 add	 rsp, 24
  0004f	c3		 ret	 0
bi_reverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_data_type DD imagerel set_data_type
	DD	imagerel set_data_type+157
	DD	imagerel $unwind$set_data_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_data_type DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT set_data_type
_TEXT	SEGMENT
n$ = 0
tv83 = 4
s$ = 32
set_data_type PROC					; COMDAT

; 1128 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1129 :     int n;
; 1130 : 
; 1131 :     for (n = 0; n < 9; n++)

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00010	eb 09		 jmp	 SHORT $LN9@set_data_t
$LN8@set_data_t:
  00012	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN9@set_data_t:
  0001b	83 3c 24 09	 cmp	 DWORD PTR n$[rsp], 9
  0001f	7d 19		 jge	 SHORT $LN7@set_data_t

; 1132 :         if (s->dyn_ltree[n].Freq != 0)

  00021	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0002a	0f b7 84 88 bc
	00 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+188]
  00032	85 c0		 test	 eax, eax
  00034	74 02		 je	 SHORT $LN6@set_data_t

; 1133 :             break;

  00036	eb 02		 jmp	 SHORT $LN7@set_data_t
$LN6@set_data_t:

; 1134 :     if (n == 9)

  00038	eb d8		 jmp	 SHORT $LN8@set_data_t
$LN7@set_data_t:
  0003a	83 3c 24 09	 cmp	 DWORD PTR n$[rsp], 9
  0003e	75 31		 jne	 SHORT $LN5@set_data_t

; 1135 :         for (n = 14; n < 32; n++)

  00040	c7 04 24 0e 00
	00 00		 mov	 DWORD PTR n$[rsp], 14
  00047	eb 09		 jmp	 SHORT $LN4@set_data_t
$LN3@set_data_t:
  00049	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN4@set_data_t:
  00052	83 3c 24 20	 cmp	 DWORD PTR n$[rsp], 32	; 00000020H
  00056	7d 19		 jge	 SHORT $LN2@set_data_t

; 1136 :             if (s->dyn_ltree[n].Freq != 0)

  00058	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00061	0f b7 84 88 bc
	00 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+188]
  00069	85 c0		 test	 eax, eax
  0006b	74 02		 je	 SHORT $LN1@set_data_t

; 1137 :                 break;

  0006d	eb 02		 jmp	 SHORT $LN2@set_data_t
$LN1@set_data_t:

; 1138 :     s->strm->data_type = (n == 32) ? Z_TEXT : Z_BINARY;

  0006f	eb d8		 jmp	 SHORT $LN3@set_data_t
$LN2@set_data_t:
$LN5@set_data_t:
  00071	83 3c 24 20	 cmp	 DWORD PTR n$[rsp], 32	; 00000020H
  00075	75 0a		 jne	 SHORT $LN12@set_data_t
  00077	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  0007f	eb 08		 jmp	 SHORT $LN13@set_data_t
$LN12@set_data_t:
  00081	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN13@set_data_t:
  00089	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0008e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00091	8b 44 24 04	 mov	 eax, DWORD PTR tv83[rsp]
  00095	89 41 48	 mov	 DWORD PTR [rcx+72], eax

; 1139 : }

  00098	48 83 c4 18	 add	 rsp, 24
  0009c	c3		 ret	 0
set_data_type ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress_block DD imagerel compress_block
	DD	imagerel compress_block+2612
	DD	imagerel $unwind$compress_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_block DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compress_block
_TEXT	SEGMENT
extra$ = 0
code$ = 4
lx$ = 8
lc$ = 12
dist$ = 16
len$78730 = 20
val$78734 = 24
len$78743 = 28
val$78747 = 32
len$78756 = 36
val$78760 = 40
len$78768 = 44
val$78772 = 48
len$78781 = 52
val$78785 = 56
len$78793 = 60
val$78797 = 64
tv330 = 68
s$ = 96
ltree$ = 104
dtree$ = 112
compress_block PROC					; COMDAT

; 1076 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1077 :     unsigned dist;      /* distance of matched string */
; 1078 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1079 :     unsigned lx = 0;    /* running index in l_buf */

  00013	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR lx$[rsp], 0

; 1080 :     unsigned code;      /* the code to send */
; 1081 :     int extra;          /* number of extra bits to send */
; 1082 : 
; 1083 :     if (s->last_lit != 0) do {

  0001b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00020	83 b8 f4 16 00
	00 00		 cmp	 DWORD PTR [rax+5876], 0
  00027	0f 84 73 08 00
	00		 je	 $LN20@compress_b
$LN19@compress_b:

; 1084 :         dist = s->d_buf[lx];

  0002d	8b 4c 24 08	 mov	 ecx, DWORD PTR lx$[rsp]
  00031	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 8b 80 f8 16
	00 00		 mov	 rax, QWORD PTR [rax+5880]
  0003d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00041	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1085 :         lc = s->l_buf[lx++];

  00045	8b 4c 24 08	 mov	 ecx, DWORD PTR lx$[rsp]
  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0004e	48 8b 80 e8 16
	00 00		 mov	 rax, QWORD PTR [rax+5864]
  00055	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00059	89 44 24 0c	 mov	 DWORD PTR lc$[rsp], eax
  0005d	8b 44 24 08	 mov	 eax, DWORD PTR lx$[rsp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 44 24 08	 mov	 DWORD PTR lx$[rsp], eax

; 1086 :         if (dist == 0) {

  00068	83 7c 24 10 00	 cmp	 DWORD PTR dist$[rsp], 0
  0006d	0f 85 84 01 00
	00		 jne	 $LN16@compress_b

; 1087 :             send_code(s, lc, ltree); /* send a literal byte */

  00073	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  00078	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  0007d	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00082	89 44 24 14	 mov	 DWORD PTR len$78730[rsp], eax
  00086	b9 10 00 00 00	 mov	 ecx, 16
  0008b	2b 4c 24 14	 sub	 ecx, DWORD PTR len$78730[rsp]
  0008f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00094	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0009a	0f 8e 00 01 00
	00		 jle	 $LN15@compress_b
  000a0	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  000a5	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  000aa	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  000ae	89 44 24 18	 mov	 DWORD PTR val$78734[rsp], eax
  000b2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000b7	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  000bd	0f b6 c8	 movzx	 ecx, al
  000c0	8b 54 24 18	 mov	 edx, DWORD PTR val$78734[rsp]
  000c4	d3 e2		 shl	 edx, cl
  000c6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000cb	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  000d2	0b ca		 or	 ecx, edx
  000d4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000d9	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  000e0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000e5	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000ec	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000f2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000f7	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ff	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00103	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00106	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0010b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0010e	83 c1 01	 add	 ecx, 1
  00111	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00116	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00119	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0011e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00125	c1 fa 08	 sar	 edx, 8
  00128	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0012d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00130	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00135	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00139	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0013c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00141	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00144	83 c1 01	 add	 ecx, 1
  00147	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0014c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0014f	0f b7 54 24 18	 movzx	 edx, WORD PTR val$78734[rsp]
  00154	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00159	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00160	b8 10 00 00 00	 mov	 eax, 16
  00165	48 2b c1	 sub	 rax, rcx
  00168	0f b6 c8	 movzx	 ecx, al
  0016b	8b c2		 mov	 eax, edx
  0016d	d3 f8		 sar	 eax, cl
  0016f	8b c8		 mov	 ecx, eax
  00171	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00176	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0017d	48 63 4c 24 14	 movsxd	 rcx, DWORD PTR len$78730[rsp]
  00182	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00187	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0018e	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00193	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00198	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0019e	eb 52		 jmp	 SHORT $LN14@compress_b
$LN15@compress_b:
  001a0	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  001a5	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  001aa	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  001ae	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001b3	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001b9	0f b6 c8	 movzx	 ecx, al
  001bc	d3 e2		 shl	 edx, cl
  001be	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001c3	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  001ca	0b ca		 or	 ecx, edx
  001cc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001d8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001dd	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  001e3	03 4c 24 14	 add	 ecx, DWORD PTR len$78730[rsp]
  001e7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001ec	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN14@compress_b:

; 1088 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1089 :         } else {

  001f2	e9 94 06 00 00	 jmp	 $LN13@compress_b
$LN16@compress_b:

; 1090 :             /* Here, lc is the match length - MIN_MATCH */
; 1091 :             code = _length_code[lc];

  001f7	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  001fc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_length_code
  00203	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00207	89 44 24 04	 mov	 DWORD PTR code$[rsp], eax

; 1092 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  0020b	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  0020f	05 01 01 00 00	 add	 eax, 257		; 00000101H
  00214	8b c8		 mov	 ecx, eax
  00216	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  0021b	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00220	89 44 24 1c	 mov	 DWORD PTR len$78743[rsp], eax
  00224	b9 10 00 00 00	 mov	 ecx, 16
  00229	2b 4c 24 1c	 sub	 ecx, DWORD PTR len$78743[rsp]
  0022d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00232	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00238	0f 8e 06 01 00
	00		 jle	 $LN12@compress_b
  0023e	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00242	05 01 01 00 00	 add	 eax, 257		; 00000101H
  00247	8b c8		 mov	 ecx, eax
  00249	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  0024e	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00252	89 44 24 20	 mov	 DWORD PTR val$78747[rsp], eax
  00256	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0025b	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00261	0f b6 c8	 movzx	 ecx, al
  00264	8b 54 24 20	 mov	 edx, DWORD PTR val$78747[rsp]
  00268	d3 e2		 shl	 edx, cl
  0026a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0026f	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00276	0b ca		 or	 ecx, edx
  00278	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0027d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00284	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00289	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00290	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00296	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0029b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0029e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  002a7	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002aa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002af	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002b2	83 c1 01	 add	 ecx, 1
  002b5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002ba	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  002bd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002c2	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  002c9	c1 fa 08	 sar	 edx, 8
  002cc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002d1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002d4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002d9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  002dd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002e0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e5	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002e8	83 c1 01	 add	 ecx, 1
  002eb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002f0	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  002f3	0f b7 54 24 20	 movzx	 edx, WORD PTR val$78747[rsp]
  002f8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002fd	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00304	b8 10 00 00 00	 mov	 eax, 16
  00309	48 2b c1	 sub	 rax, rcx
  0030c	0f b6 c8	 movzx	 ecx, al
  0030f	8b c2		 mov	 eax, edx
  00311	d3 f8		 sar	 eax, cl
  00313	8b c8		 mov	 ecx, eax
  00315	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0031a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00321	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR len$78743[rsp]
  00326	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0032b	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00332	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00337	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0033c	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00342	eb 58		 jmp	 SHORT $LN11@compress_b
$LN12@compress_b:
  00344	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00348	05 01 01 00 00	 add	 eax, 257		; 00000101H
  0034d	8b c8		 mov	 ecx, eax
  0034f	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  00354	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  00358	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0035d	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00363	0f b6 c8	 movzx	 ecx, al
  00366	d3 e2		 shl	 edx, cl
  00368	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0036d	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00374	0b ca		 or	 ecx, edx
  00376	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0037b	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00382	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00387	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0038d	03 4c 24 1c	 add	 ecx, DWORD PTR len$78743[rsp]
  00391	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00396	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN11@compress_b:

; 1093 :             extra = extra_lbits[code];

  0039c	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  003a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:extra_lbits
  003a7	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003aa	89 04 24	 mov	 DWORD PTR extra$[rsp], eax

; 1094 :             if (extra != 0) {

  003ad	83 3c 24 00	 cmp	 DWORD PTR extra$[rsp], 0
  003b1	0f 84 77 01 00
	00		 je	 $LN10@compress_b

; 1095 :                 lc -= base_length[code];

  003b7	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  003bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:base_length
  003c2	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  003c5	8b 44 24 0c	 mov	 eax, DWORD PTR lc$[rsp]
  003c9	2b c1		 sub	 eax, ecx
  003cb	89 44 24 0c	 mov	 DWORD PTR lc$[rsp], eax

; 1096 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  003cf	8b 04 24	 mov	 eax, DWORD PTR extra$[rsp]
  003d2	89 44 24 24	 mov	 DWORD PTR len$78756[rsp], eax
  003d6	b9 10 00 00 00	 mov	 ecx, 16
  003db	2b 4c 24 24	 sub	 ecx, DWORD PTR len$78756[rsp]
  003df	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003e4	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  003ea	0f 8e f6 00 00
	00		 jle	 $LN9@compress_b
  003f0	8b 44 24 0c	 mov	 eax, DWORD PTR lc$[rsp]
  003f4	89 44 24 28	 mov	 DWORD PTR val$78760[rsp], eax
  003f8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003fd	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00403	0f b6 c8	 movzx	 ecx, al
  00406	8b 54 24 28	 mov	 edx, DWORD PTR val$78760[rsp]
  0040a	d3 e2		 shl	 edx, cl
  0040c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00411	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00418	0b ca		 or	 ecx, edx
  0041a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0041f	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00426	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0042b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00432	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00438	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0043d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00440	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00445	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00449	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0044c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00451	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00454	83 c1 01	 add	 ecx, 1
  00457	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0045c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0045f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00464	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0046b	c1 fa 08	 sar	 edx, 8
  0046e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00473	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00476	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0047b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0047f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00482	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00487	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0048a	83 c1 01	 add	 ecx, 1
  0048d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00492	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00495	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78760[rsp]
  0049a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0049f	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  004a6	b8 10 00 00 00	 mov	 eax, 16
  004ab	48 2b c1	 sub	 rax, rcx
  004ae	0f b6 c8	 movzx	 ecx, al
  004b1	8b c2		 mov	 eax, edx
  004b3	d3 f8		 sar	 eax, cl
  004b5	8b c8		 mov	 ecx, eax
  004b7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004bc	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  004c3	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR len$78756[rsp]
  004c8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004cd	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  004d4	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  004d9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004de	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  004e4	eb 48		 jmp	 SHORT $LN8@compress_b
$LN9@compress_b:
  004e6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004eb	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  004f1	0f b6 c8	 movzx	 ecx, al
  004f4	8b 54 24 0c	 mov	 edx, DWORD PTR lc$[rsp]
  004f8	d3 e2		 shl	 edx, cl
  004fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004ff	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00506	0b ca		 or	 ecx, edx
  00508	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0050d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00514	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00519	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0051f	03 4c 24 24	 add	 ecx, DWORD PTR len$78756[rsp]
  00523	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00528	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@compress_b:
$LN10@compress_b:

; 1097 :             }
; 1098 :             dist--; /* dist is now the match distance - 1 */

  0052e	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00532	83 e8 01	 sub	 eax, 1
  00535	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1099 :             code = d_code(dist);

  00539	81 7c 24 10 00
	01 00 00	 cmp	 DWORD PTR dist$[rsp], 256 ; 00000100H
  00541	73 15		 jae	 SHORT $LN23@compress_b
  00543	8b 4c 24 10	 mov	 ecx, DWORD PTR dist$[rsp]
  00547	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dist_code
  0054e	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00552	89 44 24 44	 mov	 DWORD PTR tv330[rsp], eax
  00556	eb 1d		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00558	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  0055c	c1 e8 07	 shr	 eax, 7
  0055f	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00564	8b c8		 mov	 ecx, eax
  00566	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dist_code
  0056d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00571	89 44 24 44	 mov	 DWORD PTR tv330[rsp], eax
$LN24@compress_b:
  00575	8b 44 24 44	 mov	 eax, DWORD PTR tv330[rsp]
  00579	89 44 24 04	 mov	 DWORD PTR code$[rsp], eax

; 1100 :             Assert (code < D_CODES, "bad d_code");
; 1101 : 
; 1102 :             send_code(s, code, dtree);       /* send the distance code */

  0057d	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  00581	48 8b 44 24 70	 mov	 rax, QWORD PTR dtree$[rsp]
  00586	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  0058b	89 44 24 2c	 mov	 DWORD PTR len$78768[rsp], eax
  0058f	b9 10 00 00 00	 mov	 ecx, 16
  00594	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78768[rsp]
  00598	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0059d	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  005a3	0f 8e ff 00 00
	00		 jle	 $LN7@compress_b
  005a9	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  005ad	48 8b 44 24 70	 mov	 rax, QWORD PTR dtree$[rsp]
  005b2	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  005b6	89 44 24 30	 mov	 DWORD PTR val$78772[rsp], eax
  005ba	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005bf	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005c5	0f b6 c8	 movzx	 ecx, al
  005c8	8b 54 24 30	 mov	 edx, DWORD PTR val$78772[rsp]
  005cc	d3 e2		 shl	 edx, cl
  005ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005d3	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005da	0b ca		 or	 ecx, edx
  005dc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005e1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005e8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005ed	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  005f4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005ff	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00602	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00607	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0060b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0060e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00613	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00616	83 c1 01	 add	 ecx, 1
  00619	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0061e	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00621	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00626	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0062d	c1 fa 08	 sar	 edx, 8
  00630	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00635	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00638	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0063d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00641	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00644	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00649	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0064c	83 c1 01	 add	 ecx, 1
  0064f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00654	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00657	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78772[rsp]
  0065c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00661	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00668	b8 10 00 00 00	 mov	 eax, 16
  0066d	48 2b c1	 sub	 rax, rcx
  00670	0f b6 c8	 movzx	 ecx, al
  00673	8b c2		 mov	 eax, edx
  00675	d3 f8		 sar	 eax, cl
  00677	8b c8		 mov	 ecx, eax
  00679	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0067e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00685	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78768[rsp]
  0068a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0068f	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00696	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0069b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006a0	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  006a6	eb 51		 jmp	 SHORT $LN6@compress_b
$LN7@compress_b:
  006a8	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  006ac	48 8b 44 24 70	 mov	 rax, QWORD PTR dtree$[rsp]
  006b1	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  006b5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006ba	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  006c0	0f b6 c8	 movzx	 ecx, al
  006c3	d3 e2		 shl	 edx, cl
  006c5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006ca	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  006d1	0b ca		 or	 ecx, edx
  006d3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006d8	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  006df	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006e4	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  006ea	03 4c 24 2c	 add	 ecx, DWORD PTR len$78768[rsp]
  006ee	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006f3	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@compress_b:

; 1103 :             extra = extra_dbits[code];

  006f9	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  006fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:extra_dbits
  00704	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00707	89 04 24	 mov	 DWORD PTR extra$[rsp], eax

; 1104 :             if (extra != 0) {

  0070a	83 3c 24 00	 cmp	 DWORD PTR extra$[rsp], 0
  0070e	0f 84 77 01 00
	00		 je	 $LN5@compress_b

; 1105 :                 dist -= base_dist[code];

  00714	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  00718	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:base_dist
  0071f	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  00722	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00726	2b c1		 sub	 eax, ecx
  00728	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1106 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  0072c	8b 04 24	 mov	 eax, DWORD PTR extra$[rsp]
  0072f	89 44 24 34	 mov	 DWORD PTR len$78781[rsp], eax
  00733	b9 10 00 00 00	 mov	 ecx, 16
  00738	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78781[rsp]
  0073c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00741	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00747	0f 8e f6 00 00
	00		 jle	 $LN4@compress_b
  0074d	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00751	89 44 24 38	 mov	 DWORD PTR val$78785[rsp], eax
  00755	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0075a	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00760	0f b6 c8	 movzx	 ecx, al
  00763	8b 54 24 38	 mov	 edx, DWORD PTR val$78785[rsp]
  00767	d3 e2		 shl	 edx, cl
  00769	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0076e	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00775	0b ca		 or	 ecx, edx
  00777	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0077c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00783	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00788	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0078f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00795	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0079a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0079d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007a2	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007a6	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007a9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007ae	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007b1	83 c1 01	 add	 ecx, 1
  007b4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007b9	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007bc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007c1	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  007c8	c1 fa 08	 sar	 edx, 8
  007cb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007d0	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007d3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007d8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007dc	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007df	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007e4	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007e7	83 c1 01	 add	 ecx, 1
  007ea	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007ef	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007f2	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78785[rsp]
  007f7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007fc	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00803	b8 10 00 00 00	 mov	 eax, 16
  00808	48 2b c1	 sub	 rax, rcx
  0080b	0f b6 c8	 movzx	 ecx, al
  0080e	8b c2		 mov	 eax, edx
  00810	d3 f8		 sar	 eax, cl
  00812	8b c8		 mov	 ecx, eax
  00814	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00819	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00820	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78781[rsp]
  00825	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0082a	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00831	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00836	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0083b	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00841	eb 48		 jmp	 SHORT $LN3@compress_b
$LN4@compress_b:
  00843	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00848	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0084e	0f b6 c8	 movzx	 ecx, al
  00851	8b 54 24 10	 mov	 edx, DWORD PTR dist$[rsp]
  00855	d3 e2		 shl	 edx, cl
  00857	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0085c	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00863	0b ca		 or	 ecx, edx
  00865	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0086a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00871	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00876	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0087c	03 4c 24 34	 add	 ecx, DWORD PTR len$78781[rsp]
  00880	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00885	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN3@compress_b:
$LN5@compress_b:
$LN13@compress_b:

; 1107 :             }
; 1108 :         } /* literal or match pair ? */
; 1109 : 
; 1110 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1111 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1112 :                "pendingBuf overflow");
; 1113 : 
; 1114 :     } while (lx < s->last_lit);

  0088b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00890	8b 80 f4 16 00
	00		 mov	 eax, DWORD PTR [rax+5876]
  00896	39 44 24 08	 cmp	 DWORD PTR lx$[rsp], eax
  0089a	0f 82 8d f7 ff
	ff		 jb	 $LN19@compress_b
$LN20@compress_b:

; 1115 : 
; 1116 :     send_code(s, END_BLOCK, ltree);

  008a0	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  008a5	0f b7 80 02 04
	00 00		 movzx	 eax, WORD PTR [rax+1026]
  008ac	89 44 24 3c	 mov	 DWORD PTR len$78793[rsp], eax
  008b0	b9 10 00 00 00	 mov	 ecx, 16
  008b5	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$78793[rsp]
  008b9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008be	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  008c4	0f 8e fe 00 00
	00		 jle	 $LN2@compress_b
  008ca	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  008cf	0f b7 80 00 04
	00 00		 movzx	 eax, WORD PTR [rax+1024]
  008d6	89 44 24 40	 mov	 DWORD PTR val$78797[rsp], eax
  008da	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008df	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  008e5	0f b6 c8	 movzx	 ecx, al
  008e8	8b 54 24 40	 mov	 edx, DWORD PTR val$78797[rsp]
  008ec	d3 e2		 shl	 edx, cl
  008ee	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008f3	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  008fa	0b ca		 or	 ecx, edx
  008fc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00901	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00908	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0090d	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00914	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0091a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0091f	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00922	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00927	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0092b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0092e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00933	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00936	83 c1 01	 add	 ecx, 1
  00939	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0093e	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00941	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00946	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0094d	c1 fa 08	 sar	 edx, 8
  00950	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00955	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00958	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0095d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00961	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00964	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00969	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0096c	83 c1 01	 add	 ecx, 1
  0096f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00974	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00977	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78797[rsp]
  0097c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00981	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00988	b8 10 00 00 00	 mov	 eax, 16
  0098d	48 2b c1	 sub	 rax, rcx
  00990	0f b6 c8	 movzx	 ecx, al
  00993	8b c2		 mov	 eax, edx
  00995	d3 f8		 sar	 eax, cl
  00997	8b c8		 mov	 ecx, eax
  00999	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0099e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  009a5	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$78793[rsp]
  009aa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009af	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  009b6	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  009bb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009c0	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  009c6	eb 50		 jmp	 SHORT $LN1@compress_b
$LN2@compress_b:
  009c8	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  009cd	0f b7 90 00 04
	00 00		 movzx	 edx, WORD PTR [rax+1024]
  009d4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009d9	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  009df	0f b6 c8	 movzx	 ecx, al
  009e2	d3 e2		 shl	 edx, cl
  009e4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009e9	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  009f0	0b ca		 or	 ecx, edx
  009f2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009f7	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  009fe	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00a03	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00a09	03 4c 24 3c	 add	 ecx, DWORD PTR len$78793[rsp]
  00a0d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00a12	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@compress_b:

; 1117 :     s->last_eob_len = ltree[END_BLOCK].Len;

  00a18	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  00a1d	0f b7 88 02 04
	00 00		 movzx	 ecx, WORD PTR [rax+1026]
  00a24	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00a29	89 88 0c 17 00
	00		 mov	 DWORD PTR [rax+5900], ecx

; 1118 : }

  00a2f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00a33	c3		 ret	 0
compress_block ENDP
_TEXT	ENDS
PUBLIC	_tr_align
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_align DD imagerel $LN12
	DD	imagerel $LN12+1512
	DD	imagerel $unwind$_tr_align
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_align DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_align
_TEXT	SEGMENT
len$78607 = 32
val$78611 = 36
len$78619 = 40
val$78623 = 44
len$78632 = 48
val$78636 = 52
len$78644 = 56
val$78648 = 60
s$ = 80
_tr_align PROC						; COMDAT

; 894  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 895  :     send_bits(s, STATIC_TREES<<1, 3);

  00009	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR len$78607[rsp], 3
  00011	b9 10 00 00 00	 mov	 ecx, 16
  00016	2b 4c 24 20	 sub	 ecx, DWORD PTR len$78607[rsp]
  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0001f	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00025	0f 8e f6 00 00
	00		 jle	 $LN9@tr_align
  0002b	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR val$78611[rsp], 2
  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00038	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0003e	0f b6 c8	 movzx	 ecx, al
  00041	8b 54 24 24	 mov	 edx, DWORD PTR val$78611[rsp]
  00045	d3 e2		 shl	 edx, cl
  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0004c	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00053	0b ca		 or	 ecx, edx
  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0005a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00066	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0006d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00078	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0007b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00080	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00084	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0008c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0008f	83 c1 01	 add	 ecx, 1
  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00097	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0009f	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000a6	c1 fa 08	 sar	 edx, 8
  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ae	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000b1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000b6	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ba	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000c2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c5	83 c1 01	 add	 ecx, 1
  000c8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000cd	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000d0	0f b7 54 24 24	 movzx	 edx, WORD PTR val$78611[rsp]
  000d5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  000e1	b8 10 00 00 00	 mov	 eax, 16
  000e6	48 2b c1	 sub	 rax, rcx
  000e9	0f b6 c8	 movzx	 ecx, al
  000ec	8b c2		 mov	 eax, edx
  000ee	d3 f8		 sar	 eax, cl
  000f0	8b c8		 mov	 ecx, eax
  000f2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000f7	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  000fe	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR len$78607[rsp]
  00103	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00108	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0010f	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00114	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00119	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0011f	eb 49		 jmp	 SHORT $LN8@tr_align
$LN9@tr_align:
  00121	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00126	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0012c	ba 02 00 00 00	 mov	 edx, 2
  00131	0f b6 c8	 movzx	 ecx, al
  00134	d3 e2		 shl	 edx, cl
  00136	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0013b	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00142	0b ca		 or	 ecx, edx
  00144	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00149	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00150	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00155	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0015b	03 4c 24 20	 add	 ecx, DWORD PTR len$78607[rsp]
  0015f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00164	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  0016a	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1026
  00171	89 44 24 28	 mov	 DWORD PTR len$78619[rsp], eax
  00175	b9 10 00 00 00	 mov	 ecx, 16
  0017a	2b 4c 24 28	 sub	 ecx, DWORD PTR len$78619[rsp]
  0017e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00183	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00189	0f 8e f9 00 00
	00		 jle	 $LN7@tr_align
  0018f	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  00196	89 44 24 2c	 mov	 DWORD PTR val$78623[rsp], eax
  0019a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0019f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001a5	0f b6 c8	 movzx	 ecx, al
  001a8	8b 54 24 2c	 mov	 edx, DWORD PTR val$78623[rsp]
  001ac	d3 e2		 shl	 edx, cl
  001ae	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001b3	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  001ba	0b ca		 or	 ecx, edx
  001bc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001c1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001c8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001cd	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  001d4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001da	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001df	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001e2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e7	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001eb	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001ee	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001f3	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001f6	83 c1 01	 add	 ecx, 1
  001f9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001fe	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00201	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00206	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0020d	c1 fa 08	 sar	 edx, 8
  00210	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00215	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00218	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0021d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00221	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00224	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00229	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0022c	83 c1 01	 add	 ecx, 1
  0022f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00234	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00237	0f b7 54 24 2c	 movzx	 edx, WORD PTR val$78623[rsp]
  0023c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00241	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00248	b8 10 00 00 00	 mov	 eax, 16
  0024d	48 2b c1	 sub	 rax, rcx
  00250	0f b6 c8	 movzx	 ecx, al
  00253	8b c2		 mov	 eax, edx
  00255	d3 f8		 sar	 eax, cl
  00257	8b c8		 mov	 ecx, eax
  00259	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0025e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00265	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR len$78619[rsp]
  0026a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0026f	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00276	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0027b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00280	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00286	eb 4b		 jmp	 SHORT $LN6@tr_align
$LN7@tr_align:
  00288	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR static_ltree+1024
  0028f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00294	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0029a	0f b6 c8	 movzx	 ecx, al
  0029d	d3 e2		 shl	 edx, cl
  0029f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002a4	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002ab	0b ca		 or	 ecx, edx
  002ad	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002b2	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  002b9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002be	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  002c4	03 4c 24 28	 add	 ecx, DWORD PTR len$78619[rsp]
  002c8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002cd	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@tr_align:

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  002d3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002d8	e8 00 00 00 00	 call	 bi_flush

; 901  :     /* Of the 10 bits for the empty block, we have already sent
; 902  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 903  :      * the EOB of the previous block) was thus at least one plus the length
; 904  :      * of the EOB plus what we have just sent of the empty static block.
; 905  :      */
; 906  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

  002dd	4c 8b 5c 24 50	 mov	 r11, QWORD PTR s$[rsp]
  002e2	41 8b 83 0c 17
	00 00		 mov	 eax, DWORD PTR [r11+5900]
  002e9	83 c0 0b	 add	 eax, 11
  002ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002f1	2b 81 14 17 00
	00		 sub	 eax, DWORD PTR [rcx+5908]
  002f7	83 f8 09	 cmp	 eax, 9
  002fa	0f 8d d4 02 00
	00		 jge	 $LN5@tr_align

; 907  :         send_bits(s, STATIC_TREES<<1, 3);

  00300	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR len$78632[rsp], 3
  00308	b9 10 00 00 00	 mov	 ecx, 16
  0030d	2b 4c 24 30	 sub	 ecx, DWORD PTR len$78632[rsp]
  00311	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00316	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0031c	0f 8e f6 00 00
	00		 jle	 $LN4@tr_align
  00322	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR val$78636[rsp], 2
  0032a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0032f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00335	0f b6 c8	 movzx	 ecx, al
  00338	8b 54 24 34	 mov	 edx, DWORD PTR val$78636[rsp]
  0033c	d3 e2		 shl	 edx, cl
  0033e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00343	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0034a	0b ca		 or	 ecx, edx
  0034c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00351	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00358	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0035d	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00364	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0036a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0036f	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00372	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00377	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0037b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0037e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00383	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00386	83 c1 01	 add	 ecx, 1
  00389	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0038e	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00391	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00396	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0039d	c1 fa 08	 sar	 edx, 8
  003a0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003a5	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  003a8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003ad	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  003b1	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  003b4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003b9	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  003bc	83 c1 01	 add	 ecx, 1
  003bf	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003c4	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  003c7	0f b7 54 24 34	 movzx	 edx, WORD PTR val$78636[rsp]
  003cc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003d1	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  003d8	b8 10 00 00 00	 mov	 eax, 16
  003dd	48 2b c1	 sub	 rax, rcx
  003e0	0f b6 c8	 movzx	 ecx, al
  003e3	8b c2		 mov	 eax, edx
  003e5	d3 f8		 sar	 eax, cl
  003e7	8b c8		 mov	 ecx, eax
  003e9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003ee	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003f5	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$78632[rsp]
  003fa	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003ff	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00406	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0040b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00410	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00416	eb 49		 jmp	 SHORT $LN3@tr_align
$LN4@tr_align:
  00418	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0041d	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00423	ba 02 00 00 00	 mov	 edx, 2
  00428	0f b6 c8	 movzx	 ecx, al
  0042b	d3 e2		 shl	 edx, cl
  0042d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00432	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00439	0b ca		 or	 ecx, edx
  0043b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00440	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00447	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0044c	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00452	03 4c 24 30	 add	 ecx, DWORD PTR len$78632[rsp]
  00456	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0045b	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN3@tr_align:

; 908  :         send_code(s, END_BLOCK, static_ltree);

  00461	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1026
  00468	89 44 24 38	 mov	 DWORD PTR len$78644[rsp], eax
  0046c	b9 10 00 00 00	 mov	 ecx, 16
  00471	2b 4c 24 38	 sub	 ecx, DWORD PTR len$78644[rsp]
  00475	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0047a	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00480	0f 8e f9 00 00
	00		 jle	 $LN2@tr_align
  00486	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  0048d	89 44 24 3c	 mov	 DWORD PTR val$78648[rsp], eax
  00491	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00496	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0049c	0f b6 c8	 movzx	 ecx, al
  0049f	8b 54 24 3c	 mov	 edx, DWORD PTR val$78648[rsp]
  004a3	d3 e2		 shl	 edx, cl
  004a5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004aa	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  004b1	0b ca		 or	 ecx, edx
  004b3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004b8	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  004bf	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004c4	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  004cb	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004d1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004d6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004d9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004e2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  004e5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004ea	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004ed	83 c1 01	 add	 ecx, 1
  004f0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004f5	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  004f8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004fd	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00504	c1 fa 08	 sar	 edx, 8
  00507	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0050c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0050f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00514	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00518	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0051b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00520	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00523	83 c1 01	 add	 ecx, 1
  00526	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0052b	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0052e	0f b7 54 24 3c	 movzx	 edx, WORD PTR val$78648[rsp]
  00533	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00538	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0053f	b8 10 00 00 00	 mov	 eax, 16
  00544	48 2b c1	 sub	 rax, rcx
  00547	0f b6 c8	 movzx	 ecx, al
  0054a	8b c2		 mov	 eax, edx
  0054c	d3 f8		 sar	 eax, cl
  0054e	8b c8		 mov	 ecx, eax
  00550	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00555	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0055c	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR len$78644[rsp]
  00561	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00566	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0056d	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00572	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00577	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0057d	eb 4b		 jmp	 SHORT $LN1@tr_align
$LN2@tr_align:
  0057f	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR static_ltree+1024
  00586	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0058b	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00591	0f b6 c8	 movzx	 ecx, al
  00594	d3 e2		 shl	 edx, cl
  00596	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0059b	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005a2	0b ca		 or	 ecx, edx
  005a4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005a9	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005b0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005b5	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  005bb	03 4c 24 38	 add	 ecx, DWORD PTR len$78644[rsp]
  005bf	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005c4	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@tr_align:

; 909  : #ifdef DEBUG
; 910  :         s->compressed_len += 10L;
; 911  : #endif
; 912  :         bi_flush(s);

  005ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  005cf	e8 00 00 00 00	 call	 bi_flush
$LN5@tr_align:

; 913  :     }
; 914  :     s->last_eob_len = 7;

  005d4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005d9	c7 80 0c 17 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+5900], 7

; 915  : }

  005e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  005e7	c3		 ret	 0
_tr_align ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_tree DD imagerel send_tree
	DD	imagerel send_tree+3360
	DD	imagerel $unwind$send_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_tree DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT send_tree
_TEXT	SEGMENT
count$ = 0
n$ = 4
curlen$ = 8
nextlen$ = 12
prevlen$ = 16
min_count$ = 20
max_count$ = 24
len$78408 = 28
val$78412 = 32
len$78423 = 36
val$78427 = 40
len$78435 = 44
val$78439 = 48
len$78447 = 52
val$78451 = 56
len$78461 = 60
val$78465 = 64
len$78473 = 68
val$78477 = 72
len$78486 = 76
val$78490 = 80
len$78498 = 84
val$78502 = 88
s$ = 112
tree$ = 120
max_code$ = 128
send_tree PROC						; COMDAT

; 756  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 757  :     int n;                     /* iterates over all tree elements */
; 758  :     int prevlen = -1;          /* last emitted length */

  00013	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR prevlen$[rsp], -1

; 759  :     int curlen;                /* length of current code */
; 760  :     int nextlen = tree[0].Len; /* length of next code */

  0001b	48 8b 44 24 78	 mov	 rax, QWORD PTR tree$[rsp]
  00020	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00024	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 761  :     int count = 0;             /* repeat count of the current code */

  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0

; 762  :     int max_count = 7;         /* max repeat count */

  0002f	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7

; 763  :     int min_count = 4;         /* min repeat count */

  00037	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4

; 764  : 
; 765  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 766  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0003f	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00044	75 10		 jne	 SHORT $LN36@send_tree
  00046	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  0004e	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
$LN36@send_tree:

; 767  : 
; 768  :     for (n = 0; n <= max_code; n++) {

  00056	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0005e	eb 0b		 jmp	 SHORT $LN35@send_tree
$LN34@send_tree:
  00060	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN35@send_tree:
  0006b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR max_code$[rsp]
  00072	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  00076	0f 8f 9f 0c 00
	00		 jg	 $LN33@send_tree

; 769  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0007c	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00080	89 44 24 08	 mov	 DWORD PTR curlen$[rsp], eax
  00084	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  00088	83 c0 01	 add	 eax, 1
  0008b	48 63 c8	 movsxd	 rcx, eax
  0008e	48 8b 44 24 78	 mov	 rax, QWORD PTR tree$[rsp]
  00093	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00098	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 770  :         if (++count < max_count && curlen == nextlen) {

  0009c	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0009f	83 c0 01	 add	 eax, 1
  000a2	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  000a5	8b 44 24 18	 mov	 eax, DWORD PTR max_count$[rsp]
  000a9	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000ac	7d 11		 jge	 SHORT $LN32@send_tree
  000ae	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  000b2	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  000b6	75 07		 jne	 SHORT $LN32@send_tree
  000b8	eb a6		 jmp	 SHORT $LN34@send_tree

; 771  :             continue;

  000ba	e9 03 0c 00 00	 jmp	 $LN31@send_tree
$LN32@send_tree:

; 772  :         } else if (count < min_count) {

  000bf	8b 44 24 14	 mov	 eax, DWORD PTR min_count$[rsp]
  000c3	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000c6	0f 8d a2 01 00
	00		 jge	 $LN30@send_tree
$LN29@send_tree:

; 773  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  000cc	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000d1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  000d6	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  000de	89 44 24 1c	 mov	 DWORD PTR len$78408[rsp], eax
  000e2	b9 10 00 00 00	 mov	 ecx, 16
  000e7	2b 4c 24 1c	 sub	 ecx, DWORD PTR len$78408[rsp]
  000eb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  000f0	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  000f6	0f 8e 04 01 00
	00		 jle	 $LN26@send_tree
  000fc	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00101	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00106	0f b7 84 88 a4
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2724]
  0010e	89 44 24 20	 mov	 DWORD PTR val$78412[rsp], eax
  00112	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00117	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0011d	0f b6 c8	 movzx	 ecx, al
  00120	8b 54 24 20	 mov	 edx, DWORD PTR val$78412[rsp]
  00124	d3 e2		 shl	 edx, cl
  00126	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0012b	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00132	0b ca		 or	 ecx, edx
  00134	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00139	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00140	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00145	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0014c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00152	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00157	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0015a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0015f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00163	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00166	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0016b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0016e	83 c1 01	 add	 ecx, 1
  00171	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00176	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00179	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0017e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00185	c1 fa 08	 sar	 edx, 8
  00188	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0018d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00190	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00195	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00199	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0019c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001a1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001a4	83 c1 01	 add	 ecx, 1
  001a7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001ac	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  001af	0f b7 54 24 20	 movzx	 edx, WORD PTR val$78412[rsp]
  001b4	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001b9	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  001c0	b8 10 00 00 00	 mov	 eax, 16
  001c5	48 2b c1	 sub	 rax, rcx
  001c8	0f b6 c8	 movzx	 ecx, al
  001cb	8b c2		 mov	 eax, edx
  001cd	d3 f8		 sar	 eax, cl
  001cf	8b c8		 mov	 ecx, eax
  001d1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001d6	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001dd	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR len$78408[rsp]
  001e2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001e7	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  001ee	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  001f3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001f8	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  001fe	eb 56		 jmp	 SHORT $LN25@send_tree
$LN26@send_tree:
  00200	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00205	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0020a	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  00212	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00217	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0021d	0f b6 c8	 movzx	 ecx, al
  00220	d3 e2		 shl	 edx, cl
  00222	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00227	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0022e	0b ca		 or	 ecx, edx
  00230	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00235	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0023c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00241	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00247	03 4c 24 1c	 add	 ecx, DWORD PTR len$78408[rsp]
  0024b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00250	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN25@send_tree:
  00256	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00259	83 e8 01	 sub	 eax, 1
  0025c	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  0025f	83 3c 24 00	 cmp	 DWORD PTR count$[rsp], 0
  00263	0f 85 63 fe ff
	ff		 jne	 $LN29@send_tree

; 774  : 
; 775  :         } else if (curlen != 0) {

  00269	e9 54 0a 00 00	 jmp	 $LN24@send_tree
$LN30@send_tree:
  0026e	83 7c 24 08 00	 cmp	 DWORD PTR curlen$[rsp], 0
  00273	0f 84 82 04 00
	00		 je	 $LN23@send_tree

; 776  :             if (curlen != prevlen) {

  00279	8b 44 24 10	 mov	 eax, DWORD PTR prevlen$[rsp]
  0027d	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00281	0f 84 93 01 00
	00		 je	 $LN22@send_tree

; 777  :                 send_code(s, curlen, s->bl_tree); count--;

  00287	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  0028c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00291	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  00299	89 44 24 24	 mov	 DWORD PTR len$78423[rsp], eax
  0029d	b9 10 00 00 00	 mov	 ecx, 16
  002a2	2b 4c 24 24	 sub	 ecx, DWORD PTR len$78423[rsp]
  002a6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002ab	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  002b1	0f 8e 04 01 00
	00		 jle	 $LN21@send_tree
  002b7	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  002bc	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002c1	0f b7 84 88 a4
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2724]
  002c9	89 44 24 28	 mov	 DWORD PTR val$78427[rsp], eax
  002cd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002d2	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002d8	0f b6 c8	 movzx	 ecx, al
  002db	8b 54 24 28	 mov	 edx, DWORD PTR val$78427[rsp]
  002df	d3 e2		 shl	 edx, cl
  002e1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002e6	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002ed	0b ca		 or	 ecx, edx
  002ef	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002f4	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  002fb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00300	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00307	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0030d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00312	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00315	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0031a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0031e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00321	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00326	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00329	83 c1 01	 add	 ecx, 1
  0032c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00331	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00334	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00339	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00340	c1 fa 08	 sar	 edx, 8
  00343	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00348	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0034b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00350	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00354	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00357	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0035c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0035f	83 c1 01	 add	 ecx, 1
  00362	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00367	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0036a	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78427[rsp]
  0036f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00374	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0037b	b8 10 00 00 00	 mov	 eax, 16
  00380	48 2b c1	 sub	 rax, rcx
  00383	0f b6 c8	 movzx	 ecx, al
  00386	8b c2		 mov	 eax, edx
  00388	d3 f8		 sar	 eax, cl
  0038a	8b c8		 mov	 ecx, eax
  0038c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00391	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00398	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR len$78423[rsp]
  0039d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003a2	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  003a9	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  003ae	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003b3	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  003b9	eb 56		 jmp	 SHORT $LN20@send_tree
$LN21@send_tree:
  003bb	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  003c0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003c5	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  003cd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003d2	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  003d8	0f b6 c8	 movzx	 ecx, al
  003db	d3 e2		 shl	 edx, cl
  003dd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003e2	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  003e9	0b ca		 or	 ecx, edx
  003eb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003f0	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003f7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003fc	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00402	03 4c 24 24	 add	 ecx, DWORD PTR len$78423[rsp]
  00406	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0040b	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN20@send_tree:
  00411	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00414	83 e8 01	 sub	 eax, 1
  00417	89 04 24	 mov	 DWORD PTR count$[rsp], eax
$LN22@send_tree:

; 778  :             }
; 779  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 780  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  0041a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0041f	0f b7 80 e6 0a
	00 00		 movzx	 eax, WORD PTR [rax+2790]
  00426	89 44 24 2c	 mov	 DWORD PTR len$78435[rsp], eax
  0042a	b9 10 00 00 00	 mov	 ecx, 16
  0042f	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78435[rsp]
  00433	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00438	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0043e	0f 8e fe 00 00
	00		 jle	 $LN19@send_tree
  00444	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00449	0f b7 80 e4 0a
	00 00		 movzx	 eax, WORD PTR [rax+2788]
  00450	89 44 24 30	 mov	 DWORD PTR val$78439[rsp], eax
  00454	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00459	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0045f	0f b6 c8	 movzx	 ecx, al
  00462	8b 54 24 30	 mov	 edx, DWORD PTR val$78439[rsp]
  00466	d3 e2		 shl	 edx, cl
  00468	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0046d	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00474	0b ca		 or	 ecx, edx
  00476	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0047b	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00482	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00487	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0048e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00494	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00499	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0049c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004a1	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004a5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  004a8	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004ad	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004b0	83 c1 01	 add	 ecx, 1
  004b3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004b8	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  004bb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004c0	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  004c7	c1 fa 08	 sar	 edx, 8
  004ca	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004cf	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004d2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004d7	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004db	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  004de	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004e3	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004e6	83 c1 01	 add	 ecx, 1
  004e9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004ee	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  004f1	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78439[rsp]
  004f6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004fb	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00502	b8 10 00 00 00	 mov	 eax, 16
  00507	48 2b c1	 sub	 rax, rcx
  0050a	0f b6 c8	 movzx	 ecx, al
  0050d	8b c2		 mov	 eax, edx
  0050f	d3 f8		 sar	 eax, cl
  00511	8b c8		 mov	 ecx, eax
  00513	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00518	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0051f	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78435[rsp]
  00524	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00529	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00530	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00535	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0053a	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00540	eb 50		 jmp	 SHORT $LN18@send_tree
$LN19@send_tree:
  00542	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00547	0f b7 90 e4 0a
	00 00		 movzx	 edx, WORD PTR [rax+2788]
  0054e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00553	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00559	0f b6 c8	 movzx	 ecx, al
  0055c	d3 e2		 shl	 edx, cl
  0055e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00563	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0056a	0b ca		 or	 ecx, edx
  0056c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00571	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00578	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0057d	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00583	03 4c 24 2c	 add	 ecx, DWORD PTR len$78435[rsp]
  00587	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0058c	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN18@send_tree:
  00592	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR len$78447[rsp], 2
  0059a	b9 10 00 00 00	 mov	 ecx, 16
  0059f	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78447[rsp]
  005a3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005a8	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  005ae	0f 8e f8 00 00
	00		 jle	 $LN17@send_tree
  005b4	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  005b7	83 e8 03	 sub	 eax, 3
  005ba	89 44 24 38	 mov	 DWORD PTR val$78451[rsp], eax
  005be	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005c3	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005c9	0f b6 c8	 movzx	 ecx, al
  005cc	8b 54 24 38	 mov	 edx, DWORD PTR val$78451[rsp]
  005d0	d3 e2		 shl	 edx, cl
  005d2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005d7	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005de	0b ca		 or	 ecx, edx
  005e0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005e5	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005ec	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005f1	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  005f8	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005fe	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00603	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00606	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0060b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0060f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00612	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00617	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0061a	83 c1 01	 add	 ecx, 1
  0061d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00622	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00625	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0062a	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00631	c1 fa 08	 sar	 edx, 8
  00634	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00639	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0063c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00641	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00645	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00648	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0064d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00650	83 c1 01	 add	 ecx, 1
  00653	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00658	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0065b	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78451[rsp]
  00660	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00665	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0066c	b8 10 00 00 00	 mov	 eax, 16
  00671	48 2b c1	 sub	 rax, rcx
  00674	0f b6 c8	 movzx	 ecx, al
  00677	8b c2		 mov	 eax, edx
  00679	d3 f8		 sar	 eax, cl
  0067b	8b c8		 mov	 ecx, eax
  0067d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00682	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00689	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78447[rsp]
  0068e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00693	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0069a	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0069f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006a4	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  006aa	eb 4a		 jmp	 SHORT $LN16@send_tree
$LN17@send_tree:
  006ac	8b 14 24	 mov	 edx, DWORD PTR count$[rsp]
  006af	83 ea 03	 sub	 edx, 3
  006b2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006b7	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  006bd	0f b6 c8	 movzx	 ecx, al
  006c0	d3 e2		 shl	 edx, cl
  006c2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006c7	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  006ce	0b ca		 or	 ecx, edx
  006d0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006d5	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  006dc	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006e1	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  006e7	03 4c 24 34	 add	 ecx, DWORD PTR len$78447[rsp]
  006eb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006f0	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN16@send_tree:
  006f6	e9 c7 05 00 00	 jmp	 $LN15@send_tree
$LN23@send_tree:

; 781  : 
; 782  :         } else if (count <= 10) {

  006fb	83 3c 24 0a	 cmp	 DWORD PTR count$[rsp], 10
  006ff	0f 8f e1 02 00
	00		 jg	 $LN14@send_tree

; 783  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  00705	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0070a	0f b7 80 ea 0a
	00 00		 movzx	 eax, WORD PTR [rax+2794]
  00711	89 44 24 3c	 mov	 DWORD PTR len$78461[rsp], eax
  00715	b9 10 00 00 00	 mov	 ecx, 16
  0071a	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$78461[rsp]
  0071e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00723	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00729	0f 8e fe 00 00
	00		 jle	 $LN13@send_tree
  0072f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00734	0f b7 80 e8 0a
	00 00		 movzx	 eax, WORD PTR [rax+2792]
  0073b	89 44 24 40	 mov	 DWORD PTR val$78465[rsp], eax
  0073f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00744	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0074a	0f b6 c8	 movzx	 ecx, al
  0074d	8b 54 24 40	 mov	 edx, DWORD PTR val$78465[rsp]
  00751	d3 e2		 shl	 edx, cl
  00753	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00758	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0075f	0b ca		 or	 ecx, edx
  00761	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00766	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0076d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00772	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00779	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0077f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00784	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00787	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0078c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00790	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00793	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00798	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0079b	83 c1 01	 add	 ecx, 1
  0079e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007a3	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007a6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007ab	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  007b2	c1 fa 08	 sar	 edx, 8
  007b5	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007ba	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007bd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007c2	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007c6	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007c9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007ce	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007d1	83 c1 01	 add	 ecx, 1
  007d4	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007d9	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007dc	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78465[rsp]
  007e1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007e6	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  007ed	b8 10 00 00 00	 mov	 eax, 16
  007f2	48 2b c1	 sub	 rax, rcx
  007f5	0f b6 c8	 movzx	 ecx, al
  007f8	8b c2		 mov	 eax, edx
  007fa	d3 f8		 sar	 eax, cl
  007fc	8b c8		 mov	 ecx, eax
  007fe	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00803	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0080a	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$78461[rsp]
  0080f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00814	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0081b	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00820	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00825	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0082b	eb 50		 jmp	 SHORT $LN12@send_tree
$LN13@send_tree:
  0082d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00832	0f b7 90 e8 0a
	00 00		 movzx	 edx, WORD PTR [rax+2792]
  00839	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0083e	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00844	0f b6 c8	 movzx	 ecx, al
  00847	d3 e2		 shl	 edx, cl
  00849	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0084e	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00855	0b ca		 or	 ecx, edx
  00857	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0085c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00863	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00868	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0086e	03 4c 24 3c	 add	 ecx, DWORD PTR len$78461[rsp]
  00872	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00877	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN12@send_tree:
  0087d	c7 44 24 44 03
	00 00 00	 mov	 DWORD PTR len$78473[rsp], 3
  00885	b9 10 00 00 00	 mov	 ecx, 16
  0088a	2b 4c 24 44	 sub	 ecx, DWORD PTR len$78473[rsp]
  0088e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00893	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00899	0f 8e f8 00 00
	00		 jle	 $LN11@send_tree
  0089f	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  008a2	83 e8 03	 sub	 eax, 3
  008a5	89 44 24 48	 mov	 DWORD PTR val$78477[rsp], eax
  008a9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008ae	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  008b4	0f b6 c8	 movzx	 ecx, al
  008b7	8b 54 24 48	 mov	 edx, DWORD PTR val$78477[rsp]
  008bb	d3 e2		 shl	 edx, cl
  008bd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008c2	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  008c9	0b ca		 or	 ecx, edx
  008cb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008d0	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  008d7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008dc	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  008e3	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  008e9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008ee	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  008f1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008f6	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  008fa	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  008fd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00902	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00905	83 c1 01	 add	 ecx, 1
  00908	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0090d	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00910	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00915	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0091c	c1 fa 08	 sar	 edx, 8
  0091f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00924	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00927	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0092c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00930	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00933	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00938	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0093b	83 c1 01	 add	 ecx, 1
  0093e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00943	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00946	0f b7 54 24 48	 movzx	 edx, WORD PTR val$78477[rsp]
  0094b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00950	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00957	b8 10 00 00 00	 mov	 eax, 16
  0095c	48 2b c1	 sub	 rax, rcx
  0095f	0f b6 c8	 movzx	 ecx, al
  00962	8b c2		 mov	 eax, edx
  00964	d3 f8		 sar	 eax, cl
  00966	8b c8		 mov	 ecx, eax
  00968	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0096d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00974	48 63 4c 24 44	 movsxd	 rcx, DWORD PTR len$78473[rsp]
  00979	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0097e	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00985	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0098a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0098f	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00995	eb 4a		 jmp	 SHORT $LN10@send_tree
$LN11@send_tree:
  00997	8b 14 24	 mov	 edx, DWORD PTR count$[rsp]
  0099a	83 ea 03	 sub	 edx, 3
  0099d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009a2	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  009a8	0f b6 c8	 movzx	 ecx, al
  009ab	d3 e2		 shl	 edx, cl
  009ad	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009b2	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  009b9	0b ca		 or	 ecx, edx
  009bb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009c0	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  009c7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009cc	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  009d2	03 4c 24 44	 add	 ecx, DWORD PTR len$78473[rsp]
  009d6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009db	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN10@send_tree:

; 784  : 
; 785  :         } else {

  009e1	e9 dc 02 00 00	 jmp	 $LN9@send_tree
$LN14@send_tree:

; 786  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  009e6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009eb	0f b7 80 ee 0a
	00 00		 movzx	 eax, WORD PTR [rax+2798]
  009f2	89 44 24 4c	 mov	 DWORD PTR len$78486[rsp], eax
  009f6	b9 10 00 00 00	 mov	 ecx, 16
  009fb	2b 4c 24 4c	 sub	 ecx, DWORD PTR len$78486[rsp]
  009ff	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a04	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00a0a	0f 8e fe 00 00
	00		 jle	 $LN8@send_tree
  00a10	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a15	0f b7 80 ec 0a
	00 00		 movzx	 eax, WORD PTR [rax+2796]
  00a1c	89 44 24 50	 mov	 DWORD PTR val$78490[rsp], eax
  00a20	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a25	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00a2b	0f b6 c8	 movzx	 ecx, al
  00a2e	8b 54 24 50	 mov	 edx, DWORD PTR val$78490[rsp]
  00a32	d3 e2		 shl	 edx, cl
  00a34	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a39	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00a40	0b ca		 or	 ecx, edx
  00a42	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a47	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00a4e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a53	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00a5a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00a60	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a65	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00a68	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a6d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00a71	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00a74	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a79	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00a7c	83 c1 01	 add	 ecx, 1
  00a7f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a84	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00a87	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a8c	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00a93	c1 fa 08	 sar	 edx, 8
  00a96	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a9b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00a9e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00aa3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00aa7	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00aaa	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00aaf	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00ab2	83 c1 01	 add	 ecx, 1
  00ab5	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00aba	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00abd	0f b7 54 24 50	 movzx	 edx, WORD PTR val$78490[rsp]
  00ac2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ac7	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00ace	b8 10 00 00 00	 mov	 eax, 16
  00ad3	48 2b c1	 sub	 rax, rcx
  00ad6	0f b6 c8	 movzx	 ecx, al
  00ad9	8b c2		 mov	 eax, edx
  00adb	d3 f8		 sar	 eax, cl
  00add	8b c8		 mov	 ecx, eax
  00adf	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ae4	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00aeb	48 63 4c 24 4c	 movsxd	 rcx, DWORD PTR len$78486[rsp]
  00af0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00af5	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00afc	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00b01	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b06	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00b0c	eb 50		 jmp	 SHORT $LN7@send_tree
$LN8@send_tree:
  00b0e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b13	0f b7 90 ec 0a
	00 00		 movzx	 edx, WORD PTR [rax+2796]
  00b1a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b1f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00b25	0f b6 c8	 movzx	 ecx, al
  00b28	d3 e2		 shl	 edx, cl
  00b2a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b2f	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00b36	0b ca		 or	 ecx, edx
  00b38	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b3d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00b44	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b49	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00b4f	03 4c 24 4c	 add	 ecx, DWORD PTR len$78486[rsp]
  00b53	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b58	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN7@send_tree:
  00b5e	c7 44 24 54 07
	00 00 00	 mov	 DWORD PTR len$78498[rsp], 7
  00b66	b9 10 00 00 00	 mov	 ecx, 16
  00b6b	2b 4c 24 54	 sub	 ecx, DWORD PTR len$78498[rsp]
  00b6f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b74	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00b7a	0f 8e f8 00 00
	00		 jle	 $LN6@send_tree
  00b80	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00b83	83 e8 0b	 sub	 eax, 11
  00b86	89 44 24 58	 mov	 DWORD PTR val$78502[rsp], eax
  00b8a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b8f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00b95	0f b6 c8	 movzx	 ecx, al
  00b98	8b 54 24 58	 mov	 edx, DWORD PTR val$78502[rsp]
  00b9c	d3 e2		 shl	 edx, cl
  00b9e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ba3	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00baa	0b ca		 or	 ecx, edx
  00bac	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bb1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00bb8	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bbd	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00bc4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00bca	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bcf	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00bd2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bd7	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00bdb	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00bde	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00be3	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00be6	83 c1 01	 add	 ecx, 1
  00be9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bee	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00bf1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bf6	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00bfd	c1 fa 08	 sar	 edx, 8
  00c00	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c05	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00c08	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c0d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00c11	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00c14	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c19	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00c1c	83 c1 01	 add	 ecx, 1
  00c1f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c24	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00c27	0f b7 54 24 58	 movzx	 edx, WORD PTR val$78502[rsp]
  00c2c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c31	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00c38	b8 10 00 00 00	 mov	 eax, 16
  00c3d	48 2b c1	 sub	 rax, rcx
  00c40	0f b6 c8	 movzx	 ecx, al
  00c43	8b c2		 mov	 eax, edx
  00c45	d3 f8		 sar	 eax, cl
  00c47	8b c8		 mov	 ecx, eax
  00c49	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c4e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00c55	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR len$78498[rsp]
  00c5a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c5f	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00c66	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00c6b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c70	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00c76	eb 4a		 jmp	 SHORT $LN5@send_tree
$LN6@send_tree:
  00c78	8b 14 24	 mov	 edx, DWORD PTR count$[rsp]
  00c7b	83 ea 0b	 sub	 edx, 11
  00c7e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c83	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00c89	0f b6 c8	 movzx	 ecx, al
  00c8c	d3 e2		 shl	 edx, cl
  00c8e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c93	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00c9a	0b ca		 or	 ecx, edx
  00c9c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ca1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00ca8	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00cad	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00cb3	03 4c 24 54	 add	 ecx, DWORD PTR len$78498[rsp]
  00cb7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00cbc	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN5@send_tree:
$LN9@send_tree:
$LN15@send_tree:
$LN24@send_tree:
$LN31@send_tree:

; 787  :         }
; 788  :         count = 0; prevlen = curlen;

  00cc2	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
  00cc9	8b 44 24 08	 mov	 eax, DWORD PTR curlen$[rsp]
  00ccd	89 44 24 10	 mov	 DWORD PTR prevlen$[rsp], eax

; 789  :         if (nextlen == 0) {

  00cd1	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00cd6	75 12		 jne	 SHORT $LN4@send_tree

; 790  :             max_count = 138, min_count = 3;

  00cd8	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  00ce0	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
  00ce8	eb 2c		 jmp	 SHORT $LN3@send_tree
$LN4@send_tree:

; 791  :         } else if (curlen == nextlen) {

  00cea	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00cee	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00cf2	75 12		 jne	 SHORT $LN2@send_tree

; 792  :             max_count = 6, min_count = 3;

  00cf4	c7 44 24 18 06
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 6
  00cfc	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3

; 793  :         } else {

  00d04	eb 10		 jmp	 SHORT $LN1@send_tree
$LN2@send_tree:

; 794  :             max_count = 7, min_count = 4;

  00d06	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7
  00d0e	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4
$LN1@send_tree:
$LN3@send_tree:

; 795  :         }
; 796  :     }

  00d16	e9 45 f3 ff ff	 jmp	 $LN34@send_tree
$LN33@send_tree:

; 797  : }

  00d1b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00d1f	c3		 ret	 0
send_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scan_tree DD imagerel scan_tree
	DD	imagerel scan_tree+511
	DD	imagerel $unwind$scan_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scan_tree DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT scan_tree
_TEXT	SEGMENT
count$ = 0
n$ = 4
curlen$ = 8
nextlen$ = 12
prevlen$ = 16
min_count$ = 20
max_count$ = 24
s$ = 48
tree$ = 56
max_code$ = 64
scan_tree PROC						; COMDAT

; 711  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 712  :     int n;                     /* iterates over all tree elements */
; 713  :     int prevlen = -1;          /* last emitted length */

  00013	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR prevlen$[rsp], -1

; 714  :     int curlen;                /* length of current code */
; 715  :     int nextlen = tree[0].Len; /* length of next code */

  0001b	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  00020	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00024	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 716  :     int count = 0;             /* repeat count of the current code */

  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0

; 717  :     int max_count = 7;         /* max repeat count */

  0002f	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7

; 718  :     int min_count = 4;         /* min repeat count */

  00037	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4

; 719  : 
; 720  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0003f	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00044	75 10		 jne	 SHORT $LN17@scan_tree
  00046	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  0004e	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
$LN17@scan_tree:

; 721  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00056	8b 44 24 40	 mov	 eax, DWORD PTR max_code$[rsp]
  0005a	83 c0 01	 add	 eax, 1
  0005d	48 63 d0	 movsxd	 rdx, eax
  00060	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00065	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  0006a	66 89 4c 90 02	 mov	 WORD PTR [rax+rdx*4+2], cx

; 722  : 
; 723  :     for (n = 0; n <= max_code; n++) {

  0006f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00077	eb 0b		 jmp	 SHORT $LN16@scan_tree
$LN15@scan_tree:
  00079	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN16@scan_tree:
  00084	8b 44 24 40	 mov	 eax, DWORD PTR max_code$[rsp]
  00088	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0008c	0f 8f 68 01 00
	00		 jg	 $LN14@scan_tree

; 724  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00092	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00096	89 44 24 08	 mov	 DWORD PTR curlen$[rsp], eax
  0009a	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	48 63 c8	 movsxd	 rcx, eax
  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  000a9	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  000ae	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 725  :         if (++count < max_count && curlen == nextlen) {

  000b2	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  000b5	83 c0 01	 add	 eax, 1
  000b8	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  000bb	8b 44 24 18	 mov	 eax, DWORD PTR max_count$[rsp]
  000bf	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000c2	7d 11		 jge	 SHORT $LN13@scan_tree
  000c4	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  000c8	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  000cc	75 07		 jne	 SHORT $LN13@scan_tree
  000ce	eb a9		 jmp	 SHORT $LN15@scan_tree

; 726  :             continue;

  000d0	e9 cc 00 00 00	 jmp	 $LN12@scan_tree
$LN13@scan_tree:

; 727  :         } else if (count < min_count) {

  000d5	8b 44 24 14	 mov	 eax, DWORD PTR min_count$[rsp]
  000d9	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000dc	7d 2c		 jge	 SHORT $LN11@scan_tree

; 728  :             s->bl_tree[curlen].Freq += count;

  000de	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000e3	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000e8	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  000f0	03 14 24	 add	 edx, DWORD PTR count$[rsp]
  000f3	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000fd	66 89 94 88 a4
	0a 00 00	 mov	 WORD PTR [rax+rcx*4+2724], dx
  00105	e9 97 00 00 00	 jmp	 $LN10@scan_tree
$LN11@scan_tree:

; 729  :         } else if (curlen != 0) {

  0010a	83 7c 24 08 00	 cmp	 DWORD PTR curlen$[rsp], 0
  0010f	74 50		 je	 SHORT $LN9@scan_tree

; 730  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00111	8b 44 24 10	 mov	 eax, DWORD PTR prevlen$[rsp]
  00115	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00119	74 28		 je	 SHORT $LN8@scan_tree
  0011b	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00120	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00125	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  0012d	66 83 c2 01	 add	 dx, 1
  00131	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0013b	66 89 94 88 a4
	0a 00 00	 mov	 WORD PTR [rax+rcx*4+2724], dx
$LN8@scan_tree:

; 731  :             s->bl_tree[REP_3_6].Freq++;

  00143	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00148	0f b7 88 e4 0a
	00 00		 movzx	 ecx, WORD PTR [rax+2788]
  0014f	66 83 c1 01	 add	 cx, 1
  00153	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00158	66 89 88 e4 0a
	00 00		 mov	 WORD PTR [rax+2788], cx
  0015f	eb 40		 jmp	 SHORT $LN7@scan_tree
$LN9@scan_tree:

; 732  :         } else if (count <= 10) {

  00161	83 3c 24 0a	 cmp	 DWORD PTR count$[rsp], 10
  00165	7f 1e		 jg	 SHORT $LN6@scan_tree

; 733  :             s->bl_tree[REPZ_3_10].Freq++;

  00167	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0016c	0f b7 88 e8 0a
	00 00		 movzx	 ecx, WORD PTR [rax+2792]
  00173	66 83 c1 01	 add	 cx, 1
  00177	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0017c	66 89 88 e8 0a
	00 00		 mov	 WORD PTR [rax+2792], cx

; 734  :         } else {

  00183	eb 1c		 jmp	 SHORT $LN5@scan_tree
$LN6@scan_tree:

; 735  :             s->bl_tree[REPZ_11_138].Freq++;

  00185	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0018a	0f b7 88 ec 0a
	00 00		 movzx	 ecx, WORD PTR [rax+2796]
  00191	66 83 c1 01	 add	 cx, 1
  00195	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0019a	66 89 88 ec 0a
	00 00		 mov	 WORD PTR [rax+2796], cx
$LN5@scan_tree:
$LN7@scan_tree:
$LN10@scan_tree:
$LN12@scan_tree:

; 736  :         }
; 737  :         count = 0; prevlen = curlen;

  001a1	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
  001a8	8b 44 24 08	 mov	 eax, DWORD PTR curlen$[rsp]
  001ac	89 44 24 10	 mov	 DWORD PTR prevlen$[rsp], eax

; 738  :         if (nextlen == 0) {

  001b0	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  001b5	75 12		 jne	 SHORT $LN4@scan_tree

; 739  :             max_count = 138, min_count = 3;

  001b7	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  001bf	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
  001c7	eb 2c		 jmp	 SHORT $LN3@scan_tree
$LN4@scan_tree:

; 740  :         } else if (curlen == nextlen) {

  001c9	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  001cd	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  001d1	75 12		 jne	 SHORT $LN2@scan_tree

; 741  :             max_count = 6, min_count = 3;

  001d3	c7 44 24 18 06
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 6
  001db	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3

; 742  :         } else {

  001e3	eb 10		 jmp	 SHORT $LN1@scan_tree
$LN2@scan_tree:

; 743  :             max_count = 7, min_count = 4;

  001e5	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7
  001ed	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4
$LN1@scan_tree:
$LN3@scan_tree:

; 744  :         }
; 745  :     }

  001f5	e9 7f fe ff ff	 jmp	 $LN15@scan_tree
$LN14@scan_tree:

; 746  : }

  001fa	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001fe	c3		 ret	 0
scan_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_codes DD imagerel gen_codes
	DD	imagerel gen_codes+245
	DD	imagerel $unwind$gen_codes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_codes DD 021301H
	DD	0300fb213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_codes
_TEXT	SEGMENT
n$ = 32
code$ = 36
bits$ = 40
next_code$ = 48
len$78324 = 80
tv134 = 84
tree$ = 112
max_code$ = 120
bl_count$ = 128
gen_codes PROC						; COMDAT

; 581  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	53		 push	 rbx
  0000f	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 582  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 583  :     ush code = 0;              /* running code value */

  00013	33 c0		 xor	 eax, eax
  00015	66 89 44 24 24	 mov	 WORD PTR code$[rsp], ax

; 584  :     int bits;                  /* bit index */
; 585  :     int n;                     /* code index */
; 586  : 
; 587  :     /* The distribution counts are first used to generate the code values
; 588  :      * without bit reversal.
; 589  :      */
; 590  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  0001a	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR bits$[rsp], 1
  00022	eb 0b		 jmp	 SHORT $LN7@gen_codes
$LN6@gen_codes:
  00024	8b 44 24 28	 mov	 eax, DWORD PTR bits$[rsp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 44 24 28	 mov	 DWORD PTR bits$[rsp], eax
$LN7@gen_codes:
  0002f	83 7c 24 28 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00034	7f 37		 jg	 SHORT $LN5@gen_codes

; 591  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00036	0f b7 54 24 24	 movzx	 edx, WORD PTR code$[rsp]
  0003b	8b 44 24 28	 mov	 eax, DWORD PTR bits$[rsp]
  0003f	83 e8 01	 sub	 eax, 1
  00042	48 63 c8	 movsxd	 rcx, eax
  00045	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bl_count$[rsp]
  0004d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00051	8b c2		 mov	 eax, edx
  00053	03 c1		 add	 eax, ecx
  00055	d1 e0		 shl	 eax, 1
  00057	66 89 44 24 24	 mov	 WORD PTR code$[rsp], ax
  0005c	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00061	0f b7 44 24 24	 movzx	 eax, WORD PTR code$[rsp]
  00066	66 89 44 4c 30	 mov	 WORD PTR next_code$[rsp+rcx*2], ax

; 592  :     }

  0006b	eb b7		 jmp	 SHORT $LN6@gen_codes
$LN5@gen_codes:

; 593  :     /* Check that the bit counts in bl_count are consistent. The last code
; 594  :      * must be all ones.
; 595  :      */
; 596  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 597  :             "inconsistent bit counts");
; 598  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 599  : 
; 600  :     for (n = 0;  n <= max_code; n++) {

  0006d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00075	eb 0b		 jmp	 SHORT $LN4@gen_codes
$LN3@gen_codes:
  00077	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0007b	83 c0 01	 add	 eax, 1
  0007e	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN4@gen_codes:
  00082	8b 44 24 78	 mov	 eax, DWORD PTR max_code$[rsp]
  00086	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  0008a	7f 63		 jg	 SHORT $LN2@gen_codes

; 601  :         int len = tree[n].Len;

  0008c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00091	48 8b 44 24 70	 mov	 rax, QWORD PTR tree$[rsp]
  00096	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  0009b	89 44 24 50	 mov	 DWORD PTR len$78324[rsp], eax

; 602  :         if (len == 0) continue;

  0009f	83 7c 24 50 00	 cmp	 DWORD PTR len$78324[rsp], 0
  000a4	75 02		 jne	 SHORT $LN1@gen_codes
  000a6	eb cf		 jmp	 SHORT $LN3@gen_codes
$LN1@gen_codes:

; 603  :         /* Now reverse the bits */
; 604  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  000a8	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$78324[rsp]
  000ad	0f b7 44 44 30	 movzx	 eax, WORD PTR next_code$[rsp+rax*2]
  000b2	89 44 24 54	 mov	 DWORD PTR tv134[rsp], eax
  000b6	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$78324[rsp]
  000bb	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$78324[rsp]
  000c0	0f b7 44 44 30	 movzx	 eax, WORD PTR next_code$[rsp+rax*2]
  000c5	66 83 c0 01	 add	 ax, 1
  000c9	66 89 44 4c 30	 mov	 WORD PTR next_code$[rsp+rcx*2], ax
  000ce	48 63 5c 24 20	 movsxd	 rbx, DWORD PTR n$[rsp]
  000d3	8b 54 24 50	 mov	 edx, DWORD PTR len$78324[rsp]
  000d7	8b 4c 24 54	 mov	 ecx, DWORD PTR tv134[rsp]
  000db	e8 00 00 00 00	 call	 bi_reverse
  000e0	44 8b d8	 mov	 r11d, eax
  000e3	48 8b 44 24 70	 mov	 rax, QWORD PTR tree$[rsp]
  000e8	66 44 89 1c 98	 mov	 WORD PTR [rax+rbx*4], r11w

; 605  : 
; 606  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 607  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 608  :     }

  000ed	eb 88		 jmp	 SHORT $LN3@gen_codes
$LN2@gen_codes:

; 609  : }

  000ef	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000f3	5b		 pop	 rbx
  000f4	c3		 ret	 0
gen_codes ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_bitlen DD imagerel gen_bitlen
	DD	imagerel gen_bitlen+1010
	DD	imagerel $unwind$gen_bitlen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_bitlen DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_bitlen
_TEXT	SEGMENT
h$ = 0
n$ = 4
extra$ = 8
overflow$ = 16
base$ = 20
f$ = 24
max_length$ = 28
bits$ = 32
xbits$ = 36
tree$ = 40
max_code$ = 48
m$ = 52
stree$ = 56
s$ = 80
desc$ = 88
gen_bitlen PROC						; COMDAT

; 493  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 494  :     ct_data *tree        = desc->dyn_tree;

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 28	 mov	 QWORD PTR tree$[rsp], rax

; 495  :     int max_code         = desc->max_code;

  0001b	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  00020	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00023	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax

; 496  :     const ct_data *stree = desc->stat_desc->static_tree;

  00027	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0002c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00030	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00033	48 89 44 24 38	 mov	 QWORD PTR stree$[rsp], rax

; 497  :     const intf *extra    = desc->stat_desc->extra_bits;

  00038	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0003d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00041	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00045	48 89 44 24 08	 mov	 QWORD PTR extra$[rsp], rax

; 498  :     int base             = desc->stat_desc->extra_base;

  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0004f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00053	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00056	89 44 24 14	 mov	 DWORD PTR base$[rsp], eax

; 499  :     int max_length       = desc->stat_desc->max_length;

  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0005f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00063	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00066	89 44 24 1c	 mov	 DWORD PTR max_length$[rsp], eax

; 500  :     int h;              /* heap index */
; 501  :     int n, m;           /* iterate over the tree elements */
; 502  :     int bits;           /* bit length */
; 503  :     int xbits;          /* extra bits */
; 504  :     ush f;              /* frequency */
; 505  :     int overflow = 0;   /* number of elements with bit length too large */

  0006a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR overflow$[rsp], 0

; 506  : 
; 507  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  00072	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR bits$[rsp], 0
  0007a	eb 0b		 jmp	 SHORT $LN23@gen_bitlen
$LN22@gen_bitlen:
  0007c	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN23@gen_bitlen:
  00087	83 7c 24 20 0f	 cmp	 DWORD PTR bits$[rsp], 15
  0008c	7f 16		 jg	 SHORT $LN21@gen_bitlen
  0008e	48 63 54 24 20	 movsxd	 rdx, DWORD PTR bits$[rsp]
  00093	33 c9		 xor	 ecx, ecx
  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0009a	66 89 8c 50 88
	0b 00 00	 mov	 WORD PTR [rax+rdx*2+2952], cx
  000a2	eb d8		 jmp	 SHORT $LN22@gen_bitlen
$LN21@gen_bitlen:

; 508  : 
; 509  :     /* In a first pass, compute the optimal bit lengths (which may
; 510  :      * overflow in the case of the bit length tree).
; 511  :      */
; 512  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a9	48 63 88 a0 14
	00 00		 movsxd	 rcx, DWORD PTR [rax+5280]
  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000b5	48 63 94 88 a8
	0b 00 00	 movsxd	 rdx, DWORD PTR [rax+rcx*4+2984]
  000bd	33 c9		 xor	 ecx, ecx
  000bf	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000c4	66 89 4c 90 02	 mov	 WORD PTR [rax+rdx*4+2], cx

; 513  : 
; 514  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ce	8b 80 a0 14 00
	00		 mov	 eax, DWORD PTR [rax+5280]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 04 24	 mov	 DWORD PTR h$[rsp], eax
  000da	eb 09		 jmp	 SHORT $LN20@gen_bitlen
$LN19@gen_bitlen:
  000dc	8b 04 24	 mov	 eax, DWORD PTR h$[rsp]
  000df	83 c0 01	 add	 eax, 1
  000e2	89 04 24	 mov	 DWORD PTR h$[rsp], eax
$LN20@gen_bitlen:
  000e5	81 3c 24 3d 02
	00 00		 cmp	 DWORD PTR h$[rsp], 573	; 0000023dH
  000ec	0f 8d 44 01 00
	00		 jge	 $LN18@gen_bitlen

; 515  :         n = s->heap[h];

  000f2	48 63 0c 24	 movsxd	 rcx, DWORD PTR h$[rsp]
  000f6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000fb	8b 84 88 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2984]
  00102	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax

; 516  :         bits = tree[tree[n].Dad].Len + 1;

  00106	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  0010b	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00110	0f b7 4c 88 02	 movzx	 ecx, WORD PTR [rax+rcx*4+2]
  00115	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0011a	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  0011f	83 c0 01	 add	 eax, 1
  00122	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax

; 517  :         if (bits > max_length) bits = max_length, overflow++;

  00126	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  0012a	39 44 24 20	 cmp	 DWORD PTR bits$[rsp], eax
  0012e	7e 13		 jle	 SHORT $LN17@gen_bitlen
  00130	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  00134	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  00138	8b 44 24 10	 mov	 eax, DWORD PTR overflow$[rsp]
  0013c	83 c0 01	 add	 eax, 1
  0013f	89 44 24 10	 mov	 DWORD PTR overflow$[rsp], eax
$LN17@gen_bitlen:

; 518  :         tree[n].Len = (ush)bits;

  00143	48 63 54 24 04	 movsxd	 rdx, DWORD PTR n$[rsp]
  00148	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0014d	0f b7 44 24 20	 movzx	 eax, WORD PTR bits$[rsp]
  00152	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax

; 519  :         /* We overwrite tree[n].Dad which is no longer needed */
; 520  : 
; 521  :         if (n > max_code) continue; /* not a leaf node */

  00157	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  0015b	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0015f	7e 05		 jle	 SHORT $LN16@gen_bitlen
  00161	e9 76 ff ff ff	 jmp	 $LN19@gen_bitlen
$LN16@gen_bitlen:

; 522  : 
; 523  :         s->bl_count[bits]++;

  00166	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0016b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00170	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  00178	66 83 c2 01	 add	 dx, 1
  0017c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00181	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00186	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 524  :         xbits = 0;

  0018e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR xbits$[rsp], 0

; 525  :         if (n >= base) xbits = extra[n-base];

  00196	8b 44 24 14	 mov	 eax, DWORD PTR base$[rsp]
  0019a	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0019e	7c 19		 jl	 SHORT $LN15@gen_bitlen
  001a0	8b 4c 24 14	 mov	 ecx, DWORD PTR base$[rsp]
  001a4	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  001a8	2b c1		 sub	 eax, ecx
  001aa	48 63 c8	 movsxd	 rcx, eax
  001ad	48 8b 44 24 08	 mov	 rax, QWORD PTR extra$[rsp]
  001b2	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  001b5	89 44 24 24	 mov	 DWORD PTR xbits$[rsp], eax
$LN15@gen_bitlen:

; 526  :         f = tree[n].Freq;

  001b9	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  001be	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  001c3	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  001c7	66 89 44 24 18	 mov	 WORD PTR f$[rsp], ax

; 527  :         s->opt_len += (ulg)f * (bits + xbits);

  001cc	0f b7 54 24 18	 movzx	 edx, WORD PTR f$[rsp]
  001d1	8b 4c 24 24	 mov	 ecx, DWORD PTR xbits$[rsp]
  001d5	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  001d9	03 c1		 add	 eax, ecx
  001db	8b ca		 mov	 ecx, edx
  001dd	0f af c8	 imul	 ecx, eax
  001e0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e5	03 88 00 17 00
	00		 add	 ecx, DWORD PTR [rax+5888]
  001eb	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001f0	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx

; 528  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  001f6	48 83 7c 24 38
	00		 cmp	 QWORD PTR stree$[rsp], 0
  001fc	74 33		 je	 SHORT $LN14@gen_bitlen
  001fe	0f b7 54 24 18	 movzx	 edx, WORD PTR f$[rsp]
  00203	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  00208	48 8b 44 24 38	 mov	 rax, QWORD PTR stree$[rsp]
  0020d	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00212	03 44 24 24	 add	 eax, DWORD PTR xbits$[rsp]
  00216	8b ca		 mov	 ecx, edx
  00218	0f af c8	 imul	 ecx, eax
  0021b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00220	03 88 04 17 00
	00		 add	 ecx, DWORD PTR [rax+5892]
  00226	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0022b	89 88 04 17 00
	00		 mov	 DWORD PTR [rax+5892], ecx
$LN14@gen_bitlen:

; 529  :     }

  00231	e9 a6 fe ff ff	 jmp	 $LN19@gen_bitlen
$LN18@gen_bitlen:

; 530  :     if (overflow == 0) return;

  00236	83 7c 24 10 00	 cmp	 DWORD PTR overflow$[rsp], 0
  0023b	75 05		 jne	 SHORT $LN13@gen_bitlen
  0023d	e9 ab 01 00 00	 jmp	 $LN24@gen_bitlen
$LN13@gen_bitlen:
$LN12@gen_bitlen:

; 531  : 
; 532  :     Trace((stderr,"\nbit length overflow\n"));
; 533  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 534  : 
; 535  :     /* Find the first bit length which could increase: */
; 536  :     do {
; 537  :         bits = max_length-1;

  00242	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  00246	83 e8 01	 sub	 eax, 1
  00249	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN9@gen_bitlen:

; 538  :         while (s->bl_count[bits] == 0) bits--;

  0024d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00252	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00257	0f b7 84 48 88
	0b 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+2952]
  0025f	85 c0		 test	 eax, eax
  00261	75 0d		 jne	 SHORT $LN8@gen_bitlen
  00263	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00267	83 e8 01	 sub	 eax, 1
  0026a	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  0026e	eb dd		 jmp	 SHORT $LN9@gen_bitlen
$LN8@gen_bitlen:

; 539  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  00270	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00275	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0027a	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  00282	66 83 ea 01	 sub	 dx, 1
  00286	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0028b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00290	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 540  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  00298	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  0029c	83 c0 01	 add	 eax, 1
  0029f	48 63 c8	 movsxd	 rcx, eax
  002a2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002a7	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  002af	83 c2 02	 add	 edx, 2
  002b2	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  002b6	83 c0 01	 add	 eax, 1
  002b9	48 63 c8	 movsxd	 rcx, eax
  002bc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002c1	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 541  :         s->bl_count[max_length]--;

  002c9	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR max_length$[rsp]
  002ce	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002d3	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  002db	66 83 ea 01	 sub	 dx, 1
  002df	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR max_length$[rsp]
  002e4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002e9	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 542  :         /* The brother of the overflow item also moves one step up,
; 543  :          * but this does not affect bl_count[max_length]
; 544  :          */
; 545  :         overflow -= 2;

  002f1	8b 44 24 10	 mov	 eax, DWORD PTR overflow$[rsp]
  002f5	83 e8 02	 sub	 eax, 2
  002f8	89 44 24 10	 mov	 DWORD PTR overflow$[rsp], eax

; 546  :     } while (overflow > 0);

  002fc	83 7c 24 10 00	 cmp	 DWORD PTR overflow$[rsp], 0
  00301	0f 8f 3b ff ff
	ff		 jg	 $LN12@gen_bitlen

; 547  : 
; 548  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 549  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 550  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 551  :      * from 'ar' written by Haruhiko Okumura.)
; 552  :      */
; 553  :     for (bits = max_length; bits != 0; bits--) {

  00307	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  0030b	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  0030f	eb 0b		 jmp	 SHORT $LN7@gen_bitlen
$LN6@gen_bitlen:
  00311	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00315	83 e8 01	 sub	 eax, 1
  00318	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN7@gen_bitlen:
  0031c	83 7c 24 20 00	 cmp	 DWORD PTR bits$[rsp], 0
  00321	0f 84 c6 00 00
	00		 je	 $LN5@gen_bitlen

; 554  :         n = s->bl_count[bits];

  00327	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0032c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00331	0f b7 84 48 88
	0b 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+2952]
  00339	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN26@gen_bitlen:
$LN4@gen_bitlen:

; 555  :         while (n != 0) {

  0033d	83 7c 24 04 00	 cmp	 DWORD PTR n$[rsp], 0
  00342	0f 84 a0 00 00
	00		 je	 $LN3@gen_bitlen

; 556  :             m = s->heap[--h];

  00348	8b 04 24	 mov	 eax, DWORD PTR h$[rsp]
  0034b	83 e8 01	 sub	 eax, 1
  0034e	89 04 24	 mov	 DWORD PTR h$[rsp], eax
  00351	48 63 0c 24	 movsxd	 rcx, DWORD PTR h$[rsp]
  00355	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0035a	8b 84 88 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2984]
  00361	89 44 24 34	 mov	 DWORD PTR m$[rsp], eax

; 557  :             if (m > max_code) continue;

  00365	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00369	39 44 24 34	 cmp	 DWORD PTR m$[rsp], eax
  0036d	7e 02		 jle	 SHORT $LN2@gen_bitlen
  0036f	eb cc		 jmp	 SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:

; 558  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  00371	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  00376	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0037b	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00380	3b 44 24 20	 cmp	 eax, DWORD PTR bits$[rsp]
  00384	74 52		 je	 SHORT $LN1@gen_bitlen

; 559  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 560  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 561  :                               *(long)tree[m].Freq;

  00386	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  0038b	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00390	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00395	8b 54 24 20	 mov	 edx, DWORD PTR bits$[rsp]
  00399	2b d0		 sub	 edx, eax
  0039b	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  003a0	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  003a5	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  003a9	8b ca		 mov	 ecx, edx
  003ab	0f af c8	 imul	 ecx, eax
  003ae	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003b3	03 88 00 17 00
	00		 add	 ecx, DWORD PTR [rax+5888]
  003b9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003be	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx

; 562  :                 tree[m].Len = (ush)bits;

  003c4	48 63 54 24 34	 movsxd	 rdx, DWORD PTR m$[rsp]
  003c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003ce	0f b7 44 24 20	 movzx	 eax, WORD PTR bits$[rsp]
  003d3	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax
$LN1@gen_bitlen:

; 563  :             }
; 564  :             n--;

  003d8	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  003dc	83 e8 01	 sub	 eax, 1
  003df	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax

; 565  :         }

  003e3	e9 55 ff ff ff	 jmp	 $LN26@gen_bitlen
$LN3@gen_bitlen:

; 566  :     }

  003e8	e9 24 ff ff ff	 jmp	 $LN6@gen_bitlen
$LN5@gen_bitlen:
$LN24@gen_bitlen:

; 567  : }

  003ed	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003f1	c3		 ret	 0
gen_bitlen ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pqdownheap DD imagerel pqdownheap
	DD	imagerel pqdownheap+528
	DD	imagerel $unwind$pqdownheap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pqdownheap DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pqdownheap
_TEXT	SEGMENT
v$ = 0
j$ = 4
s$ = 32
tree$ = 40
k$ = 48
pqdownheap PROC						; COMDAT

; 459  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 460  :     int v = s->heap[k];

  00013	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR k$[rsp]
  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0001d	8b 84 88 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2984]
  00024	89 04 24	 mov	 DWORD PTR v$[rsp], eax

; 461  :     int j = k << 1;  /* left son of k */

  00027	8b 44 24 30	 mov	 eax, DWORD PTR k$[rsp]
  0002b	d1 e0		 shl	 eax, 1
  0002d	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax
$LN6@pqdownheap:

; 462  :     while (j <= s->heap_len) {

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  0003c	39 44 24 04	 cmp	 DWORD PTR j$[rsp], eax
  00040	0f 8f b1 01 00
	00		 jg	 $LN5@pqdownheap

; 463  :         /* Set j to the smallest of the two sons: */
; 464  :         if (j < s->heap_len &&
; 465  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004b	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  00051	39 44 24 04	 cmp	 DWORD PTR j$[rsp], eax
  00055	0f 8d d4 00 00
	00		 jge	 $LN4@pqdownheap
  0005b	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  0005f	83 c0 01	 add	 eax, 1
  00062	48 63 c8	 movsxd	 rcx, eax
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006a	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00077	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  0007b	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00085	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  0008d	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00092	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00096	3b d0		 cmp	 edx, eax
  00098	0f 8c 86 00 00
	00		 jl	 $LN3@pqdownheap
  0009e	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	48 63 c8	 movsxd	 rcx, eax
  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000ad	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000ba	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  000be	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  000c3	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c8	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000d5	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  000d9	3b d0		 cmp	 edx, eax
  000db	75 52		 jne	 SHORT $LN4@pqdownheap
  000dd	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  000e1	83 c0 01	 add	 eax, 1
  000e4	48 63 c8	 movsxd	 rcx, eax
  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000ec	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  000f4	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000f9	0f b6 94 08 a4
	14 00 00	 movzx	 edx, BYTE PTR [rax+rcx+5284]
  00101	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00106	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0010b	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  00113	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00118	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  00120	3b d0		 cmp	 edx, eax
  00122	7f 0b		 jg	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 466  :             j++;

  00124	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  00128	83 c0 01	 add	 eax, 1
  0012b	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax
$LN4@pqdownheap:

; 467  :         }
; 468  :         /* Exit if v is smaller than both sons */
; 469  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  0012f	48 63 0c 24	 movsxd	 rcx, DWORD PTR v$[rsp]
  00133	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00138	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  0013c	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00141	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00146	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  0014e	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00153	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00157	3b d0		 cmp	 edx, eax
  00159	7c 60		 jl	 SHORT $LN1@pqdownheap
  0015b	48 63 0c 24	 movsxd	 rcx, DWORD PTR v$[rsp]
  0015f	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00164	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  00168	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  0016d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00172	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  0017a	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0017f	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00183	3b d0		 cmp	 edx, eax
  00185	75 36		 jne	 SHORT $LN2@pqdownheap
  00187	48 63 0c 24	 movsxd	 rcx, DWORD PTR v$[rsp]
  0018b	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00190	0f b6 94 08 a4
	14 00 00	 movzx	 edx, BYTE PTR [rax+rcx+5284]
  00198	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  0019d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001a2	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  001aa	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001af	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  001b7	3b d0		 cmp	 edx, eax
  001b9	7f 02		 jg	 SHORT $LN2@pqdownheap
$LN1@pqdownheap:
  001bb	eb 3a		 jmp	 SHORT $LN5@pqdownheap
$LN2@pqdownheap:

; 470  : 
; 471  :         /* Exchange v with the smallest son */
; 472  :         s->heap[k] = s->heap[j];  k = j;

  001bd	4c 63 44 24 04	 movsxd	 r8, DWORD PTR j$[rsp]
  001c2	48 63 54 24 30	 movsxd	 rdx, DWORD PTR k$[rsp]
  001c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001cc	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001d1	42 8b 84 80 a8
	0b 00 00	 mov	 eax, DWORD PTR [rax+r8*4+2984]
  001d9	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax
  001e0	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  001e4	89 44 24 30	 mov	 DWORD PTR k$[rsp], eax

; 473  : 
; 474  :         /* And continue down the tree, setting j to the left son of k */
; 475  :         j <<= 1;

  001e8	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  001ec	d1 e0		 shl	 eax, 1
  001ee	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax

; 476  :     }

  001f2	e9 3a fe ff ff	 jmp	 $LN6@pqdownheap
$LN5@pqdownheap:

; 477  :     s->heap[k] = v;

  001f7	48 63 54 24 30	 movsxd	 rdx, DWORD PTR k$[rsp]
  001fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00201	8b 04 24	 mov	 eax, DWORD PTR v$[rsp]
  00204	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 478  : }

  0020b	48 83 c4 18	 add	 rsp, 24
  0020f	c3		 ret	 0
pqdownheap ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_block DD imagerel init_block
	DD	imagerel init_block+229
	DD	imagerel $unwind$init_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_block DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_block
_TEXT	SEGMENT
n$ = 0
s$ = 32
init_block PROC						; COMDAT

; 413  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 414  :     int n; /* iterates over tree elements */
; 415  : 
; 416  :     /* Initialize the trees. */
; 417  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00010	eb 09		 jmp	 SHORT $LN9@init_block
$LN8@init_block:
  00012	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN9@init_block:
  0001b	81 3c 24 1e 01
	00 00		 cmp	 DWORD PTR n$[rsp], 286	; 0000011eH
  00022	7d 15		 jge	 SHORT $LN7@init_block
  00024	48 63 14 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  00028	33 c9		 xor	 ecx, ecx
  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0002f	66 89 8c 90 bc
	00 00 00	 mov	 WORD PTR [rax+rdx*4+188], cx
  00037	eb d9		 jmp	 SHORT $LN8@init_block
$LN7@init_block:

; 418  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00039	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00040	eb 09		 jmp	 SHORT $LN6@init_block
$LN5@init_block:
  00042	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00045	83 c0 01	 add	 eax, 1
  00048	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN6@init_block:
  0004b	83 3c 24 1e	 cmp	 DWORD PTR n$[rsp], 30
  0004f	7d 15		 jge	 SHORT $LN4@init_block
  00051	48 63 14 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  00055	33 c9		 xor	 ecx, ecx
  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005c	66 89 8c 90 b0
	09 00 00	 mov	 WORD PTR [rax+rdx*4+2480], cx
  00064	eb dc		 jmp	 SHORT $LN5@init_block
$LN4@init_block:

; 419  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  00066	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  0006d	eb 09		 jmp	 SHORT $LN3@init_block
$LN2@init_block:
  0006f	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN3@init_block:
  00078	83 3c 24 13	 cmp	 DWORD PTR n$[rsp], 19
  0007c	7d 15		 jge	 SHORT $LN1@init_block
  0007e	48 63 14 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  00082	33 c9		 xor	 ecx, ecx
  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00089	66 89 8c 90 a4
	0a 00 00	 mov	 WORD PTR [rax+rdx*4+2724], cx
  00091	eb dc		 jmp	 SHORT $LN2@init_block
$LN1@init_block:

; 420  : 
; 421  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009d	66 89 88 bc 04
	00 00		 mov	 WORD PTR [rax+1212], cx

; 422  :     s->opt_len = s->static_len = 0L;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000a9	c7 80 04 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5892], 0
  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000b8	c7 80 00 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5888], 0

; 423  :     s->last_lit = s->matches = 0;

  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c7	c7 80 08 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5896], 0
  000d1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000d6	c7 80 f4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5876], 0

; 424  : }

  000e0	48 83 c4 18	 add	 rsp, 24
  000e4	c3		 ret	 0
init_block ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT tr_static_init
_TEXT	SEGMENT
tr_static_init PROC					; COMDAT

; 240  : #if defined(GEN_TREES_H) || !defined(STDC)
; 241  :     static int static_init_done = 0;
; 242  :     int n;        /* iterates over tree elements */
; 243  :     int bits;     /* bit counter */
; 244  :     int length;   /* length value */
; 245  :     int code;     /* code value */
; 246  :     int dist;     /* distance index */
; 247  :     ush bl_count[MAX_BITS+1];
; 248  :     /* number of codes at each bit length for an optimal tree */
; 249  : 
; 250  :     if (static_init_done) return;
; 251  : 
; 252  :     /* For some embedded targets, global variables are not initialized: */
; 253  :     static_l_desc.static_tree = static_ltree;
; 254  :     static_l_desc.extra_bits = extra_lbits;
; 255  :     static_d_desc.static_tree = static_dtree;
; 256  :     static_d_desc.extra_bits = extra_dbits;
; 257  :     static_bl_desc.extra_bits = extra_blbits;
; 258  : 
; 259  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 260  :     length = 0;
; 261  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 262  :         base_length[code] = length;
; 263  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 264  :             _length_code[length++] = (uch)code;
; 265  :         }
; 266  :     }
; 267  :     Assert (length == 256, "tr_static_init: length != 256");
; 268  :     /* Note that the length 255 (match length 258) can be represented
; 269  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 270  :      * overwrite length_code[255] to use the best encoding:
; 271  :      */
; 272  :     _length_code[length-1] = (uch)code;
; 273  : 
; 274  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 275  :     dist = 0;
; 276  :     for (code = 0 ; code < 16; code++) {
; 277  :         base_dist[code] = dist;
; 278  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 279  :             _dist_code[dist++] = (uch)code;
; 280  :         }
; 281  :     }
; 282  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 283  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 284  :     for ( ; code < D_CODES; code++) {
; 285  :         base_dist[code] = dist << 7;
; 286  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 287  :             _dist_code[256 + dist++] = (uch)code;
; 288  :         }
; 289  :     }
; 290  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 291  : 
; 292  :     /* Construct the codes of the static literal tree */
; 293  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 294  :     n = 0;
; 295  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 296  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 297  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 298  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 300  :      * tree construction to get a canonical Huffman tree (longest code
; 301  :      * all ones)
; 302  :      */
; 303  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 304  : 
; 305  :     /* The static distance tree is trivial: */
; 306  :     for (n = 0; n < D_CODES; n++) {
; 307  :         static_dtree[n].Len = 5;
; 308  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 309  :     }
; 310  :     static_init_done = 1;
; 311  : 
; 312  : #  ifdef GEN_TREES_H
; 313  :     gen_trees_header();
; 314  : #  endif
; 315  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 316  : }

  00000	c3		 ret	 0
tr_static_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$copy_block DD imagerel copy_block
	DD	imagerel copy_block+350
	DD	imagerel $unwind$copy_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_block DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT copy_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
len$ = 64
header$ = 72
copy_block PROC						; COMDAT

; 1202 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1203 :     bi_windup(s);        /* align on byte boundary */

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0001d	e8 00 00 00 00	 call	 bi_windup

; 1204 :     s->last_eob_len = 8; /* enough lookahead for inflate */

  00022	4c 8b 5c 24 30	 mov	 r11, QWORD PTR s$[rsp]
  00027	41 c7 83 0c 17
	00 00 08 00 00
	00		 mov	 DWORD PTR [r11+5900], 8

; 1205 : 
; 1206 :     if (header) {

  00032	83 7c 24 48 00	 cmp	 DWORD PTR header$[rsp], 0
  00037	0f 84 ca 00 00
	00		 je	 $LN3@copy_block

; 1207 :         put_short(s, (ush)len);

  0003d	0f b7 54 24 40	 movzx	 edx, WORD PTR len$[rsp]
  00042	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0004d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00055	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00059	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00061	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00064	83 c1 01	 add	 ecx, 1
  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0006c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0006f	0f b7 54 24 40	 movzx	 edx, WORD PTR len$[rsp]
  00074	c1 fa 08	 sar	 edx, 8
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0007c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0007f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00084	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00088	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00090	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00093	83 c1 01	 add	 ecx, 1
  00096	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0009b	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1208 :         put_short(s, (ush)~len);

  0009e	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  000a2	f7 d0		 not	 eax
  000a4	0f b7 d0	 movzx	 edx, ax
  000a7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000ad	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000b2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000ba	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000be	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000c6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c9	83 c1 01	 add	 ecx, 1
  000cc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000d1	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000d4	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  000d8	f7 d0		 not	 eax
  000da	0f b7 d0	 movzx	 edx, ax
  000dd	c1 fa 08	 sar	 edx, 8
  000e0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000e5	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000ed	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000f1	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000f4	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000f9	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00104	89 48 28	 mov	 DWORD PTR [rax+40], ecx
$LN3@copy_block:
$LN2@copy_block:

; 1209 : #ifdef DEBUG
; 1210 :         s->bits_sent += 2*16;
; 1211 : #endif
; 1212 :     }
; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent += (ulg)len<<3;
; 1215 : #endif
; 1216 :     while (len--) {

  00107	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  0010b	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0010f	83 e8 01	 sub	 eax, 1
  00112	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  00116	85 c9		 test	 ecx, ecx
  00118	74 3f		 je	 SHORT $LN1@copy_block

; 1217 :         put_byte(s, *buf++);

  0011a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0011f	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  00122	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00127	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0012b	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  00130	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00133	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0013b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0013e	83 c1 01	 add	 ecx, 1
  00141	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00146	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00149	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  0014e	48 83 c0 01	 add	 rax, 1
  00152	48 89 44 24 38	 mov	 QWORD PTR buf$[rsp], rax

; 1218 :     }

  00157	eb ae		 jmp	 SHORT $LN2@copy_block
$LN1@copy_block:

; 1219 : }

  00159	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0015d	c3		 ret	 0
copy_block ENDP
_TEXT	ENDS
PUBLIC	_tr_stored_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_stored_block DD imagerel $LN5
	DD	imagerel $LN5+407
	DD	imagerel $unwind$_tr_stored_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_stored_block DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_stored_block
_TEXT	SEGMENT
len$78591 = 32
val$78595 = 36
s$ = 64
buf$ = 72
stored_len$ = 80
eof$ = 88
_tr_stored_block PROC					; COMDAT

; 872  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 873  :     send_bits(s, (STORED_BLOCK<<1)+eof, 3);  /* send block type */

  00018	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR len$78591[rsp], 3
  00020	b9 10 00 00 00	 mov	 ecx, 16
  00025	2b 4c 24 20	 sub	 ecx, DWORD PTR len$78591[rsp]
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0002e	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00034	0f 8e f6 00 00
	00		 jle	 $LN2@tr_stored_
  0003a	8b 44 24 58	 mov	 eax, DWORD PTR eof$[rsp]
  0003e	89 44 24 24	 mov	 DWORD PTR val$78595[rsp], eax
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00047	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0004d	0f b6 c8	 movzx	 ecx, al
  00050	8b 54 24 24	 mov	 edx, DWORD PTR val$78595[rsp]
  00054	d3 e2		 shl	 edx, cl
  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0005b	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00062	0b ca		 or	 ecx, edx
  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00069	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00075	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0007c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00087	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0008f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00093	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0009b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0009e	83 c1 01	 add	 ecx, 1
  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000a6	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000a9	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000ae	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000b5	c1 fa 08	 sar	 edx, 8
  000b8	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000bd	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c0	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000c5	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000c9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000d1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000d4	83 c1 01	 add	 ecx, 1
  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000dc	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000df	0f b7 54 24 24	 movzx	 edx, WORD PTR val$78595[rsp]
  000e4	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000e9	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  000f0	b8 10 00 00 00	 mov	 eax, 16
  000f5	48 2b c1	 sub	 rax, rcx
  000f8	0f b6 c8	 movzx	 ecx, al
  000fb	8b c2		 mov	 eax, edx
  000fd	d3 f8		 sar	 eax, cl
  000ff	8b c8		 mov	 ecx, eax
  00101	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00106	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0010d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR len$78591[rsp]
  00112	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00117	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0011e	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00128	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0012e	eb 48		 jmp	 SHORT $LN1@tr_stored_
$LN2@tr_stored_:
  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00135	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0013b	0f b6 c8	 movzx	 ecx, al
  0013e	8b 54 24 58	 mov	 edx, DWORD PTR eof$[rsp]
  00142	d3 e2		 shl	 edx, cl
  00144	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00149	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00150	0b ca		 or	 ecx, edx
  00152	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00157	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0015e	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00163	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00169	03 4c 24 20	 add	 ecx, DWORD PTR len$78591[rsp]
  0016d	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00172	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@tr_stored_:

; 874  : #ifdef DEBUG
; 875  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 876  :     s->compressed_len += (stored_len + 4) << 3;
; 877  : #endif
; 878  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  00178	41 b9 01 00 00
	00		 mov	 r9d, 1
  0017e	44 8b 44 24 50	 mov	 r8d, DWORD PTR stored_len$[rsp]
  00183	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
  00188	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0018d	e8 00 00 00 00	 call	 copy_block

; 879  : }

  00192	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00196	c3		 ret	 0
_tr_stored_block ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_all_trees DD imagerel send_all_trees
	DD	imagerel send_all_trees+1611
	DD	imagerel $unwind$send_all_trees
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_all_trees DD 011701H
	DD	0a217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT send_all_trees
_TEXT	SEGMENT
rank$ = 32
len$78532 = 36
val$78536 = 40
len$78544 = 44
val$78548 = 48
len$78556 = 52
val$78560 = 56
len$78571 = 60
val$78575 = 64
s$ = 96
lcodes$ = 104
dcodes$ = 112
blcodes$ = 120
send_all_trees PROC					; COMDAT

; 841  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 842  :     int rank;                    /* index in bl_order */
; 843  : 
; 844  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 845  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 846  :             "too many codes");
; 847  :     Tracev((stderr, "\nbl counts: "));
; 848  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00017	c7 44 24 24 05
	00 00 00	 mov	 DWORD PTR len$78532[rsp], 5
  0001f	b9 10 00 00 00	 mov	 ecx, 16
  00024	2b 4c 24 24	 sub	 ecx, DWORD PTR len$78532[rsp]
  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0002d	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00033	0f 8e fb 00 00
	00		 jle	 $LN11@send_all_t
  00039	8b 44 24 68	 mov	 eax, DWORD PTR lcodes$[rsp]
  0003d	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  00042	89 44 24 28	 mov	 DWORD PTR val$78536[rsp], eax
  00046	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0004b	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00051	0f b6 c8	 movzx	 ecx, al
  00054	8b 54 24 28	 mov	 edx, DWORD PTR val$78536[rsp]
  00058	d3 e2		 shl	 edx, cl
  0005a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0005f	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00066	0b ca		 or	 ecx, edx
  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0006d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00079	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00080	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00086	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0008b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00093	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00097	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0009a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0009f	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000a2	83 c1 01	 add	 ecx, 1
  000a5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000aa	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000ad	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000b2	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000b9	c1 fa 08	 sar	 edx, 8
  000bc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000c1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000c9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000cd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000d0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000d5	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000d8	83 c1 01	 add	 ecx, 1
  000db	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000e0	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000e3	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78536[rsp]
  000e8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ed	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  000f4	b8 10 00 00 00	 mov	 eax, 16
  000f9	48 2b c1	 sub	 rax, rcx
  000fc	0f b6 c8	 movzx	 ecx, al
  000ff	8b c2		 mov	 eax, edx
  00101	d3 f8		 sar	 eax, cl
  00103	8b c8		 mov	 ecx, eax
  00105	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0010a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00111	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR len$78532[rsp]
  00116	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0011b	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00122	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00127	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0012c	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00132	eb 4e		 jmp	 SHORT $LN10@send_all_t
$LN11@send_all_t:
  00134	8b 54 24 68	 mov	 edx, DWORD PTR lcodes$[rsp]
  00138	81 ea 01 01 00
	00		 sub	 edx, 257		; 00000101H
  0013e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00143	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00149	0f b6 c8	 movzx	 ecx, al
  0014c	d3 e2		 shl	 edx, cl
  0014e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00153	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0015a	0b ca		 or	 ecx, edx
  0015c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00161	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00168	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0016d	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00173	03 4c 24 24	 add	 ecx, DWORD PTR len$78532[rsp]
  00177	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0017c	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN10@send_all_t:

; 849  :     send_bits(s, dcodes-1,   5);

  00182	c7 44 24 2c 05
	00 00 00	 mov	 DWORD PTR len$78544[rsp], 5
  0018a	b9 10 00 00 00	 mov	 ecx, 16
  0018f	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78544[rsp]
  00193	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00198	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0019e	0f 8e f9 00 00
	00		 jle	 $LN9@send_all_t
  001a4	8b 44 24 70	 mov	 eax, DWORD PTR dcodes$[rsp]
  001a8	83 e8 01	 sub	 eax, 1
  001ab	89 44 24 30	 mov	 DWORD PTR val$78548[rsp], eax
  001af	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001b4	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001ba	0f b6 c8	 movzx	 ecx, al
  001bd	8b 54 24 30	 mov	 edx, DWORD PTR val$78548[rsp]
  001c1	d3 e2		 shl	 edx, cl
  001c3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001c8	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  001cf	0b ca		 or	 ecx, edx
  001d1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d6	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001dd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001e2	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  001e9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001ef	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001f4	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001f7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001fc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00200	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00203	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00208	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0020b	83 c1 01	 add	 ecx, 1
  0020e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00213	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00216	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0021b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00222	c1 fa 08	 sar	 edx, 8
  00225	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0022a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0022d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00232	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00236	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00239	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0023e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00241	83 c1 01	 add	 ecx, 1
  00244	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00249	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0024c	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78548[rsp]
  00251	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00256	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0025d	b8 10 00 00 00	 mov	 eax, 16
  00262	48 2b c1	 sub	 rax, rcx
  00265	0f b6 c8	 movzx	 ecx, al
  00268	8b c2		 mov	 eax, edx
  0026a	d3 f8		 sar	 eax, cl
  0026c	8b c8		 mov	 ecx, eax
  0026e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00273	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0027a	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78544[rsp]
  0027f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00284	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0028b	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00290	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00295	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0029b	eb 4b		 jmp	 SHORT $LN8@send_all_t
$LN9@send_all_t:
  0029d	8b 54 24 70	 mov	 edx, DWORD PTR dcodes$[rsp]
  002a1	83 ea 01	 sub	 edx, 1
  002a4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a9	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002af	0f b6 c8	 movzx	 ecx, al
  002b2	d3 e2		 shl	 edx, cl
  002b4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b9	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002c0	0b ca		 or	 ecx, edx
  002c2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002c7	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  002ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002d3	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  002d9	03 4c 24 2c	 add	 ecx, DWORD PTR len$78544[rsp]
  002dd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e2	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@send_all_t:

; 850  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  002e8	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR len$78556[rsp], 4
  002f0	b9 10 00 00 00	 mov	 ecx, 16
  002f5	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78556[rsp]
  002f9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002fe	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00304	0f 8e f9 00 00
	00		 jle	 $LN7@send_all_t
  0030a	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  0030e	83 e8 04	 sub	 eax, 4
  00311	89 44 24 38	 mov	 DWORD PTR val$78560[rsp], eax
  00315	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0031a	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00320	0f b6 c8	 movzx	 ecx, al
  00323	8b 54 24 38	 mov	 edx, DWORD PTR val$78560[rsp]
  00327	d3 e2		 shl	 edx, cl
  00329	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0032e	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00335	0b ca		 or	 ecx, edx
  00337	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0033c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00343	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00348	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0034f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00355	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0035a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0035d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00362	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00366	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00369	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0036e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00371	83 c1 01	 add	 ecx, 1
  00374	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00379	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0037c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00381	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00388	c1 fa 08	 sar	 edx, 8
  0038b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00390	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00393	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00398	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0039c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0039f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003a4	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  003a7	83 c1 01	 add	 ecx, 1
  003aa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003af	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  003b2	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78560[rsp]
  003b7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003bc	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  003c3	b8 10 00 00 00	 mov	 eax, 16
  003c8	48 2b c1	 sub	 rax, rcx
  003cb	0f b6 c8	 movzx	 ecx, al
  003ce	8b c2		 mov	 eax, edx
  003d0	d3 f8		 sar	 eax, cl
  003d2	8b c8		 mov	 ecx, eax
  003d4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003d9	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003e0	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78556[rsp]
  003e5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003ea	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  003f1	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  003f6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003fb	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00401	eb 4b		 jmp	 SHORT $LN6@send_all_t
$LN7@send_all_t:
  00403	8b 54 24 78	 mov	 edx, DWORD PTR blcodes$[rsp]
  00407	83 ea 04	 sub	 edx, 4
  0040a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0040f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00415	0f b6 c8	 movzx	 ecx, al
  00418	d3 e2		 shl	 edx, cl
  0041a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0041f	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00426	0b ca		 or	 ecx, edx
  00428	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0042d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00434	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00439	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0043f	03 4c 24 34	 add	 ecx, DWORD PTR len$78556[rsp]
  00443	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00448	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@send_all_t:

; 851  :     for (rank = 0; rank < blcodes; rank++) {

  0044e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rank$[rsp], 0
  00456	eb 0b		 jmp	 SHORT $LN5@send_all_t
$LN4@send_all_t:
  00458	8b 44 24 20	 mov	 eax, DWORD PTR rank$[rsp]
  0045c	83 c0 01	 add	 eax, 1
  0045f	89 44 24 20	 mov	 DWORD PTR rank$[rsp], eax
$LN5@send_all_t:
  00463	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  00467	39 44 24 20	 cmp	 DWORD PTR rank$[rsp], eax
  0046b	0f 8d 97 01 00
	00		 jge	 $LN3@send_all_t

; 852  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 853  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00471	c7 44 24 3c 03
	00 00 00	 mov	 DWORD PTR len$78571[rsp], 3
  00479	b9 10 00 00 00	 mov	 ecx, 16
  0047e	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$78571[rsp]
  00482	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00487	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0048d	0f 8e 0f 01 00
	00		 jle	 $LN2@send_all_t
  00493	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR rank$[rsp]
  00498	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  0049f	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  004a3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004a8	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  004b0	89 44 24 40	 mov	 DWORD PTR val$78575[rsp], eax
  004b4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004b9	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  004bf	0f b6 c8	 movzx	 ecx, al
  004c2	8b 54 24 40	 mov	 edx, DWORD PTR val$78575[rsp]
  004c6	d3 e2		 shl	 edx, cl
  004c8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004cd	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  004d4	0b ca		 or	 ecx, edx
  004d6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004db	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  004e2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004e7	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  004ee	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004f4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004f9	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004fc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00501	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00505	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00508	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0050d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00510	83 c1 01	 add	 ecx, 1
  00513	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00518	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0051b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00520	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00527	c1 fa 08	 sar	 edx, 8
  0052a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0052f	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00532	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00537	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0053b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0053e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00543	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00546	83 c1 01	 add	 ecx, 1
  00549	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0054e	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00551	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78575[rsp]
  00556	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0055b	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00562	b8 10 00 00 00	 mov	 eax, 16
  00567	48 2b c1	 sub	 rax, rcx
  0056a	0f b6 c8	 movzx	 ecx, al
  0056d	8b c2		 mov	 eax, edx
  0056f	d3 f8		 sar	 eax, cl
  00571	8b c8		 mov	 ecx, eax
  00573	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00578	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0057f	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$78571[rsp]
  00584	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00589	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00590	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00595	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0059a	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  005a0	eb 61		 jmp	 SHORT $LN1@send_all_t
$LN2@send_all_t:
  005a2	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR rank$[rsp]
  005a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  005ae	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  005b2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005b7	0f b7 94 88 a6
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2726]
  005bf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005c4	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005ca	0f b6 c8	 movzx	 ecx, al
  005cd	d3 e2		 shl	 edx, cl
  005cf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005d4	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005db	0b ca		 or	 ecx, edx
  005dd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005e2	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005e9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005ee	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  005f4	03 4c 24 3c	 add	 ecx, DWORD PTR len$78571[rsp]
  005f8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005fd	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@send_all_t:

; 854  :     }

  00603	e9 50 fe ff ff	 jmp	 $LN4@send_all_t
$LN3@send_all_t:

; 855  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 856  : 
; 857  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  00608	44 8b 44 24 68	 mov	 r8d, DWORD PTR lcodes$[rsp]
  0060d	41 83 e8 01	 sub	 r8d, 1
  00611	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00616	48 81 c2 bc 00
	00 00		 add	 rdx, 188		; 000000bcH
  0061d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00622	e8 00 00 00 00	 call	 send_tree

; 858  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 859  : 
; 860  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00627	44 8b 44 24 70	 mov	 r8d, DWORD PTR dcodes$[rsp]
  0062c	41 83 e8 01	 sub	 r8d, 1
  00630	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00635	48 81 c2 b0 09
	00 00		 add	 rdx, 2480		; 000009b0H
  0063c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00641	e8 00 00 00 00	 call	 send_tree

; 861  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 862  : }

  00646	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0064a	c3		 ret	 0
send_all_trees ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_tree DD imagerel build_tree
	DD	imagerel build_tree+1143
	DD	imagerel $unwind$build_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_tree DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT build_tree
_TEXT	SEGMENT
elems$ = 32
n$ = 36
tree$ = 40
max_code$ = 48
node$ = 52
m$ = 56
stree$ = 64
tv136 = 72
tv230 = 76
s$ = 96
desc$ = 104
build_tree PROC						; COMDAT

; 622  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 623  :     ct_data *tree         = desc->dyn_tree;

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR desc$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 28	 mov	 QWORD PTR tree$[rsp], rax

; 624  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0001b	48 8b 44 24 68	 mov	 rax, QWORD PTR desc$[rsp]
  00020	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00024	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00027	48 89 44 24 40	 mov	 QWORD PTR stree$[rsp], rax

; 625  :     int elems             = desc->stat_desc->elems;

  0002c	48 8b 44 24 68	 mov	 rax, QWORD PTR desc$[rsp]
  00031	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00035	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00038	89 44 24 20	 mov	 DWORD PTR elems$[rsp], eax

; 626  :     int n, m;          /* iterate over heap elements */
; 627  :     int max_code = -1; /* largest code with non zero frequency */

  0003c	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR max_code$[rsp], -1

; 628  :     int node;          /* new node being created */
; 629  : 
; 630  :     /* Construct the initial heap, with least frequent element in
; 631  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 632  :      * heap[0] is not used.
; 633  :      */
; 634  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  00044	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00049	c7 80 9c 14 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5276], 0
  00053	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00058	c7 80 a0 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [rax+5280], 573 ; 0000023dH

; 635  : 
; 636  :     for (n = 0; n < elems; n++) {

  00062	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0006a	eb 0b		 jmp	 SHORT $LN14@build_tree
$LN13@build_tree:
  0006c	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00070	83 c0 01	 add	 eax, 1
  00073	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN14@build_tree:
  00077	8b 44 24 20	 mov	 eax, DWORD PTR elems$[rsp]
  0007b	39 44 24 24	 cmp	 DWORD PTR n$[rsp], eax
  0007f	7d 79		 jge	 SHORT $LN12@build_tree

; 637  :         if (tree[n].Freq != 0) {

  00081	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0008b	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  0008f	85 c0		 test	 eax, eax
  00091	74 51		 je	 SHORT $LN11@build_tree

; 638  :             s->heap[++(s->heap_len)] = max_code = n;

  00093	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00097	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax
  0009b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000a0	8b 88 9c 14 00
	00		 mov	 ecx, DWORD PTR [rax+5276]
  000a6	83 c1 01	 add	 ecx, 1
  000a9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ae	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  000b4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000b9	48 63 90 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5276]
  000c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000c5	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  000c9	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 639  :             s->depth[n] = 0;

  000d0	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  000d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000da	c6 84 08 a4 14
	00 00 00	 mov	 BYTE PTR [rax+rcx+5284], 0

; 640  :         } else {

  000e2	eb 11		 jmp	 SHORT $LN10@build_tree
$LN11@build_tree:

; 641  :             tree[n].Len = 0;

  000e4	48 63 54 24 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  000e9	33 c9		 xor	 ecx, ecx
  000eb	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000f0	66 89 4c 90 02	 mov	 WORD PTR [rax+rdx*4+2], cx
$LN10@build_tree:

; 642  :         }
; 643  :     }

  000f5	e9 72 ff ff ff	 jmp	 $LN13@build_tree
$LN12@build_tree:
$LN9@build_tree:

; 644  : 
; 645  :     /* The pkzip format requires that at least one distance code exists,
; 646  :      * and that at least one bit should be sent even if there is only one
; 647  :      * possible code. So to avoid special checks later on we force at least
; 648  :      * two codes of non zero frequency.
; 649  :      */
; 650  :     while (s->heap_len < 2) {

  000fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ff	83 b8 9c 14 00
	00 02		 cmp	 DWORD PTR [rax+5276], 2
  00106	0f 8d d3 00 00
	00		 jge	 $LN8@build_tree

; 651  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  0010c	83 7c 24 30 02	 cmp	 DWORD PTR max_code$[rsp], 2
  00111	7d 15		 jge	 SHORT $LN17@build_tree
  00113	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax
  0011e	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00122	89 44 24 48	 mov	 DWORD PTR tv136[rsp], eax
  00126	eb 08		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  00128	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN18@build_tree:
  00130	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00135	8b 88 9c 14 00
	00		 mov	 ecx, DWORD PTR [rax+5276]
  0013b	83 c1 01	 add	 ecx, 1
  0013e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00143	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  00149	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0014e	48 63 90 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5276]
  00155	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0015a	8b 44 24 48	 mov	 eax, DWORD PTR tv136[rsp]
  0015e	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax
  00165	8b 44 24 48	 mov	 eax, DWORD PTR tv136[rsp]
  00169	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax

; 652  :         tree[node].Freq = 1;

  0016d	48 63 54 24 34	 movsxd	 rdx, DWORD PTR node$[rsp]
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0017c	66 89 0c 90	 mov	 WORD PTR [rax+rdx*4], cx

; 653  :         s->depth[node] = 0;

  00180	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  00185	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0018a	c6 84 08 a4 14
	00 00 00	 mov	 BYTE PTR [rax+rcx+5284], 0

; 654  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  00192	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00197	8b 88 00 17 00
	00		 mov	 ecx, DWORD PTR [rax+5888]
  0019d	83 e9 01	 sub	 ecx, 1
  001a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001a5	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx
  001ab	48 83 7c 24 40
	00		 cmp	 QWORD PTR stree$[rsp], 0
  001b1	74 27		 je	 SHORT $LN7@build_tree
  001b3	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  001b8	48 8b 44 24 40	 mov	 rax, QWORD PTR stree$[rsp]
  001bd	0f b7 54 88 02	 movzx	 edx, WORD PTR [rax+rcx*4+2]
  001c2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001c7	8b 88 04 17 00
	00		 mov	 ecx, DWORD PTR [rax+5892]
  001cd	2b ca		 sub	 ecx, edx
  001cf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d4	89 88 04 17 00
	00		 mov	 DWORD PTR [rax+5892], ecx
$LN7@build_tree:

; 655  :         /* node is 0 or 1 so it does not have extra bits */
; 656  :     }

  001da	e9 1b ff ff ff	 jmp	 $LN9@build_tree
$LN8@build_tree:

; 657  :     desc->max_code = max_code;

  001df	48 8b 4c 24 68	 mov	 rcx, QWORD PTR desc$[rsp]
  001e4	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  001e8	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 658  : 
; 659  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 660  :      * establish sub-heaps of increasing lengths:
; 661  :      */
; 662  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  001eb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001f0	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  001f6	99		 cdq
  001f7	2b c2		 sub	 eax, edx
  001f9	d1 f8		 sar	 eax, 1
  001fb	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
  001ff	eb 0b		 jmp	 SHORT $LN6@build_tree
$LN5@build_tree:
  00201	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00205	83 e8 01	 sub	 eax, 1
  00208	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN6@build_tree:
  0020c	83 7c 24 24 01	 cmp	 DWORD PTR n$[rsp], 1
  00211	7c 16		 jl	 SHORT $LN4@build_tree
  00213	44 8b 44 24 24	 mov	 r8d, DWORD PTR n$[rsp]
  00218	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0021d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00222	e8 00 00 00 00	 call	 pqdownheap
  00227	eb d8		 jmp	 SHORT $LN5@build_tree
$LN4@build_tree:

; 663  : 
; 664  :     /* Construct the Huffman tree by repeatedly combining the least two
; 665  :      * frequent nodes.
; 666  :      */
; 667  :     node = elems;              /* next internal node of the tree */

  00229	8b 44 24 20	 mov	 eax, DWORD PTR elems$[rsp]
  0022d	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax
$LN3@build_tree:

; 668  :     do {
; 669  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00231	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00236	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  0023c	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
  00240	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00245	48 63 90 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5276]
  0024c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00251	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00256	8b 84 90 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rdx*4+2984]
  0025d	89 81 ac 0b 00
	00		 mov	 DWORD PTR [rcx+2988], eax
  00263	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00268	8b 88 9c 14 00
	00		 mov	 ecx, DWORD PTR [rax+5276]
  0026e	83 e9 01	 sub	 ecx, 1
  00271	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00276	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  0027c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00282	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  00287	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0028c	e8 00 00 00 00	 call	 pqdownheap

; 670  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  00291	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00296	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  0029c	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 671  : 
; 672  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  002a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a5	8b 88 a0 14 00
	00		 mov	 ecx, DWORD PTR [rax+5280]
  002ab	83 e9 01	 sub	 ecx, 1
  002ae	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b3	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  002b9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002be	48 63 90 a0 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5280]
  002c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002ca	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  002ce	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 673  :         s->heap[--(s->heap_max)] = m;

  002d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002da	8b 88 a0 14 00
	00		 mov	 ecx, DWORD PTR [rax+5280]
  002e0	83 e9 01	 sub	 ecx, 1
  002e3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e8	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  002ee	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002f3	48 63 90 a0 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5280]
  002fa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002ff	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  00303	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 674  : 
; 675  :         /* Create a new node father of n and m */
; 676  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0030a	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  0030f	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00314	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  00318	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  0031d	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00322	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00326	03 d0		 add	 edx, eax
  00328	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  0032d	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00332	66 89 14 88	 mov	 WORD PTR [rax+rcx*4], dx

; 677  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 678  :                                 s->depth[n] : s->depth[m]) + 1);

  00336	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  0033b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00340	0f b6 94 08 a4
	14 00 00	 movzx	 edx, BYTE PTR [rax+rcx+5284]
  00348	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  0034d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00352	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  0035a	3b d0		 cmp	 edx, eax
  0035c	7c 18		 jl	 SHORT $LN19@build_tree
  0035e	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00363	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00368	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  00370	89 44 24 4c	 mov	 DWORD PTR tv230[rsp], eax
  00374	eb 16		 jmp	 SHORT $LN20@build_tree
$LN19@build_tree:
  00376	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  0037b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00380	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  00388	89 44 24 4c	 mov	 DWORD PTR tv230[rsp], eax
$LN20@build_tree:
  0038c	8b 54 24 4c	 mov	 edx, DWORD PTR tv230[rsp]
  00390	83 c2 01	 add	 edx, 1
  00393	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  00398	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0039d	88 94 08 a4 14
	00 00		 mov	 BYTE PTR [rax+rcx+5284], dl

; 679  :         tree[n].Dad = tree[m].Dad = (ush)node;

  003a4	48 63 54 24 38	 movsxd	 rdx, DWORD PTR m$[rsp]
  003a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003ae	0f b7 44 24 34	 movzx	 eax, WORD PTR node$[rsp]
  003b3	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax
  003b8	48 63 54 24 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  003bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003c2	0f b7 44 24 34	 movzx	 eax, WORD PTR node$[rsp]
  003c7	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax

; 680  : #ifdef DUMP_BL_TREE
; 681  :         if (tree == s->bl_tree) {
; 682  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 683  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 684  :         }
; 685  : #endif
; 686  :         /* and insert the new node in the heap */
; 687  :         s->heap[SMALLEST] = node++;

  003cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003d1	8b 44 24 34	 mov	 eax, DWORD PTR node$[rsp]
  003d5	89 81 ac 0b 00
	00		 mov	 DWORD PTR [rcx+2988], eax
  003db	8b 44 24 34	 mov	 eax, DWORD PTR node$[rsp]
  003df	83 c0 01	 add	 eax, 1
  003e2	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax

; 688  :         pqdownheap(s, tree, SMALLEST);

  003e6	41 b8 01 00 00
	00		 mov	 r8d, 1
  003ec	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  003f1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003f6	e8 00 00 00 00	 call	 pqdownheap

; 689  : 
; 690  :     } while (s->heap_len >= 2);

  003fb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00400	83 b8 9c 14 00
	00 02		 cmp	 DWORD PTR [rax+5276], 2
  00407	0f 8d 24 fe ff
	ff		 jge	 $LN3@build_tree

; 691  : 
; 692  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  0040d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00412	8b 88 a0 14 00
	00		 mov	 ecx, DWORD PTR [rax+5280]
  00418	83 e9 01	 sub	 ecx, 1
  0041b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00420	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  00426	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0042b	48 63 90 a0 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5280]
  00432	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00437	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0043c	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  00442	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 693  : 
; 694  :     /* At this point, the fields freq and dad are set. We can now
; 695  :      * generate the bit lengths.
; 696  :      */
; 697  :     gen_bitlen(s, (tree_desc *)desc);

  00449	48 8b 54 24 68	 mov	 rdx, QWORD PTR desc$[rsp]
  0044e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00453	e8 00 00 00 00	 call	 gen_bitlen

; 698  : 
; 699  :     /* The field len is now set, we can generate the bit codes */
; 700  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00458	4c 8b 44 24 60	 mov	 r8, QWORD PTR s$[rsp]
  0045d	49 81 c0 88 0b
	00 00		 add	 r8, 2952		; 00000b88H
  00464	8b 54 24 30	 mov	 edx, DWORD PTR max_code$[rsp]
  00468	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0046d	e8 00 00 00 00	 call	 gen_codes

; 701  : }

  00472	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00476	c3		 ret	 0
build_tree ENDP
_TEXT	ENDS
PUBLIC	_tr_init
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_init DD imagerel $LN3
	DD	imagerel $LN3+202
	DD	imagerel $unwind$_tr_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_init DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_init
_TEXT	SEGMENT
s$ = 48
_tr_init PROC						; COMDAT

; 384  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 385  :     tr_static_init();

  00009	e8 00 00 00 00	 call	 tr_static_init

; 386  : 
; 387  :     s->l_desc.dyn_tree = s->dyn_ltree;

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00013	48 81 c1 bc 00
	00 00		 add	 rcx, 188		; 000000bcH
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0001f	48 89 88 40 0b
	00 00		 mov	 QWORD PTR [rax+2880], rcx

; 388  :     s->l_desc.stat_desc = &static_l_desc;

  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0002b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_l_desc
  00032	48 89 81 50 0b
	00 00		 mov	 QWORD PTR [rcx+2896], rax

; 389  : 
; 390  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0003e	48 81 c1 b0 09
	00 00		 add	 rcx, 2480		; 000009b0H
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0004a	48 89 88 58 0b
	00 00		 mov	 QWORD PTR [rax+2904], rcx

; 391  :     s->d_desc.stat_desc = &static_d_desc;

  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_d_desc
  0005d	48 89 81 68 0b
	00 00		 mov	 QWORD PTR [rcx+2920], rax

; 392  : 
; 393  :     s->bl_desc.dyn_tree = s->bl_tree;

  00064	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00069	48 81 c1 a4 0a
	00 00		 add	 rcx, 2724		; 00000aa4H
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00075	48 89 88 70 0b
	00 00		 mov	 QWORD PTR [rax+2928], rcx

; 394  :     s->bl_desc.stat_desc = &static_bl_desc;

  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_bl_desc
  00088	48 89 81 80 0b
	00 00		 mov	 QWORD PTR [rcx+2944], rax

; 395  : 
; 396  :     s->bi_buf = 0;

  0008f	33 c9		 xor	 ecx, ecx
  00091	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00096	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 397  :     s->bi_valid = 0;

  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000a2	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0

; 398  :     s->last_eob_len = 8; /* enough lookahead for inflate */

  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000b1	c7 80 0c 17 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+5900], 8

; 399  : #ifdef DEBUG
; 400  :     s->compressed_len = 0L;
; 401  :     s->bits_sent = 0L;
; 402  : #endif
; 403  : 
; 404  :     /* Initialize the first block of the first file: */
; 405  :     init_block(s);

  000bb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000c0	e8 00 00 00 00	 call	 init_block

; 406  : }

  000c5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c9	c3		 ret	 0
_tr_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_bl_tree DD imagerel build_bl_tree
	DD	imagerel build_bl_tree+209
	DD	imagerel $unwind$build_bl_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_bl_tree DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT build_bl_tree
_TEXT	SEGMENT
max_blindex$ = 32
s$ = 64
build_bl_tree PROC					; COMDAT

; 805  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 806  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 807  : 
; 808  :     /* Determine the bit length frequencies for literal and distance trees */
; 809  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00009	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  0000e	48 81 c2 bc 00
	00 00		 add	 rdx, 188		; 000000bcH
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0001a	44 8b 80 48 0b
	00 00		 mov	 r8d, DWORD PTR [rax+2888]
  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00026	e8 00 00 00 00	 call	 scan_tree

; 810  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  0002b	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  00030	48 81 c2 b0 09
	00 00		 add	 rdx, 2480		; 000009b0H
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0003c	44 8b 80 60 0b
	00 00		 mov	 r8d, DWORD PTR [rax+2912]
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00048	e8 00 00 00 00	 call	 scan_tree

; 811  : 
; 812  :     /* Build the bit length tree: */
; 813  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  0004d	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  00052	48 81 c2 70 0b
	00 00		 add	 rdx, 2928		; 00000b70H
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0005e	e8 00 00 00 00	 call	 build_tree

; 814  :     /* opt_len now includes the length of the tree representations, except
; 815  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 816  :      */
; 817  : 
; 818  :     /* Determine the number of bit length codes to send. The pkzip format
; 819  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 820  :      * 3 but the actual value used is 4.)
; 821  :      */
; 822  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00063	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR max_blindex$[rsp], 18
  0006b	eb 0b		 jmp	 SHORT $LN4@build_bl_t
$LN3@build_bl_t:
  0006d	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]
  00071	83 e8 01	 sub	 eax, 1
  00074	89 44 24 20	 mov	 DWORD PTR max_blindex$[rsp], eax
$LN4@build_bl_t:
  00078	83 7c 24 20 03	 cmp	 DWORD PTR max_blindex$[rsp], 3
  0007d	7c 25		 jl	 SHORT $LN2@build_bl_t

; 823  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  0007f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR max_blindex$[rsp]
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  0008b	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  0008f	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00094	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  0009c	85 c0		 test	 eax, eax
  0009e	74 02		 je	 SHORT $LN1@build_bl_t
  000a0	eb 02		 jmp	 SHORT $LN2@build_bl_t
$LN1@build_bl_t:

; 824  :     }

  000a2	eb c9		 jmp	 SHORT $LN3@build_bl_t
$LN2@build_bl_t:

; 825  :     /* Update opt_len to include the bit length tree and counts */
; 826  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000a4	8b 4c 24 20	 mov	 ecx, DWORD PTR max_blindex$[rsp]
  000a8	83 c1 01	 add	 ecx, 1
  000ab	6b c9 03	 imul	 ecx, 3
  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000b3	8b 80 00 17 00
	00		 mov	 eax, DWORD PTR [rax+5888]
  000b9	8d 4c 01 0e	 lea	 ecx, DWORD PTR [rcx+rax+14]
  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000c2	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx

; 827  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 828  :             s->opt_len, s->static_len));
; 829  : 
; 830  :     return max_blindex;

  000c8	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]

; 831  : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
build_bl_tree ENDP
PUBLIC	_tr_flush_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_flush_block DD imagerel $LN17
	DD	imagerel $LN17+1159
	DD	imagerel $unwind$_tr_flush_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_flush_block DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_flush_block
_TEXT	SEGMENT
static_lenb$ = 32
max_blindex$ = 36
opt_lenb$ = 40
len$78676 = 44
val$78680 = 48
len$78691 = 52
val$78695 = 56
s$ = 80
buf$ = 88
stored_len$ = 96
eof$ = 104
_tr_flush_block PROC					; COMDAT

; 926  : {

$LN17:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 927  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 928  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00018	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR max_blindex$[rsp], 0

; 929  : 
; 930  :     /* Build the Huffman trees unless a stored block is forced */
; 931  :     if (s->level > 0) {

  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00025	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [rax+172], 0
  0002c	0f 8e 97 00 00
	00		 jle	 $LN14@tr_flush_b

; 932  : 
; 933  :         /* Check if the file is binary or text */
; 934  :         if (stored_len > 0 && s->strm->data_type == Z_UNKNOWN)

  00032	83 7c 24 60 00	 cmp	 DWORD PTR stored_len$[rsp], 0
  00037	76 18		 jbe	 SHORT $LN13@tr_flush_b
  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	83 78 48 02	 cmp	 DWORD PTR [rax+72], 2
  00045	75 0a		 jne	 SHORT $LN13@tr_flush_b

; 935  :             set_data_type(s);

  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0004c	e8 00 00 00 00	 call	 set_data_type
$LN13@tr_flush_b:

; 936  : 
; 937  :         /* Construct the literal and distance trees */
; 938  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00051	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00056	48 81 c2 40 0b
	00 00		 add	 rdx, 2880		; 00000b40H
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00062	e8 00 00 00 00	 call	 build_tree

; 939  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 940  :                 s->static_len));
; 941  : 
; 942  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00067	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0006c	48 81 c2 58 0b
	00 00		 add	 rdx, 2904		; 00000b58H
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00078	e8 00 00 00 00	 call	 build_tree

; 943  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  :         /* At this point, opt_len and static_len are the total bit lengths of
; 946  :          * the compressed block data, excluding the tree representations.
; 947  :          */
; 948  : 
; 949  :         /* Build the bit length tree for the above two trees, and get the index
; 950  :          * in bl_order of the last bit length code to send.
; 951  :          */
; 952  :         max_blindex = build_bl_tree(s);

  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00082	e8 00 00 00 00	 call	 build_bl_tree
  00087	89 44 24 24	 mov	 DWORD PTR max_blindex$[rsp], eax

; 953  : 
; 954  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 955  :         opt_lenb = (s->opt_len+3+7)>>3;

  0008b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00090	8b 80 00 17 00
	00		 mov	 eax, DWORD PTR [rax+5888]
  00096	83 c0 0a	 add	 eax, 10
  00099	c1 e8 03	 shr	 eax, 3
  0009c	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax

; 956  :         static_lenb = (s->static_len+3+7)>>3;

  000a0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a5	8b 80 04 17 00
	00		 mov	 eax, DWORD PTR [rax+5892]
  000ab	83 c0 0a	 add	 eax, 10
  000ae	c1 e8 03	 shr	 eax, 3
  000b1	89 44 24 20	 mov	 DWORD PTR static_lenb$[rsp], eax

; 957  : 
; 958  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 959  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 960  :                 s->last_lit));
; 961  : 
; 962  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  000b5	8b 44 24 28	 mov	 eax, DWORD PTR opt_lenb$[rsp]
  000b9	39 44 24 20	 cmp	 DWORD PTR static_lenb$[rsp], eax
  000bd	77 08		 ja	 SHORT $LN12@tr_flush_b
  000bf	8b 44 24 20	 mov	 eax, DWORD PTR static_lenb$[rsp]
  000c3	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax
$LN12@tr_flush_b:

; 963  : 
; 964  :     } else {

  000c7	eb 13		 jmp	 SHORT $LN11@tr_flush_b
$LN14@tr_flush_b:

; 965  :         Assert(buf != (char*)0, "lost buf");
; 966  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000c9	8b 44 24 60	 mov	 eax, DWORD PTR stored_len$[rsp]
  000cd	83 c0 05	 add	 eax, 5
  000d0	89 44 24 20	 mov	 DWORD PTR static_lenb$[rsp], eax
  000d4	8b 44 24 20	 mov	 eax, DWORD PTR static_lenb$[rsp]
  000d8	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax
$LN11@tr_flush_b:

; 967  :     }
; 968  : 
; 969  : #ifdef FORCE_STORED
; 970  :     if (buf != (char*)0) { /* force stored block */
; 971  : #else
; 972  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  000dc	8b 44 24 60	 mov	 eax, DWORD PTR stored_len$[rsp]
  000e0	83 c0 04	 add	 eax, 4
  000e3	3b 44 24 28	 cmp	 eax, DWORD PTR opt_lenb$[rsp]
  000e7	77 26		 ja	 SHORT $LN10@tr_flush_b
  000e9	48 83 7c 24 58
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000ef	74 1e		 je	 SHORT $LN10@tr_flush_b

; 973  :                        /* 4: two words for the lengths */
; 974  : #endif
; 975  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 976  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 977  :          * the last block flush, because compression would have been
; 978  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 979  :          * transform a block into a stored block.
; 980  :          */
; 981  :         _tr_stored_block(s, buf, stored_len, eof);

  000f1	44 8b 4c 24 68	 mov	 r9d, DWORD PTR eof$[rsp]
  000f6	44 8b 44 24 60	 mov	 r8d, DWORD PTR stored_len$[rsp]
  000fb	48 8b 54 24 58	 mov	 rdx, QWORD PTR buf$[rsp]
  00100	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00105	e8 00 00 00 00	 call	 _tr_stored_block
  0010a	e9 58 03 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 982  : 
; 983  : #ifdef FORCE_STATIC
; 984  :     } else if (static_lenb >= 0) { /* force static trees */
; 985  : #else
; 986  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  0010f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00114	83 b8 b0 00 00
	00 04		 cmp	 DWORD PTR [rax+176], 4
  0011b	74 0e		 je	 SHORT $LN7@tr_flush_b
  0011d	8b 44 24 28	 mov	 eax, DWORD PTR opt_lenb$[rsp]
  00121	39 44 24 20	 cmp	 DWORD PTR static_lenb$[rsp], eax
  00125	0f 85 83 01 00
	00		 jne	 $LN8@tr_flush_b
$LN7@tr_flush_b:

; 987  : #endif
; 988  :         send_bits(s, (STATIC_TREES<<1)+eof, 3);

  0012b	c7 44 24 2c 03
	00 00 00	 mov	 DWORD PTR len$78676[rsp], 3
  00133	b9 10 00 00 00	 mov	 ecx, 16
  00138	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78676[rsp]
  0013c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00141	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00147	0f 8e f9 00 00
	00		 jle	 $LN6@tr_flush_b
  0014d	8b 44 24 68	 mov	 eax, DWORD PTR eof$[rsp]
  00151	83 c0 02	 add	 eax, 2
  00154	89 44 24 30	 mov	 DWORD PTR val$78680[rsp], eax
  00158	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0015d	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00163	0f b6 c8	 movzx	 ecx, al
  00166	8b 54 24 30	 mov	 edx, DWORD PTR val$78680[rsp]
  0016a	d3 e2		 shl	 edx, cl
  0016c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00171	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00178	0b ca		 or	 ecx, edx
  0017a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0017f	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00186	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0018b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00192	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00198	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0019d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001a0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001a5	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001ac	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001b1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001b4	83 c1 01	 add	 ecx, 1
  001b7	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001bc	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  001bf	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001c4	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  001cb	c1 fa 08	 sar	 edx, 8
  001ce	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001d3	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001d6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001db	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001df	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001e2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e7	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001ea	83 c1 01	 add	 ecx, 1
  001ed	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001f2	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  001f5	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78680[rsp]
  001fa	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001ff	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00206	b8 10 00 00 00	 mov	 eax, 16
  0020b	48 2b c1	 sub	 rax, rcx
  0020e	0f b6 c8	 movzx	 ecx, al
  00211	8b c2		 mov	 eax, edx
  00213	d3 f8		 sar	 eax, cl
  00215	8b c8		 mov	 ecx, eax
  00217	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0021c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00223	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78676[rsp]
  00228	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0022d	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00234	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00239	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0023e	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00244	eb 4b		 jmp	 SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
  00246	8b 54 24 68	 mov	 edx, DWORD PTR eof$[rsp]
  0024a	83 c2 02	 add	 edx, 2
  0024d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00252	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	d3 e2		 shl	 edx, cl
  0025d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00262	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00269	0b ca		 or	 ecx, edx
  0026b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00270	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00277	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0027c	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00282	03 4c 24 2c	 add	 ecx, DWORD PTR len$78676[rsp]
  00286	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0028b	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN5@tr_flush_b:

; 989  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  00291	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:static_dtree
  00298	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:static_ltree
  0029f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002a4	e8 00 00 00 00	 call	 compress_block

; 990  : #ifdef DEBUG
; 991  :         s->compressed_len += 3 + s->static_len;
; 992  : #endif
; 993  :     } else {

  002a9	e9 b9 01 00 00	 jmp	 $LN4@tr_flush_b
$LN8@tr_flush_b:

; 994  :         send_bits(s, (DYN_TREES<<1)+eof, 3);

  002ae	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR len$78691[rsp], 3
  002b6	b9 10 00 00 00	 mov	 ecx, 16
  002bb	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78691[rsp]
  002bf	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002c4	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  002ca	0f 8e f9 00 00
	00		 jle	 $LN3@tr_flush_b
  002d0	8b 44 24 68	 mov	 eax, DWORD PTR eof$[rsp]
  002d4	83 c0 04	 add	 eax, 4
  002d7	89 44 24 38	 mov	 DWORD PTR val$78695[rsp], eax
  002db	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002e0	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002e6	0f b6 c8	 movzx	 ecx, al
  002e9	8b 54 24 38	 mov	 edx, DWORD PTR val$78695[rsp]
  002ed	d3 e2		 shl	 edx, cl
  002ef	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002f4	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002fb	0b ca		 or	 ecx, edx
  002fd	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00302	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00309	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0030e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00315	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0031b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00320	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00323	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00328	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0032c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0032f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00334	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00337	83 c1 01	 add	 ecx, 1
  0033a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0033f	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00342	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00347	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0034e	c1 fa 08	 sar	 edx, 8
  00351	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00356	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00359	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0035e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00362	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00365	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0036a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0036d	83 c1 01	 add	 ecx, 1
  00370	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00375	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00378	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78695[rsp]
  0037d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00382	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00389	b8 10 00 00 00	 mov	 eax, 16
  0038e	48 2b c1	 sub	 rax, rcx
  00391	0f b6 c8	 movzx	 ecx, al
  00394	8b c2		 mov	 eax, edx
  00396	d3 f8		 sar	 eax, cl
  00398	8b c8		 mov	 ecx, eax
  0039a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0039f	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003a6	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78691[rsp]
  003ab	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003b0	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  003b7	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  003bc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003c1	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  003c7	eb 4b		 jmp	 SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
  003c9	8b 54 24 68	 mov	 edx, DWORD PTR eof$[rsp]
  003cd	83 c2 04	 add	 edx, 4
  003d0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003d5	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  003db	0f b6 c8	 movzx	 ecx, al
  003de	d3 e2		 shl	 edx, cl
  003e0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003e5	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  003ec	0b ca		 or	 ecx, edx
  003ee	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003f3	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003fa	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003ff	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00405	03 4c 24 34	 add	 ecx, DWORD PTR len$78691[rsp]
  00409	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0040e	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN2@tr_flush_b:

; 995  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 996  :                        max_blindex+1);

  00414	44 8b 4c 24 24	 mov	 r9d, DWORD PTR max_blindex$[rsp]
  00419	41 83 c1 01	 add	 r9d, 1
  0041d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00422	44 8b 80 60 0b
	00 00		 mov	 r8d, DWORD PTR [rax+2912]
  00429	41 83 c0 01	 add	 r8d, 1
  0042d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00432	8b 90 48 0b 00
	00		 mov	 edx, DWORD PTR [rax+2888]
  00438	83 c2 01	 add	 edx, 1
  0043b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00440	e8 00 00 00 00	 call	 send_all_trees

; 997  :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  00445	4c 8b 44 24 50	 mov	 r8, QWORD PTR s$[rsp]
  0044a	49 81 c0 b0 09
	00 00		 add	 r8, 2480		; 000009b0H
  00451	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00456	48 81 c2 bc 00
	00 00		 add	 rdx, 188		; 000000bcH
  0045d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00462	e8 00 00 00 00	 call	 compress_block
$LN4@tr_flush_b:
$LN9@tr_flush_b:

; 998  : #ifdef DEBUG
; 999  :         s->compressed_len += 3 + s->opt_len;
; 1000 : #endif
; 1001 :     }
; 1002 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1003 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1004 :      * and uLong implemented on 32 bits.
; 1005 :      */
; 1006 :     init_block(s);

  00467	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0046c	e8 00 00 00 00	 call	 init_block

; 1007 : 
; 1008 :     if (eof) {

  00471	83 7c 24 68 00	 cmp	 DWORD PTR eof$[rsp], 0
  00476	74 0a		 je	 SHORT $LN1@tr_flush_b

; 1009 :         bi_windup(s);

  00478	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0047d	e8 00 00 00 00	 call	 bi_windup
$LN1@tr_flush_b:

; 1010 : #ifdef DEBUG
; 1011 :         s->compressed_len += 7;  /* align on byte boundary */
; 1012 : #endif
; 1013 :     }
; 1014 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1015 :            s->compressed_len-7*eof));
; 1016 : }

  00482	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00486	c3		 ret	 0
_tr_flush_block ENDP
END
